<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>AnnotationOnSeparateLine:Hbks.kt$Hbks.Availability.Enroll$@RequiresApi(Build.VERSION_CODES.R) data</ID>
    <ID>ArgumentListWrapping:AlertHelper.kt$AlertHelper.Companion$( context, if (message != null) context.getString(message) else null, title, icon, buttons )</ID>
    <ID>ArgumentListWrapping:BaseButton.kt$( modifier = modifier, text = text, style = MaterialTheme.typography.bodyLarge.copy( fontSize = fontSize, fontWeight = fontWeight, color = color ))</ID>
    <ID>ArgumentListWrapping:BrowseFoldersAdapter.kt$BrowseFoldersAdapter.FolderViewHolder$( binding.root)</ID>
    <ID>ArgumentListWrapping:BrowseFoldersAdapter.kt$BrowseFoldersAdapter.FolderViewHolder$(binding.root)</ID>
    <ID>ArgumentListWrapping:Collection.kt$Collection.Companion$( Collection::class.java, "project_id = ?", arrayOf(projectId.toString()), null, "id ASC", null)</ID>
    <ID>ArgumentListWrapping:Collection.kt$Collection.Companion$(Collection::class.java, "project_id = ?", arrayOf(projectId.toString()), null, "id ASC", null)</ID>
    <ID>ArgumentListWrapping:Context.kt$( this, getString(R.string.no_webbrowser_found_error), Toast.LENGTH_LONG)</ID>
    <ID>ArgumentListWrapping:Context.kt$(this, getString(R.string.no_webbrowser_found_error), Toast.LENGTH_LONG)</ID>
    <ID>ArgumentListWrapping:CreateNewFolderFragment.kt$CreateNewFolderFragment$( requireContext(), getString(R.string.folder_name_already_exists), Toast.LENGTH_LONG )</ID>
    <ID>ArgumentListWrapping:Drawable.kt$( TypedValue.COMPLEX_UNIT_DIP, biggerSideDipLength.toFloat(), context.resources.displayMetrics )</ID>
    <ID>ArgumentListWrapping:DrawableExtensions.kt$( (intrinsicWidth * factor).roundToInt(), (intrinsicHeight * factor).roundToInt(), context)</ID>
    <ID>ArgumentListWrapping:DrawableExtensions.kt$( TypedValue.COMPLEX_UNIT_DIP, biggerSideDipLength.toFloat(), context.resources.displayMetrics)</ID>
    <ID>ArgumentListWrapping:DrawableExtensions.kt$((intrinsicWidth * factor).roundToInt(), (intrinsicHeight * factor).roundToInt(), context)</ID>
    <ID>ArgumentListWrapping:DrawableExtensions.kt$(TypedValue.COMPLEX_UNIT_DIP, biggerSideDipLength.toFloat(), context.resources.displayMetrics)</ID>
    <ID>ArgumentListWrapping:EditFolderActivity.kt$EditFolderActivity$( this, R.string.action_remove_project, R.string.remove_from_app, buttons = listOf( AlertHelper.positiveButton(R.string.remove) { _, _ -&gt; mProject.delete() finish() }, AlertHelper.negativeButton() ) )</ID>
    <ID>ArgumentListWrapping:FileUtils.kt$FileUtils$( Uri.parse("content://downloads/public_downloads"), java.lang.Long.valueOf(id))</ID>
    <ID>ArgumentListWrapping:FileUtils.kt$FileUtils$("$TAG File -", "Authority: " + uri.authority + ", Fragment: " + uri.fragment + ", Port: " + uri.port + ", Query: " + uri.query + ", Scheme: " + uri.scheme + ", Host: " + uri.host + ", Segments: " + uri.pathSegments.toString() )</ID>
    <ID>ArgumentListWrapping:FolderAdapter.kt$FolderAdapter$( LayoutInflater.from(parent.context), parent, false )</ID>
    <ID>ArgumentListWrapping:FullscreenDimmingOverlay.kt$FullScreenCreateGroupDimmingOverlay$( context, title = "Confirm", message = "Do you want to cancel?", positiveButtonText = "Yes", negativeButtonText = "No")</ID>
    <ID>ArgumentListWrapping:FullscreenDimmingOverlay.kt$FullScreenDimmingOverlay$( context, title = "Confirm", message = "Do you want to cancel?", positiveButtonText = "Yes", negativeButtonText = "No")</ID>
    <ID>ArgumentListWrapping:GDriveActivity.kt$GDriveActivity$( AlertHelper.positiveButton(R.string.remove) { _, _ -&gt; // delete sign-in from database space.delete() // google logout val googleSignInClient = GoogleSignIn.getClient(applicationContext, GoogleSignInOptions.DEFAULT_SIGN_IN) googleSignInClient.revokeAccess().addOnCompleteListener { googleSignInClient.signOut() } // leave activity Space.navigate(this) }, AlertHelper.negativeButton())</ID>
    <ID>ArgumentListWrapping:GDriveConduit.kt$GDriveConduit$( "the createFolder calls defined in Conduit don't map to GDrive API. use GDriveConduit.createFolder instead")</ID>
    <ID>ArgumentListWrapping:GDriveConduit.kt$GDriveConduit$("the createFolder calls defined in Conduit don't map to GDrive API. use GDriveConduit.createFolder instead")</ID>
    <ID>ArgumentListWrapping:GDriveConduit.kt$GDriveConduit.Companion$( "mimeType='application/vnd.google-apps.folder' and 'root' in parents and trashed = false")</ID>
    <ID>ArgumentListWrapping:GDriveConduit.kt$GDriveConduit.Companion$( "mimeType='application/vnd.google-apps.folder' and name = '$folderName' and trashed = false and '$parentId' in parents")</ID>
    <ID>ArgumentListWrapping:GDriveConduit.kt$GDriveConduit.Companion$("mimeType='application/vnd.google-apps.folder' and 'root' in parents and trashed = false")</ID>
    <ID>ArgumentListWrapping:GDriveConduit.kt$GDriveConduit.Companion$("mimeType='application/vnd.google-apps.folder' and name = '$folderName' and trashed = false and '$parentId' in parents")</ID>
    <ID>ArgumentListWrapping:IaConduit.kt$IaConduit$( mContext.contentResolver, Uri.fromFile(uploadFile), uploadFile.length(), textMediaType, createListener(cancellable = { !mCancelled }) )</ID>
    <ID>ArgumentListWrapping:InternetArchiveFragment.kt$InternetArchiveFragment$( message)</ID>
    <ID>ArgumentListWrapping:InternetArchiveFragment.kt$InternetArchiveFragment$(message)</ID>
    <ID>ArgumentListWrapping:InternetArchiveLoginScreen.kt$( Intent.ACTION_VIEW, Uri.parse(CreateLogin.URI) )</ID>
    <ID>ArgumentListWrapping:InternetArchiveLoginScreen.kt$( contract = ActivityResultContracts.StartActivityForResult(), onResult = {})</ID>
    <ID>ArgumentListWrapping:InternetArchiveLoginScreen.kt$( modifier = Modifier .weight(1f) .heightIn(ThemeDimensions.touchable) .padding(ThemeDimensions.spacing.small), shape = RoundedCornerShape(ThemeDimensions.roundedCorner), onClick = { dispatch(Action.Cancel) })</ID>
    <ID>ArgumentListWrapping:InternetArchiveLoginScreen.kt$( modifier = Modifier.heightIn(ThemeDimensions.touchable), onClick = { dispatch(CreateLogin) })</ID>
    <ID>ArgumentListWrapping:InternetArchiveLoginScreen.kt$( modifier = Modifier.sizeIn(ThemeDimensions.touchable), onClick = { showPassword = !showPassword })</ID>
    <ID>ArgumentListWrapping:InternetArchiveLoginScreen.kt$( username = "user@example.org", password = "abc123" )</ID>
    <ID>ArgumentListWrapping:InternetArchiveMapper.kt$InternetArchiveMapper$( access = response.access, secret = response.secret )</ID>
    <ID>ArgumentListWrapping:MainActivity.kt$MainActivity$( AddMediaDialogFragment.RESP_FILES, this@MainActivity )</ID>
    <ID>ArgumentListWrapping:MainActivity.kt$MainActivity$( AddMediaDialogFragment.RESP_PHOTO_GALLERY, this@MainActivity )</ID>
    <ID>ArgumentListWrapping:MainActivity.kt$MainActivity$( AddMediaDialogFragment.RESP_TAKE_PHOTO, this@MainActivity )</ID>
    <ID>ArgumentListWrapping:MainActivity.kt$MainActivity$( Context.INPUT_METHOD_SERVICE)</ID>
    <ID>ArgumentListWrapping:MainActivity.kt$MainActivity$( Manifest.permission.POST_NOTIFICATIONS)</ID>
    <ID>ArgumentListWrapping:MainActivity.kt$MainActivity$(Context.INPUT_METHOD_SERVICE)</ID>
    <ID>ArgumentListWrapping:MainActivity.kt$MainActivity$(Manifest.permission.POST_NOTIFICATIONS)</ID>
    <ID>ArgumentListWrapping:Media.kt$Media.Companion$( Media::class.java, statuses.joinToString(" OR ") { "status = ?" }, statuses.map { it.id.toString() }.toTypedArray(), null, order, null )</ID>
    <ID>ArgumentListWrapping:MediaAdapter.kt$MediaAdapter$( it, it.getString(R.string.upload_unsuccessful_description), R.string.upload_unsuccessful, R.drawable.ic_error, listOf( AlertHelper.positiveButton(R.string.retry) { _, _ -&gt; media[pos].apply { sStatus = Media.Status.Queued statusMessage = "" save() BroadcastManager.postChange(it, collectionId, id) } UploadService.startUploadService(it) }, AlertHelper.negativeButton(R.string.remove) { _, _ -&gt; deleteItem(pos) }, AlertHelper.neutralButton() ) )</ID>
    <ID>ArgumentListWrapping:MediaViewHolder.kt$MediaViewHolder$( "Binding media item ${media?.id} with status ${media?.sStatus} and progress ${media?.uploadPercentage}")</ID>
    <ID>ArgumentListWrapping:MediaViewHolder.kt$MediaViewHolder$("Binding media item ${media?.id} with status ${media?.sStatus} and progress ${media?.uploadPercentage}")</ID>
    <ID>ArgumentListWrapping:Onboarding23InstructionsActivity.kt$Onboarding23InstructionsActivity$( WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE )</ID>
    <ID>ArgumentListWrapping:Onboarding23InstructionsActivity.kt$Onboarding23InstructionsActivity.&lt;no name provided&gt;$( mBinding.fab.context, R.drawable.ic_arrow_right, )</ID>
    <ID>ArgumentListWrapping:Onboarding23InstructionsActivity.kt$Onboarding23InstructionsActivity.&lt;no name provided&gt;$( mBinding.fab.context, com.esafirm.imagepicker.R.drawable.ef_ic_done_white, )</ID>
    <ID>ArgumentListWrapping:PasscodeEntryScreen.kt$( text = "Enter Your Passcode", style = TextStyle( fontSize = 18.sp, fontWeight = FontWeight.Bold, color = MaterialTheme.colorScheme.onBackground ) )</ID>
    <ID>ArgumentListWrapping:Picker.kt$Picker$( Manifest.permission.READ_MEDIA_IMAGES, Manifest.permission.READ_MEDIA_VIDEO)</ID>
    <ID>ArgumentListWrapping:Picker.kt$Picker$( context, "${context.packageName}.provider", it )</ID>
    <ID>ArgumentListWrapping:ProofModeScreen.kt$( stringResource( R.string.prefs_use_proofmode_description, "https://www.google.com" ), HtmlCompat.FROM_HTML_MODE_COMPACT )</ID>
    <ID>ArgumentListWrapping:ProofModeSettingsActivity.kt$ProofModeSettingsActivity.Fragment$( R.string.pref_key_use_proof_mode)</ID>
    <ID>ArgumentListWrapping:ProofModeSettingsActivity.kt$ProofModeSettingsActivity.Fragment$(R.string.pref_key_use_proof_mode)</ID>
    <ID>ArgumentListWrapping:SaveClient.kt$SaveClient.Companion.&lt;no name provided&gt;$( Result.failure(OrbotException(context.getString(R.string.tor_connection_invalid))))</ID>
    <ID>ArgumentListWrapping:SaveClient.kt$SaveClient.Companion.&lt;no name provided&gt;$( Result.failure(OrbotException(context.getString(R.string.tor_connection_timeout))))</ID>
    <ID>ArgumentListWrapping:SaveClient.kt$SaveClient.Companion.&lt;no name provided&gt;$( Result.failure(e ?: OrbotException(context.getString(R.string.tor_connection_exception))))</ID>
    <ID>ArgumentListWrapping:SaveClient.kt$SaveClient.Companion.&lt;no name provided&gt;$(Result.failure(OrbotException(context.getString(R.string.tor_connection_invalid))))</ID>
    <ID>ArgumentListWrapping:SaveClient.kt$SaveClient.Companion.&lt;no name provided&gt;$(Result.failure(OrbotException(context.getString(R.string.tor_connection_timeout))))</ID>
    <ID>ArgumentListWrapping:SaveClient.kt$SaveClient.Companion.&lt;no name provided&gt;$(Result.failure(e ?: OrbotException(context.getString(R.string.tor_connection_exception))))</ID>
    <ID>ArgumentListWrapping:SettingsScreen.kt$( "light" to "Light", "dark" to "Dark", "system" to "System Default" )</ID>
    <ID>ArgumentListWrapping:SettingsScreen.kt$( key = "about_app", title = { Text("Save by Open Archive") }, summary = { Text("Tap to view about Save App") }, onClick = { // Handle URL intent openUrl(context, "https://open-archive.org/save") })</ID>
    <ID>ArgumentListWrapping:SettingsScreen.kt$( key = "pref_app_passcode", defaultValue = false, title = { Text("Lock app with passcode") }, summary = { Text("6 digit passcode") })</ID>
    <ID>ArgumentListWrapping:SettingsScreen.kt$( key = "pref_media_folders", title = { Text("Media Folders") }, summary = { Text("Add or remove media folders") })</ID>
    <ID>ArgumentListWrapping:SettingsScreen.kt$( key = "pref_media_servers", title = { Text("Media Servers") }, summary = { Text("Add or remove media servers") })</ID>
    <ID>ArgumentListWrapping:SettingsScreen.kt$( key = "privacy_policy", title = { Text("Terms &amp; Privacy Policy") }, summary = { Text("Tap to view our Terms &amp; Privacy Policy") }, onClick = { // Handle URL intent openUrl(context, "https://open-archive.org/privacy") })</ID>
    <ID>ArgumentListWrapping:SettingsScreen.kt$( key = "proof_mode", title = { Text("Proof Mode") })</ID>
    <ID>ArgumentListWrapping:SettingsScreen.kt$( key = "upload_wifi_only", defaultValue = false, title = { Text("Upload over Wi-Fi only") }, summary = { Text("Only upload media when connected to Wi-Fi") })</ID>
    <ID>ArgumentListWrapping:SettingsScreen.kt$( key = "use_tor", defaultValue = false, title = { Text("Use Tor") }, summary = { Text("Enable Tor for encryption") })</ID>
    <ID>ArgumentListWrapping:SmartFragmentStatePagerAdapter.kt$SmartFragmentStatePagerAdapter$( fragmentManager, BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT)</ID>
    <ID>ArgumentListWrapping:SmartFragmentStatePagerAdapter.kt$SmartFragmentStatePagerAdapter$(fragmentManager, BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT)</ID>
    <ID>ArgumentListWrapping:SnowbirdCreateGroupFragment.kt$SnowbirdCreateGroupFragment$( group.key, viewBinding.repoNameTextfield.text.toString() )</ID>
    <ID>ArgumentListWrapping:SnowbirdFileListAdapter.kt$SnowbirdFileListAdapter$( ContextCompat.getDrawable(context, R.drawable.outline_cloud_done_24)?.scaled(40, context))</ID>
    <ID>ArgumentListWrapping:SnowbirdFileListAdapter.kt$SnowbirdFileListAdapter$( ContextCompat.getDrawable(context, R.drawable.outline_cloud_download_24)?.scaled(40, context))</ID>
    <ID>ArgumentListWrapping:SnowbirdFileListAdapter.kt$SnowbirdFileListAdapter$(ContextCompat.getDrawable(context, R.drawable.outline_cloud_done_24)?.scaled(40, context))</ID>
    <ID>ArgumentListWrapping:SnowbirdFileListAdapter.kt$SnowbirdFileListAdapter$(ContextCompat.getDrawable(context, R.drawable.outline_cloud_download_24)?.scaled(40, context))</ID>
    <ID>ArgumentListWrapping:SnowbirdFileListFragment.kt$SnowbirdFileListFragment$( ActivityResultContracts.GetMultipleContents())</ID>
    <ID>ArgumentListWrapping:SnowbirdFileListFragment.kt$SnowbirdFileListFragment$( R.color.colorPrimary, R.color.colorPrimaryDark )</ID>
    <ID>ArgumentListWrapping:SnowbirdFileListFragment.kt$SnowbirdFileListFragment$( requireContext(), title = "Download Media?", message = "Are you sure you want to download this media?", positiveButtonText = "Yes", negativeButtonText = "No")</ID>
    <ID>ArgumentListWrapping:SnowbirdFileListFragment.kt$SnowbirdFileListFragment$( requireContext(), title = "Success", message = "File successfully downloaded")</ID>
    <ID>ArgumentListWrapping:SnowbirdFileListFragment.kt$SnowbirdFileListFragment$(ActivityResultContracts.GetMultipleContents())</ID>
    <ID>ArgumentListWrapping:SnowbirdGroup.kt$SnowbirdGroup.Companion$( SnowbirdGroup::class.java, whereClause, whereArgs.toTypedArray(), null, null, null)</ID>
    <ID>ArgumentListWrapping:SnowbirdGroupListFragment.kt$SnowbirdGroupListFragment$( RESULT_REQUEST_KEY, bundleOf( RESULT_BUNDLE_NAVIGATION_KEY to RESULT_VAL_RAVEN_REPO_LIST_SCREEN, RESULT_BUNDLE_GROUP_KEY to groupKey ) )</ID>
    <ID>ArgumentListWrapping:SnowbirdGroupListFragment.kt$SnowbirdGroupListFragment$( groupKey)</ID>
    <ID>ArgumentListWrapping:SnowbirdGroupListFragment.kt$SnowbirdGroupListFragment$(groupKey)</ID>
    <ID>ArgumentListWrapping:SnowbirdRepo.kt$SnowbirdRepo.Companion$( SnowbirdRepo::class.java, whereClause, whereArgs.toTypedArray(), null, null, null )</ID>
    <ID>ArgumentListWrapping:SnowbirdRepoListFragment.kt$SnowbirdRepoListFragment$( R.color.colorPrimary, R.color.colorPrimaryDark )</ID>
    <ID>ArgumentListWrapping:SnowbirdRepoListFragment.kt$SnowbirdRepoListFragment$( object : MenuProvider { override fun onCreateMenu(menu: Menu, menuInflater: MenuInflater) { menuInflater.inflate(R.menu.menu_snowbird, menu) } override fun onMenuItemSelected(menuItem: MenuItem): Boolean { return when (menuItem.itemId) { R.id.action_add -&gt; { Utility.showMaterialWarning( context = requireContext(), message = "Feature not implemented yet.", positiveButtonText = "OK" ) true } else -&gt; false } } }, viewLifecycleOwner, Lifecycle.State.RESUMED )</ID>
    <ID>ArgumentListWrapping:Space.kt$Space.Companion$( Space::class.java, whereClause, whereArgs.toTypedArray(), null, null, null )</ID>
    <ID>ArgumentListWrapping:SpaceAdapter.kt$SpaceAdapter$( DIFF_CALLBACK)</ID>
    <ID>ArgumentListWrapping:SpaceAdapter.kt$SpaceAdapter$( LayoutInflater.from(parent.context), parent, false )</ID>
    <ID>ArgumentListWrapping:SpaceAdapter.kt$SpaceAdapter$(DIFF_CALLBACK)</ID>
    <ID>ArgumentListWrapping:SpaceDrawerAdapter.kt$SpaceDrawerAdapter$( DIFF_CALLBACK)</ID>
    <ID>ArgumentListWrapping:SpaceDrawerAdapter.kt$SpaceDrawerAdapter$(DIFF_CALLBACK)</ID>
    <ID>ArgumentListWrapping:SwipeToDeleteCallback.kt$SwipeToDeleteCallback$( ItemTouchHelper.UP or ItemTouchHelper.DOWN, ItemTouchHelper.START)</ID>
    <ID>ArgumentListWrapping:SwipeToDeleteCallback.kt$SwipeToDeleteCallback$(ItemTouchHelper.UP or ItemTouchHelper.DOWN, ItemTouchHelper.START)</ID>
    <ID>ArgumentListWrapping:TextView.kt$( Position.Start.get(drawables), Position.Top.get(drawables), Position.End.get(drawables), Position.Bottom.get(drawables))</ID>
    <ID>ArgumentListWrapping:TorStatusDatabase.kt$TorStatusDatabase$( context, DATABASE_NAME, null, DATABASE_VERSION)</ID>
    <ID>ArgumentListWrapping:TorStatusDatabase.kt$TorStatusDatabase$(context, DATABASE_NAME, null, DATABASE_VERSION)</ID>
    <ID>ArgumentListWrapping:UnixSocketClient.kt$UnixSocketClient$( endpoint, method, body, { json.encodeToString(it) }, { json.decodeFromString&lt;RESPONSE&gt;(it) })</ID>
    <ID>ArgumentListWrapping:UnixSocketClient.kt$UnixSocketClient$( socket, endpoint, method, body, serialize)</ID>
    <ID>ArgumentListWrapping:UnixSocketClient.kt$UnixSocketClient$(endpoint, method, body, { json.encodeToString(it) }, { json.decodeFromString&lt;RESPONSE&gt;(it) })</ID>
    <ID>ArgumentListWrapping:UnixSocketClient.kt$UnixSocketClient$(socket, endpoint, method, body, serialize)</ID>
    <ID>ArgumentListWrapping:UploadService.kt$UploadService$( NOTIFICATION_CHANNEL_ID, getString(R.string.uploads), NotificationManager.IMPORTANCE_LOW )</ID>
    <ID>ArgumentListWrapping:UploadService.kt$UploadService$( this, 0, Intent(this, MainActivity::class.java), PendingIntent.FLAG_IMMUTABLE )</ID>
    <ID>ArgumentListWrapping:WebDavConduit.kt$WebDavConduit$( chunkPath, buffer, mMedia.mimeType, object : SardineListener { override fun transferred(bytes: Long) { jobProgress(offset.toLong() + bytes) } override fun continueUpload(): Boolean { return !mCancelled } })</ID>
    <ID>ArgumentListWrapping:WebDavConduit.kt$WebDavConduit$( construct(base, path, file.name), file, "text/plain", false, null)</ID>
    <ID>ArgumentListWrapping:WebDavConduit.kt$WebDavConduit$( mContext.contentResolver, fullPath, mMedia.fileUri, mMedia.contentLength, mMedia.mimeType, false, object : SardineListener { var lastBytes: Long = 0 override fun transferred(bytes: Long) { if (bytes &gt; lastBytes) { jobProgress(bytes) lastBytes = bytes } AppLogger.i("Bytes transferred for for ${mMedia.id}: ", "$bytes") } override fun continueUpload(): Boolean { AppLogger.i("Should continue upload for ${mMedia.id}?", "$mCancelled") return !mCancelled } })</ID>
    <ID>ArgumentListWrapping:WebDavConduit.kt$WebDavConduit$(mContext.contentResolver, fullPath, mMedia.fileUri, mMedia.contentLength, mMedia.mimeType, false, object : SardineListener { var lastBytes: Long = 0 override fun transferred(bytes: Long) { if (bytes &gt; lastBytes) { jobProgress(bytes) lastBytes = bytes } AppLogger.i("Bytes transferred for for ${mMedia.id}: ", "$bytes") } override fun continueUpload(): Boolean { AppLogger.i("Should continue upload for ${mMedia.id}?", "$mCancelled") return !mCancelled } })</ID>
    <ID>ArgumentListWrapping:WebDavSetupLicenseFragment.kt$WebDavSetupLicenseFragment$( message = getString(R.string.you_have_successfully_connected_to_a_private_server))</ID>
    <ID>ArgumentListWrapping:WebDavSetupLicenseFragment.kt$WebDavSetupLicenseFragment$(message = getString(R.string.you_have_successfully_connected_to_a_private_server))</ID>
    <ID>ChainWrapping:Media.kt$Media$||</ID>
    <ID>ChainWrapping:Picker.kt$Picker$&amp;&amp;</ID>
    <ID>ChainWrapping:PreviewAdapter.kt$PreviewAdapter.Companion.&lt;no name provided&gt;$&amp;&amp;</ID>
    <ID>CommentSpacing:AddFolderActivity.kt$AddFolderActivity$//mBinding = ActivityAddFolderBinding.inflate(layoutInflater)</ID>
    <ID>CommentSpacing:AddFolderActivity.kt$AddFolderActivity$//mBinding.browseFolderContainer.hide()</ID>
    <ID>CommentSpacing:AddFolderActivity.kt$AddFolderActivity$//setContentView(mBinding.root)</ID>
    <ID>CommentSpacing:BadgeDrawable.kt$BadgeDrawable$//NO-OP</ID>
    <ID>CommentSpacing:BaseSnowbirdFragment.kt$BaseSnowbirdFragment$//FullScreenOverlayManager.hide()</ID>
    <ID>CommentSpacing:BaseSnowbirdFragment.kt$BaseSnowbirdFragment$//FullScreenOverlayManager.show(this@BaseSnowbirdFragment)</ID>
    <ID>CommentSpacing:DialogConfigBuilder.kt$DialogBuilder$//?: ButtonData(defaultPositiveTextFor(type)),</ID>
    <ID>CommentSpacing:HomeActivity.kt$HomeActivity$//TODO: Refresh projects in MainViewModel</ID>
    <ID>CommentSpacing:HomeScreen.kt$//@Composable</ID>
    <ID>CommentSpacing:HomeScreen.kt$//fun MainMediaScreen(projectId: Long) {</ID>
    <ID>CommentSpacing:HomeScreen.kt$//}</ID>
    <ID>CommentSpacing:IaConduit.kt$IaConduit$/// Upload ProofMode metadata, if enabled and successfully created.</ID>
    <ID>CommentSpacing:IaConduit.kt$IaConduit$/// headers for meta-data and proof mode</ID>
    <ID>CommentSpacing:IaConduit.kt$IaConduit$/// upload proof mode</ID>
    <ID>CommentSpacing:InternetArchiveActivity.kt$//fun Activity.measureNewBackend(type: Space.Type) {</ID>
    <ID>CommentSpacing:InternetArchiveActivity.kt$//}</ID>
    <ID>CommentSpacing:InternetArchiveDetailsScreen.kt$//InternetArchiveHeader()</ID>
    <ID>CommentSpacing:InternetArchiveDetailsScreen.kt$//dismiss</ID>
    <ID>CommentSpacing:InternetArchiveDetailsScreen.kt$//isRemoving = true</ID>
    <ID>CommentSpacing:InternetArchiveLoginScreen.kt$//focusedIndicatorColor = Color.Transparent,</ID>
    <ID>CommentSpacing:InternetArchiveLoginScreen.kt$//unfocusedIndicatorColor = Color.Transparent,</ID>
    <ID>CommentSpacing:MainActivity.kt$MainActivity$///enableEdgeToEdge()</ID>
    <ID>CommentSpacing:MainActivity.kt$MainActivity$//binding.contentMain.tvSelectedCount.text = if (count &gt; 0) "Selected: $count" else "Select Media"</ID>
    <ID>CommentSpacing:MainMediaFragment.kt$MainMediaFragment$//update selection UI by summing selected counts from all adapters.</ID>
    <ID>CommentSpacing:MediaAdapter.kt$MediaAdapter$//CleanInsightsManager.measureEvent("backend", "upload-error", media[pos].space?.friendlyName)</ID>
    <ID>CommentSpacing:MediaViewHolder.kt$MediaViewHolder.Box$//(binding as RvMediaBoxBinding).fileInfo</ID>
    <ID>CommentSpacing:MediaViewHolder.kt$MediaViewHolder.Box$//(binding as RvMediaBoxBinding).title</ID>
    <ID>CommentSpacing:PasscodeSetupActivity.kt$PasscodeSetupActivity$//onBackPressedCallback.handleOnBackPressed()</ID>
    <ID>CommentSpacing:PasscodeSetupActivity.kt$PasscodeSetupActivity$//onBackPressedDispatcher.addCallback(onBackPressedCallback)</ID>
    <ID>CommentSpacing:PreviewActivity.kt$PreviewActivity$//mBinding.addMenu.container.show(animate = true)</ID>
    <ID>CommentSpacing:SettingsFragment.kt$SettingsFragment$//torViewModel.updateTorServiceState()</ID>
    <ID>CommentSpacing:SnowbirdFileListAdapter.kt$SnowbirdFileListAdapter$//button.setBackgroundResource(R.drawable.button_outlined_ripple)</ID>
    <ID>CommentSpacing:SnowbirdGroupListAdapter.kt$//interface SnowbirdGroupsAdapterListener {</ID>
    <ID>CommentSpacing:SnowbirdGroupListAdapter.kt$//}</ID>
    <ID>CommentSpacing:SnowbirdGroupListAdapter.kt$SnowbirdGroupsAdapter.ViewHolder$//binding.button.setBackgroundResource(R.drawable.button_outlined_ripple)</ID>
    <ID>CommentSpacing:SnowbirdGroupListFragment.kt$SnowbirdGroupListFragment$//findNavController().navigate(SnowbirdGroupListFragmentDirections.navigateToSnowbirdShareScreen(groupKey))</ID>
    <ID>CommentSpacing:SnowbirdRepoListAdapter.kt$SnowbirdRepoListAdapter.SnowbirdRepoListViewHolder$//binding.button.setBackgroundResource(R.drawable.button_outlined_ripple)</ID>
    <ID>CommentSpacing:SnowbirdRepoListFragment.kt$SnowbirdRepoListFragment$//findNavController().navigate(SnowbirdRepoListFragmentDirections.navigateToSnowbirdListFilesScreen(groupKey, repoKey))</ID>
    <ID>CommentSpacing:SpaceAdapter.kt$SpaceAdapter$//@Suppress("NAME_SHADOWING")</ID>
    <ID>CommentSpacing:SpaceAdapter.kt$SpaceAdapter$//spaces.add(Space(ADD_SPACE_ID))</ID>
    <ID>CommentSpacing:SpaceAdapter.kt$SpaceAdapter$//val spaces = spaces.toMutableList()</ID>
    <ID>CommentSpacing:UnixSocketClient.kt$//sealed class ClientResponse&lt;out T&gt; {</ID>
    <ID>CommentSpacing:UnixSocketClient.kt$//}</ID>
    <ID>CommentSpacing:WebDavConduit.kt$WebDavConduit$/// Upload ProofMode metadata, if enabled and successfully created.</ID>
    <ID>CommentSpacing:WebDavFragment.kt$WebDavFragment$//Refresh menu to hide confirm btn again</ID>
    <ID>CommentSpacing:WebDavFragment.kt$WebDavFragment$//attemptLogin()</ID>
    <ID>CommentSpacing:WebDavFragment.kt$WebDavFragment.&lt;no name provided&gt;$//todo: save changes here and show success dialog</ID>
    <ID>CommentWrapping:MainMediaScreen.kt$/* no op */</ID>
    <ID>ComplexCondition:Hbks.kt$Hbks$key == null || cipher == null || ciphertext == null || ciphertext.size &lt; 12</ID>
    <ID>ComposableParamOrder:Accordion.kt$Accordion</ID>
    <ID>ComposableParamOrder:BaseDialog.kt$BaseDialog</ID>
    <ID>ComposableParamOrder:ExpandableSpaceList.kt$ExpandableSpaceList</ID>
    <ID>ComposableParamOrder:FolderOptionsPopup.kt$FolderOptionsPopup</ID>
    <ID>ComposableParamOrder:HomeScreen.kt$HomeScreen</ID>
    <ID>ComposableParamOrder:HomeScreen.kt$SaveNavGraph</ID>
    <ID>ComposableParamOrder:InternetArchiveLoginScreen.kt$CustomSecureField</ID>
    <ID>ComposableParamOrder:InternetArchiveLoginScreen.kt$CustomTextField</ID>
    <ID>ComposableParamOrder:NumericKeypad.kt$NumberButton</ID>
    <ID>ComposableParamOrder:NumericKeypad.kt$NumericKeypad</ID>
    <ID>ComposableParamOrder:PrimaryButton.kt$PrimaryButton</ID>
    <ID>ComposableParamOrder:UiImage.kt$UiImage$asIcon</ID>
    <ID>CompositionLocalAllowlist:Colors.kt$LocalColors</ID>
    <ID>CompositionLocalAllowlist:Dimensions.kt$LocalDimensions</ID>
    <ID>ContentSlotReused:Accordion.kt$bodyContent</ID>
    <ID>CyclomaticComplexMethod:DialogConfigBuilder.kt$DialogBuilder$@Composable fun build(): DialogConfig</ID>
    <ID>CyclomaticComplexMethod:DialogConfigBuilder.kt$DialogBuilder$fun build(resourceProvider: ResourceProvider): DialogConfig</ID>
    <ID>CyclomaticComplexMethod:FileUtils.kt$FileUtils$@SuppressLint("NewAPI", "LogNotTimber") fun getPath(context: Context, uri: Uri): String?</ID>
    <ID>CyclomaticComplexMethod:HomeScreen.kt$@Composable fun HomeScreenContent( onExit: () -&gt; Unit, state: HomeScreenState, onAction: (HomeScreenAction) -&gt; Unit, onNavigateToCache: () -&gt; Unit = {} )</ID>
    <ID>CyclomaticComplexMethod:IaConduit.kt$IaConduit$private fun mainHeader(): Headers</ID>
    <ID>CyclomaticComplexMethod:MainMediaViewHolder.kt$MainMediaViewHolder$fun bind(media: Media? = null, isInSelectionMode: Boolean = false, doImageFade: Boolean = true)</ID>
    <ID>CyclomaticComplexMethod:MediaAdapter.kt$MediaAdapter$override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MediaViewHolder</ID>
    <ID>CyclomaticComplexMethod:MediaViewHolder.kt$MediaViewHolder$@SuppressLint("SetTextI18n") fun bind(media: Media? = null, batchMode: Boolean = false, doImageFade: Boolean = true)</ID>
    <ID>CyclomaticComplexMethod:NumericKeypad.kt$@Composable private fun NumberButton( label: String, enabled: Boolean = true, onClick: () -&gt; Unit, hapticManager: HapticManager = koinInject() )</ID>
    <ID>CyclomaticComplexMethod:PreviewViewHolder.kt$PreviewViewHolder$@SuppressLint("SetTextI18n") fun bind(media: Media? = null, batchMode: Boolean = false, doImageFade: Boolean = true)</ID>
    <ID>CyclomaticComplexMethod:ReviewActivity.kt$ReviewActivity$private fun refresh()</ID>
    <ID>CyclomaticComplexMethod:UnixSocketClientUtilityExtensions.kt$suspend fun UnixSocketClient.readBinaryResponseWithCancellation( inputStream: InputStream, onProgress: ((Long) -&gt; Unit)? = null ): Triple&lt;Int, Map&lt;String, String&gt;, ByteArray&gt;</ID>
    <ID>CyclomaticComplexMethod:WebDavConduit.kt$WebDavConduit$@Throws(IOException::class) private suspend fun uploadChunked(base: HttpUrl, path: List&lt;String&gt;, fileName: String): Boolean</ID>
    <ID>EmptyFunctionBlock:CreateNewFolderFragment.kt$CreateNewFolderFragment.&lt;no name provided&gt;${}</ID>
    <ID>EmptyFunctionBlock:PasscodeEntryViewModel.kt$PasscodeEntryViewModel${ }</ID>
    <ID>EmptyFunctionBlock:ReviewActivity.kt$ReviewActivity.&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:TorStatusDatabase.kt$TorStatusDatabase${ }</ID>
    <ID>EmptyFunctionBlock:WebDavFragment.kt$WebDavFragment.&lt;no name provided&gt;${}</ID>
    <ID>Filename:SnowbirdGroupListAdapter.kt$net.opendasharchive.openarchive.services.snowbird.SnowbirdGroupListAdapter.kt</ID>
    <ID>FinalNewline:ActivityExtension.kt$net.opendasharchive.openarchive.extensions.ActivityExtension.kt</ID>
    <ID>FinalNewline:AddFolderActivity.kt$net.opendasharchive.openarchive.features.folders.AddFolderActivity.kt</ID>
    <ID>FinalNewline:AddFolderScreen.kt$net.opendasharchive.openarchive.features.folders.AddFolderScreen.kt</ID>
    <ID>FinalNewline:AddMediaDialogFragment.kt$net.opendasharchive.openarchive.features.media.AddMediaDialogFragment.kt</ID>
    <ID>FinalNewline:AddMediaType.kt$net.opendasharchive.openarchive.features.media.AddMediaType.kt</ID>
    <ID>FinalNewline:AlertHelper.kt$net.opendasharchive.openarchive.util.AlertHelper.kt</ID>
    <ID>FinalNewline:ApiError.kt$net.opendasharchive.openarchive.db.ApiError.kt</ID>
    <ID>FinalNewline:ApiResponse.kt$net.opendasharchive.openarchive.services.snowbird.service.ApiResponse.kt</ID>
    <ID>FinalNewline:AppConfig.kt$net.opendasharchive.openarchive.features.settings.passcode.AppConfig.kt</ID>
    <ID>FinalNewline:AppLogger.kt$net.opendasharchive.openarchive.core.logger.AppLogger.kt</ID>
    <ID>FinalNewline:ApplicationExtensions.kt$net.opendasharchive.openarchive.extensions.ApplicationExtensions.kt</ID>
    <ID>FinalNewline:BackoffStrategy.kt$net.opendasharchive.openarchive.services.snowbird.service.BackoffStrategy.kt</ID>
    <ID>FinalNewline:BadgeDrawable.kt$net.opendasharchive.openarchive.util.BadgeDrawable.kt</ID>
    <ID>FinalNewline:BaseActivity.kt$net.opendasharchive.openarchive.features.core.BaseActivity.kt</ID>
    <ID>FinalNewline:BaseButton.kt$net.opendasharchive.openarchive.features.core.BaseButton.kt</ID>
    <ID>FinalNewline:BaseComposeActivity.kt$net.opendasharchive.openarchive.features.core.BaseComposeActivity.kt</ID>
    <ID>FinalNewline:BaseDialog.kt$net.opendasharchive.openarchive.features.core.dialog.BaseDialog.kt</ID>
    <ID>FinalNewline:BaseFragment.kt$net.opendasharchive.openarchive.features.core.BaseFragment.kt</ID>
    <ID>FinalNewline:BaseSnowbirdFragment.kt$net.opendasharchive.openarchive.services.snowbird.BaseSnowbirdFragment.kt</ID>
    <ID>FinalNewline:BaseViewModel.kt$net.opendasharchive.openarchive.util.BaseViewModel.kt</ID>
    <ID>FinalNewline:BasicAuthInterceptor.kt$net.opendasharchive.openarchive.services.webdav.BasicAuthInterceptor.kt</ID>
    <ID>FinalNewline:BiometricAuthenticator.kt$net.opendasharchive.openarchive.features.settings.passcode.BiometricAuthenticator.kt</ID>
    <ID>FinalNewline:BottomSheetExtensions.kt$net.opendasharchive.openarchive.extensions.BottomSheetExtensions.kt</ID>
    <ID>FinalNewline:BrowseFolderScreen.kt$net.opendasharchive.openarchive.features.folders.BrowseFolderScreen.kt</ID>
    <ID>FinalNewline:BrowseFoldersAdapter.kt$net.opendasharchive.openarchive.features.folders.BrowseFoldersAdapter.kt</ID>
    <ID>FinalNewline:BrowseFoldersFragment.kt$net.opendasharchive.openarchive.features.folders.BrowseFoldersFragment.kt</ID>
    <ID>FinalNewline:BrowseFoldersViewModel.kt$net.opendasharchive.openarchive.features.folders.BrowseFoldersViewModel.kt</ID>
    <ID>FinalNewline:Collection.kt$net.opendasharchive.openarchive.db.Collection.kt</ID>
    <ID>FinalNewline:Colors.kt$net.opendasharchive.openarchive.core.presentation.theme.Colors.kt</ID>
    <ID>FinalNewline:Conduit.kt$net.opendasharchive.openarchive.services.Conduit.kt</ID>
    <ID>FinalNewline:ConsentActivity.kt$net.opendasharchive.openarchive.features.settings.ConsentActivity.kt</ID>
    <ID>FinalNewline:ContentPickerFragment.kt$net.opendasharchive.openarchive.features.media.ContentPickerFragment.kt</ID>
    <ID>FinalNewline:Context.kt$net.opendasharchive.openarchive.util.extensions.Context.kt</ID>
    <ID>FinalNewline:CreativeCommonsLicenseManager.kt$net.opendasharchive.openarchive.features.settings.CreativeCommonsLicenseManager.kt</ID>
    <ID>FinalNewline:CustomBottomNavBar.kt$net.opendasharchive.openarchive.core.presentation.components.CustomBottomNavBar.kt</ID>
    <ID>FinalNewline:CustomButton.kt$net.opendasharchive.openarchive.features.main.ui.CustomButton.kt</ID>
    <ID>FinalNewline:DefaultScaffold.kt$net.opendasharchive.openarchive.features.settings.passcode.components.DefaultScaffold.kt</ID>
    <ID>FinalNewline:DialogConfigBuilder.kt$net.opendasharchive.openarchive.features.core.dialog.DialogConfigBuilder.kt</ID>
    <ID>FinalNewline:Drawable.kt$net.opendasharchive.openarchive.util.extensions.Drawable.kt</ID>
    <ID>FinalNewline:DrawableExtensions.kt$net.opendasharchive.openarchive.extensions.DrawableExtensions.kt</ID>
    <ID>FinalNewline:DrawableUtil.kt$net.opendasharchive.openarchive.util.DrawableUtil.kt</ID>
    <ID>FinalNewline:DriveServiceHelper.kt$net.opendasharchive.openarchive.util.DriveServiceHelper.kt</ID>
    <ID>FinalNewline:DurationExtensions.kt$net.opendasharchive.openarchive.extensions.DurationExtensions.kt</ID>
    <ID>FinalNewline:EditFolderActivity.kt$net.opendasharchive.openarchive.features.settings.EditFolderActivity.kt</ID>
    <ID>FinalNewline:Effects.kt$net.opendasharchive.openarchive.core.state.Effects.kt</ID>
    <ID>FinalNewline:EmptyableRecyclerView.kt$net.opendasharchive.openarchive.features.main.ui.EmptyableRecyclerView.kt</ID>
    <ID>FinalNewline:ExpandableSpaceList.kt$net.opendasharchive.openarchive.features.main.ui.components.ExpandableSpaceList.kt</ID>
    <ID>FinalNewline:FeaturesModule.kt$net.opendasharchive.openarchive.core.di.FeaturesModule.kt</ID>
    <ID>FinalNewline:FileUploadResult.kt$net.opendasharchive.openarchive.db.FileUploadResult.kt</ID>
    <ID>FinalNewline:FileUtils.kt$net.opendasharchive.openarchive.util.FileUtils.kt</ID>
    <ID>FinalNewline:FolderAdapter.kt$net.opendasharchive.openarchive.FolderAdapter.kt</ID>
    <ID>FinalNewline:FolderDrawerAdapter.kt$net.opendasharchive.openarchive.features.main.adapters.FolderDrawerAdapter.kt</ID>
    <ID>FinalNewline:FolderOptionsPopup.kt$net.opendasharchive.openarchive.features.main.ui.components.FolderOptionsPopup.kt</ID>
    <ID>FinalNewline:FoldersActivity.kt$net.opendasharchive.openarchive.features.settings.FoldersActivity.kt</ID>
    <ID>FinalNewline:FullscreenDimmingOverlay.kt$net.opendasharchive.openarchive.util.FullscreenDimmingOverlay.kt</ID>
    <ID>FinalNewline:FullscreenOverlayManager.kt$net.opendasharchive.openarchive.util.FullscreenOverlayManager.kt</ID>
    <ID>FinalNewline:GDriveActivity.kt$net.opendasharchive.openarchive.services.gdrive.GDriveActivity.kt</ID>
    <ID>FinalNewline:GDriveConduit.kt$net.opendasharchive.openarchive.services.gdrive.GDriveConduit.kt</ID>
    <ID>FinalNewline:GDriveFragment.kt$net.opendasharchive.openarchive.services.gdrive.GDriveFragment.kt</ID>
    <ID>FinalNewline:GeneralSettingsActivity.kt$net.opendasharchive.openarchive.features.settings.GeneralSettingsActivity.kt</ID>
    <ID>FinalNewline:HapticManager.kt$net.opendasharchive.openarchive.features.settings.passcode.HapticManager.kt</ID>
    <ID>FinalNewline:HashingStrategy.kt$net.opendasharchive.openarchive.features.settings.passcode.HashingStrategy.kt</ID>
    <ID>FinalNewline:Hbks.kt$net.opendasharchive.openarchive.util.Hbks.kt</ID>
    <ID>FinalNewline:HomeActivity.kt$net.opendasharchive.openarchive.features.main.HomeActivity.kt</ID>
    <ID>FinalNewline:HomeAppBar.kt$net.opendasharchive.openarchive.features.main.ui.components.HomeAppBar.kt</ID>
    <ID>FinalNewline:HomeScreen.kt$net.opendasharchive.openarchive.features.main.ui.HomeScreen.kt</ID>
    <ID>FinalNewline:HttpLikeException.kt$net.opendasharchive.openarchive.services.snowbird.service.HttpLikeException.kt</ID>
    <ID>FinalNewline:ISnowbirdAPI.kt$net.opendasharchive.openarchive.services.snowbird.service.ISnowbirdAPI.kt</ID>
    <ID>FinalNewline:InternetArchiveLocalSource.kt$net.opendasharchive.openarchive.features.internetarchive.infrastructure.datasource.InternetArchiveLocalSource.kt</ID>
    <ID>FinalNewline:InternetArchiveScreen.kt$net.opendasharchive.openarchive.features.internetarchive.presentation.InternetArchiveScreen.kt</ID>
    <ID>FinalNewline:JoinGroupResponse.kt$net.opendasharchive.openarchive.db.JoinGroupResponse.kt</ID>
    <ID>FinalNewline:Listener.kt$net.opendasharchive.openarchive.core.state.Listener.kt</ID>
    <ID>FinalNewline:MainBottomBar.kt$net.opendasharchive.openarchive.features.main.ui.components.MainBottomBar.kt</ID>
    <ID>FinalNewline:MainDrawerContent.kt$net.opendasharchive.openarchive.features.main.ui.components.MainDrawerContent.kt</ID>
    <ID>FinalNewline:MainMediaAdapter.kt$net.opendasharchive.openarchive.features.main.adapters.MainMediaAdapter.kt</ID>
    <ID>FinalNewline:MainMediaAdapterTest.kt$net.opendasharchive.openarchive.MainMediaAdapterTest.kt</ID>
    <ID>FinalNewline:MainMediaScreen.kt$net.opendasharchive.openarchive.features.main.ui.MainMediaScreen.kt</ID>
    <ID>FinalNewline:MainViewModel.kt$net.opendasharchive.openarchive.features.main.MainViewModel.kt</ID>
    <ID>FinalNewline:MediaAdapter.kt$net.opendasharchive.openarchive.db.MediaAdapter.kt</ID>
    <ID>FinalNewline:MediaCacheScreen.kt$net.opendasharchive.openarchive.features.main.ui.MediaCacheScreen.kt</ID>
    <ID>FinalNewline:MediaLaunchers.kt$net.opendasharchive.openarchive.features.media.MediaLaunchers.kt</ID>
    <ID>FinalNewline:Notifier.kt$net.opendasharchive.openarchive.core.state.Notifier.kt</ID>
    <ID>FinalNewline:NumericKeypad.kt$net.opendasharchive.openarchive.features.settings.passcode.components.NumericKeypad.kt</ID>
    <ID>FinalNewline:Onboarding23Activity.kt$net.opendasharchive.openarchive.features.onboarding.Onboarding23Activity.kt</ID>
    <ID>FinalNewline:Onboarding23FragmentStateAdapter.kt$net.opendasharchive.openarchive.features.onboarding.Onboarding23FragmentStateAdapter.kt</ID>
    <ID>FinalNewline:Onboarding23InstructionsActivity.kt$net.opendasharchive.openarchive.features.onboarding.Onboarding23InstructionsActivity.kt</ID>
    <ID>FinalNewline:Onboarding23SlideFragment.kt$net.opendasharchive.openarchive.features.onboarding.Onboarding23SlideFragment.kt</ID>
    <ID>FinalNewline:PBKDF2HashingStrategy.kt$net.opendasharchive.openarchive.features.settings.passcode.PBKDF2HashingStrategy.kt</ID>
    <ID>FinalNewline:PasscodeDots.kt$net.opendasharchive.openarchive.features.settings.passcode.components.PasscodeDots.kt</ID>
    <ID>FinalNewline:PasscodeEntryActivity.kt$net.opendasharchive.openarchive.features.settings.passcode.passcode_entry.PasscodeEntryActivity.kt</ID>
    <ID>FinalNewline:PasscodeEntryScreen.kt$net.opendasharchive.openarchive.features.settings.passcode.passcode_entry.PasscodeEntryScreen.kt</ID>
    <ID>FinalNewline:PasscodeEntryViewModel.kt$net.opendasharchive.openarchive.features.settings.passcode.passcode_entry.PasscodeEntryViewModel.kt</ID>
    <ID>FinalNewline:PasscodeManager.kt$net.opendasharchive.openarchive.features.settings.passcode.PasscodeManager.kt</ID>
    <ID>FinalNewline:PasscodeModule.kt$net.opendasharchive.openarchive.core.di.PasscodeModule.kt</ID>
    <ID>FinalNewline:PasscodeRepository.kt$net.opendasharchive.openarchive.features.settings.passcode.PasscodeRepository.kt</ID>
    <ID>FinalNewline:PasscodeSetupActivity.kt$net.opendasharchive.openarchive.features.settings.passcode.passcode_setup.PasscodeSetupActivity.kt</ID>
    <ID>FinalNewline:PasscodeSetupScreen.kt$net.opendasharchive.openarchive.features.settings.passcode.passcode_setup.PasscodeSetupScreen.kt</ID>
    <ID>FinalNewline:PasscodeSetupViewModel.kt$net.opendasharchive.openarchive.features.settings.passcode.passcode_setup.PasscodeSetupViewModel.kt</ID>
    <ID>FinalNewline:Picker.kt$net.opendasharchive.openarchive.features.media.Picker.kt</ID>
    <ID>FinalNewline:Preview.kt$net.opendasharchive.openarchive.core.presentation.theme.Preview.kt</ID>
    <ID>FinalNewline:PreviewActivity.kt$net.opendasharchive.openarchive.features.media.PreviewActivity.kt</ID>
    <ID>FinalNewline:PreviewAdapter.kt$net.opendasharchive.openarchive.features.media.PreviewAdapter.kt</ID>
    <ID>FinalNewline:PreviewViewHolder.kt$net.opendasharchive.openarchive.features.media.adapter.PreviewViewHolder.kt</ID>
    <ID>FinalNewline:PrimaryButton.kt$net.opendasharchive.openarchive.core.presentation.components.PrimaryButton.kt</ID>
    <ID>FinalNewline:ProcessingTracker.kt$net.opendasharchive.openarchive.util.ProcessingTracker.kt</ID>
    <ID>FinalNewline:Project.kt$net.opendasharchive.openarchive.db.Project.kt</ID>
    <ID>FinalNewline:ProofModeHelper.kt$net.opendasharchive.openarchive.util.ProofModeHelper.kt</ID>
    <ID>FinalNewline:ProofModeScreen.kt$net.opendasharchive.openarchive.features.settings.ProofModeScreen.kt</ID>
    <ID>FinalNewline:QRScannerActivity.kt$net.opendasharchive.openarchive.features.main.QRScannerActivity.kt</ID>
    <ID>FinalNewline:Reducer.kt$net.opendasharchive.openarchive.core.state.Reducer.kt</ID>
    <ID>FinalNewline:RequestListener.kt$net.opendasharchive.openarchive.services.internetarchive.RequestListener.kt</ID>
    <ID>FinalNewline:RequestNameDTO.kt$net.opendasharchive.openarchive.db.RequestNameDTO.kt</ID>
    <ID>FinalNewline:RestEndpointTask.kt$net.opendasharchive.openarchive.features.main.RestEndpointTask.kt</ID>
    <ID>FinalNewline:RetrofitAPI.kt$net.opendasharchive.openarchive.services.snowbird.service.RetrofitAPI.kt</ID>
    <ID>FinalNewline:RetrofitClient.kt$net.opendasharchive.openarchive.services.snowbird.service.RetrofitClient.kt</ID>
    <ID>FinalNewline:RetrofitModule.kt$net.opendasharchive.openarchive.core.di.RetrofitModule.kt</ID>
    <ID>FinalNewline:RetryConfig.kt$net.opendasharchive.openarchive.services.snowbird.service.RetryConfig.kt</ID>
    <ID>FinalNewline:SaveApp.kt$net.opendasharchive.openarchive.SaveApp.kt</ID>
    <ID>FinalNewline:ScryptHashingStrategy.kt$net.opendasharchive.openarchive.features.settings.passcode.ScryptHashingStrategy.kt</ID>
    <ID>FinalNewline:SectionViewHolder.kt$net.opendasharchive.openarchive.features.main.SectionViewHolder.kt</ID>
    <ID>FinalNewline:SerializableMarker.kt$net.opendasharchive.openarchive.db.SerializableMarker.kt</ID>
    <ID>FinalNewline:ServerOptionItem.kt$net.opendasharchive.openarchive.features.spaces.ServerOptionItem.kt</ID>
    <ID>FinalNewline:SettingsFragment.kt$net.opendasharchive.openarchive.features.settings.SettingsFragment.kt</ID>
    <ID>FinalNewline:SettingsScreen.kt$net.opendasharchive.openarchive.features.settings.SettingsScreen.kt</ID>
    <ID>FinalNewline:Shape.kt$net.opendasharchive.openarchive.core.presentation.theme.Shape.kt</ID>
    <ID>FinalNewline:SmartFragmentStatePagerAdapter.kt$net.opendasharchive.openarchive.util.SmartFragmentStatePagerAdapter.kt</ID>
    <ID>FinalNewline:SnowbirdBridge.kt$net.opendasharchive.openarchive.services.snowbird.SnowbirdBridge.kt</ID>
    <ID>FinalNewline:SnowbirdConduit.kt$net.opendasharchive.openarchive.services.snowbird.SnowbirdConduit.kt</ID>
    <ID>FinalNewline:SnowbirdCreateGroupFragment.kt$net.opendasharchive.openarchive.services.snowbird.SnowbirdCreateGroupFragment.kt</ID>
    <ID>FinalNewline:SnowbirdError.kt$net.opendasharchive.openarchive.db.SnowbirdError.kt</ID>
    <ID>FinalNewline:SnowbirdFileListAdapter.kt$net.opendasharchive.openarchive.services.snowbird.SnowbirdFileListAdapter.kt</ID>
    <ID>FinalNewline:SnowbirdFileListFragment.kt$net.opendasharchive.openarchive.services.snowbird.SnowbirdFileListFragment.kt</ID>
    <ID>FinalNewline:SnowbirdFileRepository.kt$net.opendasharchive.openarchive.services.snowbird.SnowbirdFileRepository.kt</ID>
    <ID>FinalNewline:SnowbirdFileViewModel.kt$net.opendasharchive.openarchive.services.snowbird.SnowbirdFileViewModel.kt</ID>
    <ID>FinalNewline:SnowbirdFragment.kt$net.opendasharchive.openarchive.services.snowbird.SnowbirdFragment.kt</ID>
    <ID>FinalNewline:SnowbirdGroup.kt$net.opendasharchive.openarchive.db.SnowbirdGroup.kt</ID>
    <ID>FinalNewline:SnowbirdGroupListAdapter.kt$net.opendasharchive.openarchive.services.snowbird.SnowbirdGroupListAdapter.kt</ID>
    <ID>FinalNewline:SnowbirdGroupListFragment.kt$net.opendasharchive.openarchive.services.snowbird.SnowbirdGroupListFragment.kt</ID>
    <ID>FinalNewline:SnowbirdGroupOverviewFragment.kt$net.opendasharchive.openarchive.services.snowbird.SnowbirdGroupOverviewFragment.kt</ID>
    <ID>FinalNewline:SnowbirdGroupRepository.kt$net.opendasharchive.openarchive.services.snowbird.SnowbirdGroupRepository.kt</ID>
    <ID>FinalNewline:SnowbirdGroupViewModel.kt$net.opendasharchive.openarchive.services.snowbird.SnowbirdGroupViewModel.kt</ID>
    <ID>FinalNewline:SnowbirdJoinGroupFragment.kt$net.opendasharchive.openarchive.services.snowbird.SnowbirdJoinGroupFragment.kt</ID>
    <ID>FinalNewline:SnowbirdRepo.kt$net.opendasharchive.openarchive.db.SnowbirdRepo.kt</ID>
    <ID>FinalNewline:SnowbirdRepoListAdapter.kt$net.opendasharchive.openarchive.services.snowbird.SnowbirdRepoListAdapter.kt</ID>
    <ID>FinalNewline:SnowbirdRepoListFragment.kt$net.opendasharchive.openarchive.services.snowbird.SnowbirdRepoListFragment.kt</ID>
    <ID>FinalNewline:SnowbirdRepoRepository.kt$net.opendasharchive.openarchive.services.snowbird.SnowbirdRepoRepository.kt</ID>
    <ID>FinalNewline:SnowbirdRepoViewModel.kt$net.opendasharchive.openarchive.services.snowbird.SnowbirdRepoViewModel.kt</ID>
    <ID>FinalNewline:SnowbirdResult.kt$net.opendasharchive.openarchive.services.snowbird.SnowbirdResult.kt</ID>
    <ID>FinalNewline:SnowbirdService.kt$net.opendasharchive.openarchive.services.snowbird.service.SnowbirdService.kt</ID>
    <ID>FinalNewline:SnowbirdServiceStatus.kt$net.opendasharchive.openarchive.services.snowbird.SnowbirdServiceStatus.kt</ID>
    <ID>FinalNewline:SnowbirdShareFragment.kt$net.opendasharchive.openarchive.services.snowbird.SnowbirdShareFragment.kt</ID>
    <ID>FinalNewline:Space.kt$net.opendasharchive.openarchive.db.Space.kt</ID>
    <ID>FinalNewline:SpaceAdapter.kt$net.opendasharchive.openarchive.SpaceAdapter.kt</ID>
    <ID>FinalNewline:SpaceDrawerAdapter.kt$net.opendasharchive.openarchive.features.main.adapters.SpaceDrawerAdapter.kt</ID>
    <ID>FinalNewline:SpaceListFragment.kt$net.opendasharchive.openarchive.features.spaces.SpaceListFragment.kt</ID>
    <ID>FinalNewline:SpaceListScreen.kt$net.opendasharchive.openarchive.features.spaces.SpaceListScreen.kt</ID>
    <ID>FinalNewline:SpaceSetupFragment.kt$net.opendasharchive.openarchive.features.settings.SpaceSetupFragment.kt</ID>
    <ID>FinalNewline:SpaceSetupSuccessFragment.kt$net.opendasharchive.openarchive.features.settings.SpaceSetupSuccessFragment.kt</ID>
    <ID>FinalNewline:SpacingItemDecoration.kt$net.opendasharchive.openarchive.util.SpacingItemDecoration.kt</ID>
    <ID>FinalNewline:Stateful.kt$net.opendasharchive.openarchive.core.state.Stateful.kt</ID>
    <ID>FinalNewline:Store.kt$net.opendasharchive.openarchive.core.state.Store.kt</ID>
    <ID>FinalNewline:StringExtensions.kt$net.opendasharchive.openarchive.extensions.StringExtensions.kt</ID>
    <ID>FinalNewline:SuspendableExtensions.kt$net.opendasharchive.openarchive.extensions.SuspendableExtensions.kt</ID>
    <ID>FinalNewline:SwipeToDeleteCallback.kt$net.opendasharchive.openarchive.upload.SwipeToDeleteCallback.kt</ID>
    <ID>FinalNewline:TextView.kt$net.opendasharchive.openarchive.util.extensions.TextView.kt</ID>
    <ID>FinalNewline:ThrowableExceptions.kt$net.opendasharchive.openarchive.extensions.ThrowableExceptions.kt</ID>
    <ID>FinalNewline:ToolbarConfigurable.kt$net.opendasharchive.openarchive.features.core.ToolbarConfigurable.kt</ID>
    <ID>FinalNewline:TorStatusContentProvider.kt$net.opendasharchive.openarchive.provider.TorStatusContentProvider.kt</ID>
    <ID>FinalNewline:TorStatusDatabase.kt$net.opendasharchive.openarchive.provider.TorStatusDatabase.kt</ID>
    <ID>FinalNewline:TwoLetterDrawable.kt$net.opendasharchive.openarchive.util.TwoLetterDrawable.kt</ID>
    <ID>FinalNewline:UiImage.kt$net.opendasharchive.openarchive.features.core.UiImage.kt</ID>
    <ID>FinalNewline:UiText.kt$net.opendasharchive.openarchive.features.core.UiText.kt</ID>
    <ID>FinalNewline:UnitTests.kt$net.opendasharchive.openarchive.UnitTests.kt</ID>
    <ID>FinalNewline:UnixSocketAPI.kt$net.opendasharchive.openarchive.services.snowbird.service.UnixSocketAPI.kt</ID>
    <ID>FinalNewline:UnixSocketClient.kt$net.opendasharchive.openarchive.features.main.UnixSocketClient.kt</ID>
    <ID>FinalNewline:UnixSocketClientFileExtensions.kt$net.opendasharchive.openarchive.features.main.UnixSocketClientFileExtensions.kt</ID>
    <ID>FinalNewline:UnixSocketClientUtilityExtensions.kt$net.opendasharchive.openarchive.features.main.UnixSocketClientUtilityExtensions.kt</ID>
    <ID>FinalNewline:UnixSocketModule.kt$net.opendasharchive.openarchive.core.di.UnixSocketModule.kt</ID>
    <ID>FinalNewline:UploadManagerActivity.kt$net.opendasharchive.openarchive.upload.UploadManagerActivity.kt</ID>
    <ID>FinalNewline:UploadManagerFragment.kt$net.opendasharchive.openarchive.upload.UploadManagerFragment.kt</ID>
    <ID>FinalNewline:UploadService.kt$net.opendasharchive.openarchive.upload.UploadService.kt</ID>
    <ID>FinalNewline:UriExtensions.kt$net.opendasharchive.openarchive.extensions.UriExtensions.kt</ID>
    <ID>FinalNewline:Util.kt$net.opendasharchive.openarchive.services.internetarchive.Util.kt</ID>
    <ID>FinalNewline:Utility.kt$net.opendasharchive.openarchive.util.Utility.kt</ID>
    <ID>FinalNewline:VideoRequestHandler.kt$net.opendasharchive.openarchive.fragments.VideoRequestHandler.kt</ID>
    <ID>FinalNewline:ViewExtension.kt$net.opendasharchive.openarchive.extensions.ViewExtension.kt</ID>
    <ID>FinalNewline:WebDAVModel.kt$net.opendasharchive.openarchive.db.WebDAVModel.kt</ID>
    <ID>FinalNewline:WebDavActivity.kt$net.opendasharchive.openarchive.services.webdav.WebDavActivity.kt</ID>
    <ID>FinalNewline:WebDavConduit.kt$net.opendasharchive.openarchive.services.webdav.WebDavConduit.kt</ID>
    <ID>FinalNewline:WebDavFragment.kt$net.opendasharchive.openarchive.services.webdav.WebDavFragment.kt</ID>
    <ID>FinalNewline:WebDavSetupLicenseFragment.kt$net.opendasharchive.openarchive.services.webdav.WebDavSetupLicenseFragment.kt</ID>
    <ID>ForbiddenComment:FeaturesModule.kt$// TODO: have some registry of feature modules</ID>
    <ID>ForbiddenComment:FullscreenDimmingOverlay.kt$FullScreenCreateGroupDimmingOverlay$// TODO: Cancel the offending event</ID>
    <ID>ForbiddenComment:FullscreenDimmingOverlay.kt$FullScreenDimmingOverlay$// TODO: Cancel the offending event</ID>
    <ID>ForbiddenComment:HomeActivity.kt$HomeActivity$// TODO: Display a dialog or Snackbar explaining why notifications are needed.</ID>
    <ID>ForbiddenComment:HomeActivity.kt$HomeActivity$// TODO: Extract path, query parameters, etc.</ID>
    <ID>ForbiddenComment:HomeActivity.kt$HomeActivity$// TODO: Launch your preview activity or update the UI as needed.</ID>
    <ID>ForbiddenComment:HomeActivity.kt$HomeActivity$// TODO: Refresh projects in MainViewModel</ID>
    <ID>ForbiddenComment:HomeActivity.kt$HomeActivity$// TODO: Return your current project from a ViewModel or other state.</ID>
    <ID>ForbiddenComment:HomeActivity.kt$HomeActivity$// TODO: Update your UI state, refresh fragment content, etc.</ID>
    <ID>ForbiddenComment:HomeActivity.kt$HomeActivity$// TODO: Update your navigation or fragment state to display the selected folder.</ID>
    <ID>ForbiddenComment:InternetArchiveLocalSource.kt$InternetArchiveLocalSource$// TODO: just use a memory cache for demo, will need to store in DB</ID>
    <ID>ForbiddenComment:InternetArchiveLoginUseCase.kt$InternetArchiveLoginUseCase$// TODO: use local data source for database</ID>
    <ID>ForbiddenComment:UploadManagerActivity.kt$UploadManagerActivity.&lt;no name provided&gt;$// // TODO: Record metadata. See iOS implementation.</ID>
    <ID>ForbiddenPublicDataClass:ApiError.kt$ApiError$ClientError : ApiError</ID>
    <ID>ForbiddenPublicDataClass:ApiError.kt$ApiError$HttpError : ApiError</ID>
    <ID>ForbiddenPublicDataClass:ApiError.kt$ApiError$NetworkError : ApiError</ID>
    <ID>ForbiddenPublicDataClass:ApiError.kt$ApiError$ServerError : ApiError</ID>
    <ID>ForbiddenPublicDataClass:ApiError.kt$ApiError$UnexpectedError : ApiError</ID>
    <ID>ForbiddenPublicDataClass:ApiResponse.kt$ApiResponse$ErrorResponse : ApiResponse</ID>
    <ID>ForbiddenPublicDataClass:ApiResponse.kt$ApiResponse$ListResponse&lt;T&gt; : ApiResponse</ID>
    <ID>ForbiddenPublicDataClass:ApiResponse.kt$ApiResponse$SingleResponse&lt;T&gt; : ApiResponse</ID>
    <ID>ForbiddenPublicDataClass:AppConfig.kt$AppConfig</ID>
    <ID>ForbiddenPublicDataClass:BackoffStrategy.kt$BackoffStrategy$Exponential : BackoffStrategy</ID>
    <ID>ForbiddenPublicDataClass:BackoffStrategy.kt$BackoffStrategy$Linear : BackoffStrategy</ID>
    <ID>ForbiddenPublicDataClass:BrowseFoldersViewModel.kt$Folder</ID>
    <ID>ForbiddenPublicDataClass:Collection.kt$Collection : SugarRecord</ID>
    <ID>ForbiddenPublicDataClass:Colors.kt$ColorTheme</ID>
    <ID>ForbiddenPublicDataClass:DialogConfigBuilder.kt$ButtonData</ID>
    <ID>ForbiddenPublicDataClass:DialogConfigBuilder.kt$DialogConfig</ID>
    <ID>ForbiddenPublicDataClass:Dimensions.kt$DimensionsTheme</ID>
    <ID>ForbiddenPublicDataClass:Dimensions.kt$Elevations</ID>
    <ID>ForbiddenPublicDataClass:Dimensions.kt$Icons</ID>
    <ID>ForbiddenPublicDataClass:Dimensions.kt$Spacing</ID>
    <ID>ForbiddenPublicDataClass:FileUploadResult.kt$FileUploadResult : SerializableMarker</ID>
    <ID>ForbiddenPublicDataClass:Hbks.kt$Hbks.Availability$Available : Availability</ID>
    <ID>ForbiddenPublicDataClass:Hbks.kt$Hbks.Availability$Enroll : Availability</ID>
    <ID>ForbiddenPublicDataClass:HomeScreen.kt$HomeScreenAction$AddMediaClicked : HomeScreenAction</ID>
    <ID>ForbiddenPublicDataClass:HomeScreen.kt$HomeScreenAction$UpdateSelectedProject : HomeScreenAction</ID>
    <ID>ForbiddenPublicDataClass:HomeScreen.kt$HomeScreenState</ID>
    <ID>ForbiddenPublicDataClass:InternetArchive.kt$InternetArchive</ID>
    <ID>ForbiddenPublicDataClass:InternetArchive.kt$InternetArchive$Auth</ID>
    <ID>ForbiddenPublicDataClass:InternetArchive.kt$InternetArchive$MetaData</ID>
    <ID>ForbiddenPublicDataClass:InternetArchiveDetailsState.kt$InternetArchiveDetailsState</ID>
    <ID>ForbiddenPublicDataClass:InternetArchiveDetailsViewModel.kt$InternetArchiveDetailsViewModel.Action$Load : Action</ID>
    <ID>ForbiddenPublicDataClass:InternetArchiveDetailsViewModel.kt$InternetArchiveDetailsViewModel.Action$Loaded : Action</ID>
    <ID>ForbiddenPublicDataClass:InternetArchiveLoginRequest.kt$InternetArchiveLoginRequest</ID>
    <ID>ForbiddenPublicDataClass:InternetArchiveLoginResponse.kt$InternetArchiveLoginResponse</ID>
    <ID>ForbiddenPublicDataClass:InternetArchiveLoginResponse.kt$InternetArchiveLoginResponse$S3</ID>
    <ID>ForbiddenPublicDataClass:InternetArchiveLoginResponse.kt$InternetArchiveLoginResponse$Values</ID>
    <ID>ForbiddenPublicDataClass:InternetArchiveLoginState.kt$InternetArchiveLoginAction$LoginError : InternetArchiveLoginAction</ID>
    <ID>ForbiddenPublicDataClass:InternetArchiveLoginState.kt$InternetArchiveLoginAction$LoginSuccess : InternetArchiveLoginAction</ID>
    <ID>ForbiddenPublicDataClass:InternetArchiveLoginState.kt$InternetArchiveLoginAction$UpdatePassword : InternetArchiveLoginAction</ID>
    <ID>ForbiddenPublicDataClass:InternetArchiveLoginState.kt$InternetArchiveLoginAction$UpdateUsername : InternetArchiveLoginAction</ID>
    <ID>ForbiddenPublicDataClass:InternetArchiveLoginState.kt$InternetArchiveLoginState</ID>
    <ID>ForbiddenPublicDataClass:JoinGroupResponse.kt$JoinGroupResponse : SerializableMarker</ID>
    <ID>ForbiddenPublicDataClass:MainMediaScreen.kt$CollectionSection</ID>
    <ID>ForbiddenPublicDataClass:MainViewModel.kt$MainUiState</ID>
    <ID>ForbiddenPublicDataClass:Media.kt$Media : SugarRecord</ID>
    <ID>ForbiddenPublicDataClass:MediaCacheScreen.kt$MediaFile</ID>
    <ID>ForbiddenPublicDataClass:MediaLaunchers.kt$MediaLaunchers</ID>
    <ID>ForbiddenPublicDataClass:PasscodeEntryViewModel.kt$PasscodeEntryScreenAction$OnNumberClick : PasscodeEntryScreenAction</ID>
    <ID>ForbiddenPublicDataClass:PasscodeEntryViewModel.kt$PasscodeEntryScreenState</ID>
    <ID>ForbiddenPublicDataClass:PasscodeEntryViewModel.kt$PasscodeEntryUiEvent$IncorrectPasscode : PasscodeEntryUiEvent</ID>
    <ID>ForbiddenPublicDataClass:PasscodeSetupViewModel.kt$PasscodeSetupUiAction$OnNumberClick : PasscodeSetupUiAction</ID>
    <ID>ForbiddenPublicDataClass:PasscodeSetupViewModel.kt$PasscodeSetupUiState</ID>
    <ID>ForbiddenPublicDataClass:Project.kt$Project : SugarRecord</ID>
    <ID>ForbiddenPublicDataClass:RequestNameDTO.kt$MembershipRequest : SerializableMarker</ID>
    <ID>ForbiddenPublicDataClass:RequestNameDTO.kt$RequestName : SerializableMarker</ID>
    <ID>ForbiddenPublicDataClass:RetryConfig.kt$RetryConfig</ID>
    <ID>ForbiddenPublicDataClass:SectionViewHolder.kt$SectionViewHolder</ID>
    <ID>ForbiddenPublicDataClass:SnowbirdError.kt$SnowbirdError$GeneralError : SnowbirdError</ID>
    <ID>ForbiddenPublicDataClass:SnowbirdError.kt$SnowbirdError$NetworkError : SnowbirdError</ID>
    <ID>ForbiddenPublicDataClass:SnowbirdFileItem.kt$SnowbirdFileItem : SugarRecordSerializableMarker</ID>
    <ID>ForbiddenPublicDataClass:SnowbirdFileItem.kt$SnowbirdFileList : SerializableMarker</ID>
    <ID>ForbiddenPublicDataClass:SnowbirdFileViewModel.kt$SnowbirdFileViewModel.State$DownloadSuccess : State</ID>
    <ID>ForbiddenPublicDataClass:SnowbirdFileViewModel.kt$SnowbirdFileViewModel.State$Error : State</ID>
    <ID>ForbiddenPublicDataClass:SnowbirdFileViewModel.kt$SnowbirdFileViewModel.State$FetchSuccess : State</ID>
    <ID>ForbiddenPublicDataClass:SnowbirdFileViewModel.kt$SnowbirdFileViewModel.State$UploadSuccess : State</ID>
    <ID>ForbiddenPublicDataClass:SnowbirdGroup.kt$SnowbirdGroup : SugarRecordSerializableMarker</ID>
    <ID>ForbiddenPublicDataClass:SnowbirdGroup.kt$SnowbirdGroupList : SerializableMarker</ID>
    <ID>ForbiddenPublicDataClass:SnowbirdGroupViewModel.kt$SnowbirdGroupViewModel.GroupState$Error : GroupState</ID>
    <ID>ForbiddenPublicDataClass:SnowbirdGroupViewModel.kt$SnowbirdGroupViewModel.GroupState$JoinGroupSuccess : GroupState</ID>
    <ID>ForbiddenPublicDataClass:SnowbirdGroupViewModel.kt$SnowbirdGroupViewModel.GroupState$MultiGroupSuccess : GroupState</ID>
    <ID>ForbiddenPublicDataClass:SnowbirdGroupViewModel.kt$SnowbirdGroupViewModel.GroupState$SingleGroupSuccess : GroupState</ID>
    <ID>ForbiddenPublicDataClass:SnowbirdRepo.kt$SnowbirdRepo : SugarRecordSerializableMarker</ID>
    <ID>ForbiddenPublicDataClass:SnowbirdRepo.kt$SnowbirdRepoList : SerializableMarker</ID>
    <ID>ForbiddenPublicDataClass:SnowbirdRepoViewModel.kt$SnowbirdRepoViewModel.RepoState$Error : RepoState</ID>
    <ID>ForbiddenPublicDataClass:SnowbirdRepoViewModel.kt$SnowbirdRepoViewModel.RepoState$MultiRepoSuccess : RepoState</ID>
    <ID>ForbiddenPublicDataClass:SnowbirdRepoViewModel.kt$SnowbirdRepoViewModel.RepoState$RepoFetchSuccess : RepoState</ID>
    <ID>ForbiddenPublicDataClass:SnowbirdRepoViewModel.kt$SnowbirdRepoViewModel.RepoState$SingleRepoSuccess : RepoState</ID>
    <ID>ForbiddenPublicDataClass:SnowbirdResult.kt$SnowbirdResult$Error : SnowbirdResult</ID>
    <ID>ForbiddenPublicDataClass:SnowbirdResult.kt$SnowbirdResult$Success&lt;out T&gt; : SnowbirdResult</ID>
    <ID>ForbiddenPublicDataClass:SnowbirdService.kt$ServiceStatus$Failed : ServiceStatus</ID>
    <ID>ForbiddenPublicDataClass:SnowbirdServiceStatus.kt$SnowbirdServiceStatus$Error : SnowbirdServiceStatus</ID>
    <ID>ForbiddenPublicDataClass:Space.kt$Space : SugarRecord</ID>
    <ID>ForbiddenPublicDataClass:SpaceDrawerAdapter.kt$SpaceDrawerAdapter.SpaceItem$SpaceItemData : SpaceItem</ID>
    <ID>ForbiddenPublicDataClass:SuspendableExtensions.kt$RetryAttempt$Failure : RetryAttempt</ID>
    <ID>ForbiddenPublicDataClass:SuspendableExtensions.kt$RetryAttempt$Retry : RetryAttempt</ID>
    <ID>ForbiddenPublicDataClass:SuspendableExtensions.kt$RetryAttempt$Success&lt;T&gt; : RetryAttemptRetryResult</ID>
    <ID>ForbiddenPublicDataClass:UiImage.kt$UiImage$DrawableResource : UiImage</ID>
    <ID>ForbiddenPublicDataClass:UiImage.kt$UiImage$DynamicVector : UiImage</ID>
    <ID>ForbiddenPublicDataClass:UiText.kt$UiText$DynamicString : UiText</ID>
    <ID>ForbiddenPublicDataClass:UiText.kt$UiText$StringResource : UiText</ID>
    <ID>ForbiddenPublicDataClass:WebDAVModel.kt$BackendCapabilities</ID>
    <ID>ForbiddenPublicDataClass:WebDAVModel.kt$Data</ID>
    <ID>ForbiddenPublicDataClass:WebDAVModel.kt$Meta</ID>
    <ID>ForbiddenPublicDataClass:WebDAVModel.kt$Ocs</ID>
    <ID>ForbiddenPublicDataClass:WebDAVModel.kt$Quota</ID>
    <ID>ForbiddenPublicDataClass:WebDAVModel.kt$WebDAVModel</ID>
    <ID>FunctionNaming:Accordion.kt$@Composable fun Accordion( modifier: Modifier = Modifier, headerModifier: Modifier = Modifier, state: AccordionState = rememberAccordionState(), animate: Boolean = true, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, headerContent: @Composable () -&gt; Unit, bodyContent: @Composable () -&gt; Unit, )</ID>
    <ID>FunctionNaming:AddFolderScreen.kt$@Composable fun AddFolderScreen()</ID>
    <ID>FunctionNaming:AddFolderScreen.kt$@Composable fun AddFolderScreenContent( onCreateFolder: () -&gt; Unit, onBrowseFolders: () -&gt; Unit )</ID>
    <ID>FunctionNaming:AddFolderScreen.kt$@Composable fun FolderOption(iconRes: Int, text: String, onClick: () -&gt; Unit)</ID>
    <ID>FunctionNaming:AddFolderScreen.kt$@Preview @Preview(uiMode = UI_MODE_NIGHT_YES) @Composable private fun AddFolderScreenPreview()</ID>
    <ID>FunctionNaming:BaseButton.kt$@Composable fun BaseButton( text: String, onClick: () -&gt; Unit, modifier: Modifier = Modifier, backgroundColor: Color = MaterialTheme.colorScheme.primary, textColor: Color = MaterialTheme.colorScheme.onPrimary, cornerRadius: Dp = 12.dp, )</ID>
    <ID>FunctionNaming:BaseButton.kt$@Composable fun BaseDestructiveButton( text: String, onClick: () -&gt; Unit, modifier: Modifier = Modifier, borderColor: Color = MaterialTheme.colorScheme.error, textColor: Color = MaterialTheme.colorScheme.error, cornerRadius: Dp = 12.dp, )</ID>
    <ID>FunctionNaming:BaseButton.kt$@Composable fun BaseNeutralButton( text: String, onClick: () -&gt; Unit, modifier: Modifier = Modifier, textColor: Color = MaterialTheme.colorScheme.onPrimary, )</ID>
    <ID>FunctionNaming:BaseButton.kt$@Composable fun ButtonText( text: String, modifier: Modifier = Modifier, fontSize: TextUnit = 16.sp, fontWeight: FontWeight = FontWeight.SemiBold, color: Color = MaterialTheme.colorScheme.onPrimary )</ID>
    <ID>FunctionNaming:BaseButton.kt$@Preview @Preview(uiMode = UI_MODE_NIGHT_YES) @Composable private fun CustomButtonPreview()</ID>
    <ID>FunctionNaming:BaseButton.kt$@Preview @Preview(uiMode = UI_MODE_NIGHT_YES) @Composable private fun CustomDestructiveButtonPreview()</ID>
    <ID>FunctionNaming:BaseButton.kt$@Preview @Preview(uiMode = UI_MODE_NIGHT_YES) @Composable private fun CustomNeutralButtonPreview()</ID>
    <ID>FunctionNaming:BaseDialog.kt$@Composable fun BaseDialog( onDismiss: () -&gt; Unit, icon: UiImage? = null, iconColor: Color? = null, title: String, message: String, hasCheckbox: Boolean = false, onCheckBoxStateChanged: (Boolean) -&gt; Unit = {}, checkBoxHint: String = "Do not show me this again", positiveButton: ButtonData? = null, neutralButton: ButtonData? = null, destructiveButton: ButtonData? = null, backgroundColor: Color = MaterialTheme.colorScheme.surface )</ID>
    <ID>FunctionNaming:BaseDialog.kt$@Composable fun BaseDialogMessage( text: String, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:BaseDialog.kt$@Composable fun BaseDialogTitle( text: String, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:BaseDialog.kt$@Composable fun DialogHost(dialogStateManager: DialogStateManager)</ID>
    <ID>FunctionNaming:BaseDialog.kt$@Preview @Preview(uiMode = UI_MODE_NIGHT_YES) @Composable private fun BaseDialogPreview()</ID>
    <ID>FunctionNaming:BaseDialog.kt$@Preview @Preview(uiMode = UI_MODE_NIGHT_YES) @Composable private fun ErrorDialogPreview()</ID>
    <ID>FunctionNaming:BaseDialog.kt$@Preview @Preview(uiMode = UI_MODE_NIGHT_YES) @Composable private fun WarningDialogPreview()</ID>
    <ID>FunctionNaming:BrowseFolderScreen.kt$@Composable fun BrowseFolderItem( folder: Folder, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:BrowseFolderScreen.kt$@Composable fun BrowseFolderScreen( viewModel: BrowseFoldersViewModel = koinViewModel() )</ID>
    <ID>FunctionNaming:BrowseFolderScreen.kt$@Composable fun BrowseFolderScreenContent( folders: List&lt;Folder&gt; )</ID>
    <ID>FunctionNaming:BrowseFolderScreen.kt$@Preview @Composable private fun BrowseFolderScreenPreview()</ID>
    <ID>FunctionNaming:DefaultScaffold.kt$@Composable fun DefaultScaffold( modifier: Modifier = Modifier, topAppBar: (@Composable () -&gt; Unit)? = null, content: @Composable () -&gt; Unit )</ID>
    <ID>FunctionNaming:ExpandableSpaceList.kt$@Composable fun DrawerSpaceListItem( space: Space, )</ID>
    <ID>FunctionNaming:ExpandableSpaceList.kt$@Composable fun ExpandableSpaceList( serverAccordionState: AccordionState, selectedSpace: Space? = null, spaceList: List&lt;Space&gt; )</ID>
    <ID>FunctionNaming:ExpandableSpaceList.kt$@Composable fun SpaceIcon( type: Space.Type, modifier: Modifier = Modifier, tint: Color? = null )</ID>
    <ID>FunctionNaming:ExpandableSpaceList.kt$@Preview(uiMode = UI_MODE_NIGHT_YES) @Composable private fun ExpandableSpaceListPreview()</ID>
    <ID>FunctionNaming:FolderOptionsPopup.kt$@Composable fun FolderOptionsPopup( expanded: Boolean = false, onDismissRequest: () -&gt; Unit, onRenameFolder: () -&gt; Unit, onSelectMedia: () -&gt; Unit, onRemoveFolder: () -&gt; Unit )</ID>
    <ID>FunctionNaming:FolderOptionsPopup.kt$@Preview @Composable private fun FolderOptionsPopupPreview()</ID>
    <ID>FunctionNaming:HomeAppBar.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun HomeAppBar( openDrawer: () -&gt; Unit, onExit: () -&gt; Unit )</ID>
    <ID>FunctionNaming:HomeScreen.kt$@Composable fun HomeScreen( viewModel: HomeViewModel = koinViewModel(), onExit: () -&gt; Unit, onNewFolder: () -&gt; Unit, onFolderSelected: (Long) -&gt; Unit, onAddMedia: (AddMediaType) -&gt; Unit, onNavigateToCache: () -&gt; Unit )</ID>
    <ID>FunctionNaming:HomeScreen.kt$@Composable fun HomeScreenContent( onExit: () -&gt; Unit, state: HomeScreenState, onAction: (HomeScreenAction) -&gt; Unit, onNavigateToCache: () -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:HomeScreen.kt$@Composable fun SaveNavGraph( context: Context, viewModel: HomeViewModel = koinViewModel(), onExit: () -&gt; Unit, onNewFolder: () -&gt; Unit, onFolderSelected: (Long) -&gt; Unit, onAddMedia: (AddMediaType) -&gt; Unit )</ID>
    <ID>FunctionNaming:HomeScreen.kt$@Preview @Composable private fun MainContentPreview()</ID>
    <ID>FunctionNaming:InternetArchiveDetailsScreen.kt$@Composable @Preview(showBackground = true) @Preview(showBackground = true, uiMode = android.content.res.Configuration.UI_MODE_NIGHT_YES) private fun InternetArchiveScreenPreview()</ID>
    <ID>FunctionNaming:InternetArchiveDetailsScreen.kt$@Composable fun InternetArchiveDetailsScreen(space: Space, onResult: (IAResult) -&gt; Unit)</ID>
    <ID>FunctionNaming:InternetArchiveDetailsScreen.kt$@Composable private fun InternetArchiveDetailsContent( state: InternetArchiveDetailsState, dispatch: Dispatch&lt;Action&gt;, dialogManager: DialogStateManager = koinViewModel() )</ID>
    <ID>FunctionNaming:InternetArchiveHeader.kt$@Composable @Preview(showBackground = true) @Preview(showBackground = true, uiMode = android.content.res.Configuration.UI_MODE_NIGHT_YES) private fun InternetArchiveHeaderPreview()</ID>
    <ID>FunctionNaming:InternetArchiveHeader.kt$@Composable fun InternetArchiveHeader(modifier: Modifier = Modifier, titleSize: TextUnit = 18.sp)</ID>
    <ID>FunctionNaming:InternetArchiveLoginScreen.kt$@Composable @Preview @Preview(showBackground = true, uiMode = android.content.res.Configuration.UI_MODE_NIGHT_YES) private fun InternetArchiveLoginPreview()</ID>
    <ID>FunctionNaming:InternetArchiveLoginScreen.kt$@Composable fun CustomSecureField( modifier: Modifier = Modifier, value: String, onValueChange: (String) -&gt; Unit, label: String, placeholder: String, isError: Boolean = false, isLoading: Boolean = false, keyboardType: KeyboardType, imeAction: ImeAction, )</ID>
    <ID>FunctionNaming:InternetArchiveLoginScreen.kt$@Composable fun CustomTextField( modifier: Modifier = Modifier, value: String, onValueChange: (String) -&gt; Unit, label: String, enabled: Boolean = true, placeholder: String? = null, isError: Boolean = false, isLoading: Boolean = false, keyboardType: KeyboardType = KeyboardType.Text, imeAction: ImeAction = ImeAction.Next, )</ID>
    <ID>FunctionNaming:InternetArchiveLoginScreen.kt$@Composable fun InternetArchiveLoginScreen(space: Space, onResult: (IAResult) -&gt; Unit)</ID>
    <ID>FunctionNaming:InternetArchiveLoginScreen.kt$@Composable private fun InternetArchiveLoginContent( state: InternetArchiveLoginState, dispatch: Dispatch&lt;Action&gt; )</ID>
    <ID>FunctionNaming:InternetArchiveLoginScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun ComposeAppBar( title: String = "Save App", onNavigationAction: () -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:InternetArchiveScreen.kt$@Composable fun InternetArchiveScreen(space: Space, isNewSpace: Boolean, onFinish: (IAResult) -&gt; Unit)</ID>
    <ID>FunctionNaming:MainBottomBar.kt$@Composable fun MainBottomBar( isSettings: Boolean, onMyMediaClick: () -&gt; Unit, onSettingsClick: () -&gt; Unit, onAddMediaClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:MainBottomBar.kt$@Composable fun RowScope.BottomNavMenuItem( selectedIcon: ImageVector, unSelectedIcon: ImageVector, isSelected: Boolean, text: String, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:MainDrawerContent.kt$@Composable fun MainDrawerContent( selectedSpace: Space? = null, spaceList: List&lt;Space&gt; = emptyList() )</ID>
    <ID>FunctionNaming:MainDrawerContent.kt$@Composable fun MainDrawerFolderListItem( project: Project, isSelected: Boolean = false, onSelected: () -&gt; Unit )</ID>
    <ID>FunctionNaming:MainDrawerContent.kt$@Preview @Composable private fun MainDrawerContentPreview()</ID>
    <ID>FunctionNaming:MainMediaScreen.kt$@Composable fun CollectionHeaderView(section: CollectionSection)</ID>
    <ID>FunctionNaming:MainMediaScreen.kt$@Composable fun CollectionSectionView( section: CollectionSection, onMediaClick: (Media) -&gt; Unit, onMediaLongPress: (Media) -&gt; Unit )</ID>
    <ID>FunctionNaming:MainMediaScreen.kt$@Composable fun ErrorIndicator()</ID>
    <ID>FunctionNaming:MainMediaScreen.kt$@Composable fun MainMediaScreen( projectId: Long, )</ID>
    <ID>FunctionNaming:MainMediaScreen.kt$@Composable fun MediaItemView( media: Media, isSelected: Boolean, onClick: () -&gt; Unit, onLongClick: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:MainMediaScreen.kt$@Composable fun UploadProgress(progress: Int)</ID>
    <ID>FunctionNaming:MainMediaScreen.kt$@Composable fun WelcomeMessage()</ID>
    <ID>FunctionNaming:MediaCacheScreen.kt$@Composable fun CacheFileItem(file: MediaFile)</ID>
    <ID>FunctionNaming:MediaCacheScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun MediaCacheScreen(context: Context, onNavigateBack: () -&gt; Unit)</ID>
    <ID>FunctionNaming:NumericKeypad.kt$@Composable fun NumericKeypad( isEnabled: Boolean = true, onNumberClick: (String) -&gt; Unit, onDeleteClick: () -&gt; Unit, onSubmitClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:NumericKeypad.kt$@Composable private fun NumberButton( label: String, enabled: Boolean = true, onClick: () -&gt; Unit, hapticManager: HapticManager = koinInject() )</ID>
    <ID>FunctionNaming:NumericKeypad.kt$@Preview @Composable private fun NumericKeypadPreview()</ID>
    <ID>FunctionNaming:PasscodeDots.kt$@Composable fun PasscodeDots( passcodeLength: Int, currentPasscodeLength: Int, shouldShake: Boolean = false )</ID>
    <ID>FunctionNaming:PasscodeDots.kt$@Preview(uiMode = Configuration.UI_MODE_NIGHT_YES) @Preview @Composable private fun PasswordDotsPreview()</ID>
    <ID>FunctionNaming:PasscodeEntryScreen.kt$@Composable fun PasscodeEntryScreen( onPasscodeSuccess: () -&gt; Unit, onExit: () -&gt; Unit, viewModel: PasscodeEntryViewModel = koinViewModel(), hapticManager: HapticManager = koinInject() )</ID>
    <ID>FunctionNaming:PasscodeEntryScreen.kt$@Composable fun PasscodeEntryScreenContent( state: PasscodeEntryScreenState, onAction: (PasscodeEntryScreenAction) -&gt; Unit, onExit: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:PasscodeEntryScreen.kt$@Preview(uiMode = Configuration.UI_MODE_NIGHT_YES) @Preview @Composable private fun PasscodeEntryScreenPreview()</ID>
    <ID>FunctionNaming:PasscodeSetupScreen.kt$@Composable fun PasscodeSetupScreen( onPasscodeSet: () -&gt; Unit, onCancel: () -&gt; Unit, viewModel: PasscodeSetupViewModel = koinViewModel(), hapticManager: HapticManager = koinInject() )</ID>
    <ID>FunctionNaming:PasscodeSetupScreen.kt$@Composable private fun PasscodeSetupScreenContent( state: PasscodeSetupUiState, onAction: (PasscodeSetupUiAction) -&gt; Unit )</ID>
    <ID>FunctionNaming:PasscodeSetupScreen.kt$@Preview(uiMode = UI_MODE_NIGHT_YES) @Preview @Composable private fun PasscodeSetupScreenPreview()</ID>
    <ID>FunctionNaming:Preview.kt$@Composable fun DefaultBoxPreview( content: @Composable () -&gt; Unit )</ID>
    <ID>FunctionNaming:Preview.kt$@Composable fun DefaultEmptyScaffoldPreview( content: @Composable () -&gt; Unit )</ID>
    <ID>FunctionNaming:Preview.kt$@Composable fun DefaultScaffoldPreview( content: @Composable () -&gt; Unit )</ID>
    <ID>FunctionNaming:PrimaryButton.kt$@Composable fun PrimaryButton( modifier: Modifier = Modifier, icon: ImageVector? = null, text: String, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:PrimaryButton.kt$@Preview @Composable private fun PrimaryButtonPreview()</ID>
    <ID>FunctionNaming:ProofModeScreen.kt$@Composable fun ProofModeScreen( onNavigateBack: () -&gt; Unit )</ID>
    <ID>FunctionNaming:ProofModeScreen.kt$@Composable fun ProofModeScreenContent()</ID>
    <ID>FunctionNaming:ProofModeScreen.kt$@Preview @Composable private fun ProofModeScreenPreview()</ID>
    <ID>FunctionNaming:ServerOptionItem.kt$@Composable fun ServerOptionItem( @DrawableRes iconRes: Int, title: String, subtitle: String, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:ServerOptionItem.kt$@Preview @Composable private fun ServerOptionItemPreview()</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@Composable fun SettingsScreen( onNavigateToCache: () -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@Preview @Composable private fun SettingsScreenPreview()</ID>
    <ID>FunctionNaming:SpaceListScreen.kt$@Composable fun SpaceListItem( space: Space, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:SpaceListScreen.kt$@Composable fun SpaceListScreen( onSpaceClicked: (Space) -&gt; Unit, )</ID>
    <ID>FunctionNaming:SpaceListScreen.kt$@Composable fun SpaceListScreenContent( onSpaceClicked: (Space) -&gt; Unit, spaceList: List&lt;Space&gt; = emptyList() )</ID>
    <ID>FunctionNaming:SpaceListScreen.kt$@Preview(uiMode = UI_MODE_NIGHT_YES) @Composable private fun SpaceListScreenPreview()</ID>
    <ID>FunctionNaming:SpaceSetupScreen.kt$@Composable fun SpaceSetupScreen( onWebDavClick: () -&gt; Unit, isInternetArchiveAllowed: Boolean, onInternetArchiveClick: () -&gt; Unit, isDwebEnabled: Boolean, onDwebClicked: () -&gt; Unit )</ID>
    <ID>FunctionNaming:SpaceSetupScreen.kt$@Preview @Composable private fun SpaceSetupScreenPreview()</ID>
    <ID>FunctionNaming:Theme.kt$@Composable fun SaveAppTheme( content: @Composable () -&gt; Unit )</ID>
    <ID>FunctionNaming:TwoLetterDrawable.kt$TwoLetterDrawable.Companion$fun ReadOnly(context: Context)</ID>
    <ID>FunctionNaming:TwoLetterDrawable.kt$TwoLetterDrawable.Companion$fun ReadWrite(context: Context)</ID>
    <ID>FunctionOnlyReturningConstant:HomeActivity.kt$HomeActivity$private fun getCurrentProject(): Project?</ID>
    <ID>FunctionStartOfBodySpacing:InternetArchiveLocalSource.kt$InternetArchiveLocalSource$fun set(value: InternetArchive)</ID>
    <ID>ImportOrdering:ApplicationExtensions.kt$import android.app.Application import androidx.activity.ComponentActivity import androidx.fragment.app.Fragment import androidx.lifecycle.AndroidViewModel import androidx.lifecycle.ViewModel import org.koin.android.ext.android.getKoin import org.koin.core.parameter.parametersOf import org.koin.androidx.viewmodel.ext.android.viewModel</ID>
    <ID>ImportOrdering:FeaturesModule.kt$import android.app.Application import android.content.Context import net.opendasharchive.openarchive.features.internetarchive.internetArchiveModule import net.opendasharchive.openarchive.features.settings.passcode.AppConfig import net.opendasharchive.openarchive.features.settings.passcode.HapticManager import net.opendasharchive.openarchive.features.settings.passcode.HashingStrategy import net.opendasharchive.openarchive.features.settings.passcode.PBKDF2HashingStrategy import net.opendasharchive.openarchive.features.settings.passcode.passcode_entry.PasscodeEntryViewModel import net.opendasharchive.openarchive.features.settings.passcode.PasscodeRepository import net.opendasharchive.openarchive.features.settings.passcode.passcode_setup.PasscodeSetupViewModel import net.opendasharchive.openarchive.services.snowbird.ISnowbirdFileRepository import net.opendasharchive.openarchive.services.snowbird.ISnowbirdGroupRepository import net.opendasharchive.openarchive.services.snowbird.ISnowbirdRepoRepository import net.opendasharchive.openarchive.services.snowbird.SnowbirdFileRepository import net.opendasharchive.openarchive.services.snowbird.SnowbirdFileViewModel import net.opendasharchive.openarchive.services.snowbird.SnowbirdGroupRepository import net.opendasharchive.openarchive.services.snowbird.SnowbirdGroupViewModel import net.opendasharchive.openarchive.services.snowbird.SnowbirdRepoRepository import net.opendasharchive.openarchive.services.snowbird.SnowbirdRepoViewModel import org.koin.core.module.dsl.viewModel import org.koin.core.qualifier.named import org.koin.dsl.module</ID>
    <ID>ImportOrdering:InternetArchiveDetailsScreen.kt$import androidx.compose.foundation.layout.Arrangement import androidx.compose.foundation.layout.Box import androidx.compose.foundation.layout.Column import androidx.compose.foundation.layout.Row import androidx.compose.foundation.layout.Spacer import androidx.compose.foundation.layout.fillMaxSize import androidx.compose.foundation.layout.fillMaxWidth import androidx.compose.foundation.layout.height import androidx.compose.foundation.layout.padding import androidx.compose.foundation.shape.RoundedCornerShape import androidx.compose.material3.AlertDialog import androidx.compose.material3.Button import androidx.compose.material3.ButtonDefaults import androidx.compose.material3.ExperimentalMaterial3Api import androidx.compose.material3.MaterialTheme import androidx.compose.material3.Text import androidx.compose.material3.TextButton import androidx.compose.runtime.Composable import androidx.compose.runtime.LaunchedEffect import androidx.compose.runtime.collectAsState import androidx.compose.runtime.getValue import androidx.compose.runtime.mutableStateOf import androidx.compose.runtime.remember import androidx.compose.runtime.setValue import androidx.compose.ui.Alignment import androidx.compose.ui.Modifier import androidx.compose.ui.graphics.Color import androidx.compose.ui.res.stringResource import androidx.compose.ui.tooling.preview.Preview import androidx.compose.ui.unit.dp import androidx.compose.ui.unit.sp import net.opendasharchive.openarchive.R import net.opendasharchive.openarchive.core.presentation.theme.SaveAppTheme import net.opendasharchive.openarchive.core.presentation.theme.ThemeColors import net.opendasharchive.openarchive.core.presentation.theme.ThemeDimensions import net.opendasharchive.openarchive.core.state.Dispatch import net.opendasharchive.openarchive.db.Space import net.opendasharchive.openarchive.features.internetarchive.presentation.components.IAResult import net.opendasharchive.openarchive.features.internetarchive.presentation.components.InternetArchiveHeader import net.opendasharchive.openarchive.features.internetarchive.presentation.details.InternetArchiveDetailsViewModel.Action import net.opendasharchive.openarchive.features.internetarchive.presentation.login.CustomTextField import net.opendasharchive.openarchive.core.presentation.theme.DefaultScaffoldPreview import net.opendasharchive.openarchive.features.core.UiImage import net.opendasharchive.openarchive.features.core.UiText import net.opendasharchive.openarchive.features.core.dialog.DialogStateManager import net.opendasharchive.openarchive.features.core.dialog.showDialog import net.opendasharchive.openarchive.features.core.dialog.showSuccessDialog import net.opendasharchive.openarchive.features.core.dialog.showWarningDialog import org.koin.androidx.compose.koinViewModel import org.koin.core.parameter.parametersOf</ID>
    <ID>ImportOrdering:InternetArchiveFragment.kt$import android.os.Bundle import android.view.LayoutInflater import android.view.View import android.view.ViewGroup import androidx.compose.ui.platform.ComposeView import androidx.core.os.bundleOf import androidx.fragment.app.setFragmentResult import androidx.navigation.fragment.findNavController import net.opendasharchive.openarchive.R import net.opendasharchive.openarchive.db.Space import net.opendasharchive.openarchive.features.internetarchive.presentation.components.IAResult import net.opendasharchive.openarchive.features.internetarchive.presentation.components.bundleWithNewSpace import net.opendasharchive.openarchive.features.internetarchive.presentation.components.bundleWithSpaceId import net.opendasharchive.openarchive.features.internetarchive.presentation.components.getSpace import net.opendasharchive.openarchive.features.core.BaseFragment import net.opendasharchive.openarchive.features.core.ToolbarConfigurable</ID>
    <ID>ImportOrdering:SnowbirdFragment.kt$import android.os.Bundle import android.view.LayoutInflater import android.view.View import android.view.ViewGroup import androidx.activity.result.contract.ActivityResultContracts import androidx.core.os.bundleOf import androidx.fragment.app.setFragmentResult import androidx.lifecycle.Lifecycle import androidx.lifecycle.lifecycleScope import androidx.lifecycle.repeatOnLifecycle import androidx.navigation.fragment.findNavController import com.google.zxing.integration.android.IntentIntegrator import kotlinx.coroutines.launch import net.opendasharchive.openarchive.databinding.FragmentSnowbirdBinding import net.opendasharchive.openarchive.db.SnowbirdGroup import net.opendasharchive.openarchive.extensions.getQueryParameter import net.opendasharchive.openarchive.features.main.QRScannerActivity import net.opendasharchive.openarchive.features.core.BaseFragment import net.opendasharchive.openarchive.util.Utility import timber.log.Timber</ID>
    <ID>ImportOrdering:StatefulViewModel.kt$import androidx.lifecycle.ViewModel import androidx.lifecycle.viewModelScope import net.opendasharchive.openarchive.core.state.StateDispatcher import net.opendasharchive.openarchive.core.state.StoreObserver import net.opendasharchive.openarchive.core.state.Stateful import net.opendasharchive.openarchive.core.state.Store</ID>
    <ID>ImportOrdering:VideoRequestHandler.kt$import android.content.Context import android.graphics.Bitmap import com.squareup.picasso.Picasso import android.media.MediaMetadataRetriever import android.net.Uri import com.squareup.picasso.Request import com.squareup.picasso.RequestHandler import java.io.IOException import java.lang.Exception import androidx.core.net.toUri</ID>
    <ID>Indentation:Accordion.kt$ </ID>
    <ID>Indentation:BaseButton.kt$ </ID>
    <ID>Indentation:BaseDialog.kt$ </ID>
    <ID>Indentation:BrowseFoldersFragment.kt$BrowseFoldersFragment$ </ID>
    <ID>Indentation:CleanInsightsManager.kt$CleanInsightsManager.&lt;no name provided&gt;$ </ID>
    <ID>Indentation:EditFolderActivity.kt$EditFolderActivity$ </ID>
    <ID>Indentation:FileUtils.kt$FileUtils$ </ID>
    <ID>Indentation:GDriveActivity.kt$GDriveActivity$ </ID>
    <ID>Indentation:GDriveFragment.kt$GDriveFragment$ </ID>
    <ID>Indentation:Hbks.kt$Hbks.&lt;no name provided&gt;$ </ID>
    <ID>Indentation:HomeScreen.kt$ </ID>
    <ID>Indentation:InternetArchiveActivity.kt$InternetArchiveActivity$ </ID>
    <ID>Indentation:InternetArchiveDetailsViewModel.kt$InternetArchiveDetailsViewModel$ </ID>
    <ID>Indentation:InternetArchiveHeader.kt$ </ID>
    <ID>Indentation:MainMediaAdapter.kt$MediaDiffCallback$ </ID>
    <ID>Indentation:Media.kt$Media$ </ID>
    <ID>Indentation:MediaAdapter.kt$MediaAdapter$ </ID>
    <ID>Indentation:MediaAdapter.kt$MediaDiffCallback$ </ID>
    <ID>Indentation:MediaCacheScreen.kt$ </ID>
    <ID>Indentation:Onboarding23InstructionsActivity.kt$Onboarding23InstructionsActivity.&lt;no name provided&gt;$ </ID>
    <ID>Indentation:PasscodeManager.kt$PasscodeManager$ </ID>
    <ID>Indentation:PasscodeSetupActivity.kt$PasscodeSetupActivity$ </ID>
    <ID>Indentation:Picker.kt$Picker$ </ID>
    <ID>Indentation:PreviewAdapter.kt$PreviewAdapter.Companion.&lt;no name provided&gt;$ </ID>
    <ID>Indentation:Project.kt$Project$ </ID>
    <ID>Indentation:ProofModeScreen.kt$ </ID>
    <ID>Indentation:RequestBodyUtil.kt$RequestBodyUtil$ </ID>
    <ID>Indentation:RequestBodyUtil.kt$RequestBodyUtil.&lt;no name provided&gt;$ </ID>
    <ID>Indentation:SnowbirdFileListFragment.kt$SnowbirdFileListFragment$ </ID>
    <ID>Indentation:SnowbirdFileListFragment.kt$SnowbirdFileListFragment.&lt;no name provided&gt;$ </ID>
    <ID>Indentation:SnowbirdGroupListFragment.kt$SnowbirdGroupListFragment.&lt;no name provided&gt;$ </ID>
    <ID>Indentation:SnowbirdJoinGroupFragment.kt$SnowbirdJoinGroupFragment$ </ID>
    <ID>Indentation:SnowbirdRepoListFragment.kt$SnowbirdRepoListFragment.&lt;no name provided&gt;$ </ID>
    <ID>Indentation:SpaceAdapter.kt$SpaceAdapter$ </ID>
    <ID>Indentation:SpaceListScreen.kt$ </ID>
    <ID>Indentation:TextView.kt$ </ID>
    <ID>Indentation:UnixSocketAPI.kt$UnixSocketAPI$ </ID>
    <ID>Indentation:UriExtensions.kt$ </ID>
    <ID>Indentation:ValidateLoginCredentialsUseCase.kt$ValidateLoginCredentialsUseCase$ </ID>
    <ID>Indentation:WebDavFragment.kt$WebDavFragment$ </ID>
    <ID>LambdaParameterEventTrailing:PrimaryButton.kt$onClick</ID>
    <ID>LambdaParameterInRestartableEffect:HomeScreen.kt$onAction</ID>
    <ID>LambdaParameterInRestartableEffect:InternetArchiveDetailsScreen.kt$onResult</ID>
    <ID>LambdaParameterInRestartableEffect:InternetArchiveLoginScreen.kt$onResult</ID>
    <ID>LambdaParameterInRestartableEffect:PasscodeEntryScreen.kt$onExit</ID>
    <ID>LambdaParameterInRestartableEffect:PasscodeEntryScreen.kt$onPasscodeSuccess</ID>
    <ID>LambdaParameterInRestartableEffect:PasscodeSetupScreen.kt$onCancel</ID>
    <ID>LambdaParameterInRestartableEffect:PasscodeSetupScreen.kt$onPasscodeSet</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Accordion.kt$@Composable fun Accordion( modifier: Modifier = Modifier, headerModifier: Modifier = Modifier, state: AccordionState = rememberAccordionState(), animate: Boolean = true, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, headerContent: @Composable () -&gt; Unit, bodyContent: @Composable () -&gt; Unit, )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Accordion.kt$@Composable fun rememberAccordionGroupState( count: Int, allowMultipleOpen: Boolean = false, ): AccordionGroupState</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Accordion.kt$@Composable fun rememberAccordionState( expanded: Boolean = false, enabled: Boolean = true, clickable: Boolean = true, onExpandedChange: ((Boolean) -&gt; Unit)? = null, )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Accordion.kt$AccordionGroupState</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Accordion.kt$AccordionState</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ActivityExtension.kt$fun Activity.onBackButtonPressed(callback: () -&gt; Boolean)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:AddFolderActivity.kt$AddFolderActivity : BaseActivity</ID>
    <ID>LibraryEntitiesShouldNotBePublic:AddFolderScreen.kt$@Composable fun AddFolderScreen()</ID>
    <ID>LibraryEntitiesShouldNotBePublic:AddFolderScreen.kt$@Composable fun AddFolderScreenContent( onCreateFolder: () -&gt; Unit, onBrowseFolders: () -&gt; Unit )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:AddFolderScreen.kt$@Composable fun FolderOption(iconRes: Int, text: String, onClick: () -&gt; Unit)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:AddMediaDialogFragment.kt$AddMediaDialogFragment : DialogFragment</ID>
    <ID>LibraryEntitiesShouldNotBePublic:AddMediaType.kt$AddMediaType</ID>
    <ID>LibraryEntitiesShouldNotBePublic:AlertHelper.kt$AlertHelper</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ApiError.kt$ApiError : SerializableMarker</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ApiResponse.kt$ApiResponse&lt;out T&gt;</ID>
    <ID>LibraryEntitiesShouldNotBePublic:AppConfig.kt$AppConfig</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ApplicationExtensions.kt$inline fun &lt;reified T : AndroidViewModel&gt; ComponentActivity.androidViewModel(): Lazy&lt;T&gt;</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ApplicationExtensions.kt$inline fun &lt;reified T : AndroidViewModel&gt; Fragment.androidViewModel(): Lazy&lt;T&gt;</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ApplicationExtensions.kt$inline fun &lt;reified T : ViewModel&gt; Application.getViewModel(vararg parameters: Any): T</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BackoffStrategy.kt$BackoffStrategy</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BadgeDrawable.kt$BadgeDrawable : Drawable</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BaseActivity.kt$BaseActivity : AppCompatActivity</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BaseButton.kt$@Composable fun BaseButton( text: String, onClick: () -&gt; Unit, modifier: Modifier = Modifier, backgroundColor: Color = MaterialTheme.colorScheme.primary, textColor: Color = MaterialTheme.colorScheme.onPrimary, cornerRadius: Dp = 12.dp, )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BaseButton.kt$@Composable fun BaseDestructiveButton( text: String, onClick: () -&gt; Unit, modifier: Modifier = Modifier, borderColor: Color = MaterialTheme.colorScheme.error, textColor: Color = MaterialTheme.colorScheme.error, cornerRadius: Dp = 12.dp, )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BaseButton.kt$@Composable fun BaseNeutralButton( text: String, onClick: () -&gt; Unit, modifier: Modifier = Modifier, textColor: Color = MaterialTheme.colorScheme.onPrimary, )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BaseButton.kt$@Composable fun ButtonText( text: String, modifier: Modifier = Modifier, fontSize: TextUnit = 16.sp, fontWeight: FontWeight = FontWeight.SemiBold, color: Color = MaterialTheme.colorScheme.onPrimary )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BaseComposeActivity.kt$BaseComposeActivity : AppCompatActivity</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BaseDialog.kt$@Composable fun BaseDialog( onDismiss: () -&gt; Unit, icon: UiImage? = null, iconColor: Color? = null, title: String, message: String, hasCheckbox: Boolean = false, onCheckBoxStateChanged: (Boolean) -&gt; Unit = {}, checkBoxHint: String = "Do not show me this again", positiveButton: ButtonData? = null, neutralButton: ButtonData? = null, destructiveButton: ButtonData? = null, backgroundColor: Color = MaterialTheme.colorScheme.surface )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BaseDialog.kt$@Composable fun BaseDialogMessage( text: String, modifier: Modifier = Modifier )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BaseDialog.kt$@Composable fun BaseDialogTitle( text: String, modifier: Modifier = Modifier )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BaseDialog.kt$@Composable fun DialogHost(dialogStateManager: DialogStateManager)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BaseDialog.kt$DialogStateManager : ViewModel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BaseFragment.kt$BaseFragment : FragmentToolbarConfigurable</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BaseSnowbirdFragment.kt$BaseSnowbirdFragment : Fragment</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BaseViewModel.kt$BaseViewModel : AndroidViewModel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BasicAuthInterceptor.kt$BasicAuthInterceptor : Interceptor</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BiometricAuthenticator.kt$BiometricAuthenticator</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BottomSheetExtensions.kt$fun Fragment.showBottomSheetDialog( @LayoutRes layout: Int, @IdRes textViewToSet: Int? = null, textToSet: String? = null, fullScreen: Boolean = true, expand: Boolean = true )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BroadcastManager.kt$BroadcastManager$Action</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BrowseFolderScreen.kt$@Composable fun BrowseFolderItem( folder: Folder, onClick: () -&gt; Unit )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BrowseFolderScreen.kt$@Composable fun BrowseFolderScreen( viewModel: BrowseFoldersViewModel = koinViewModel() )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BrowseFolderScreen.kt$@Composable fun BrowseFolderScreenContent( folders: List&lt;Folder&gt; )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BrowseFoldersAdapter.kt$BrowseFoldersAdapter : Adapter</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BrowseFoldersFragment.kt$BrowseFoldersFragment : BaseFragmentMenuProvider</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BrowseFoldersViewModel.kt$BrowseFoldersViewModel : ViewModel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BrowseFoldersViewModel.kt$Folder</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BundleExt.kt$@Deprecated("only for use with fragments and activities") fun Bundle?.getSpace(type: Space.Type): Pair&lt;Space, Boolean&gt;</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BundleExt.kt$@Deprecated("only for use with fragments and activities") fun bundleWithNewSpace()</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BundleExt.kt$@Deprecated("only for use with fragments and activities") fun bundleWithSpaceId(spaceId: Long)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:BundleExt.kt$IAResult</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ClientResult.kt$suspend fun &lt;T&gt; OkHttpClient.enqueueResult( request: Request, onResume: (Response) -&gt; T )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Collection.kt$Collection : SugarRecord</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Colors.kt$ColorTheme</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Conduit.kt$Conduit</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ConsentActivity.kt$ConsentActivity : BaseActivity</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ContentPickerFragment.kt$ContentPickerFragment : BottomSheetDialogFragment</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Context.kt$fun Context.openBrowser(link: String)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:CreateNewFolderFragment.kt$CreateNewFolderFragment : BaseFragment</ID>
    <ID>LibraryEntitiesShouldNotBePublic:CustomBottomNavBar.kt$CustomBottomNavBar : LinearLayout</ID>
    <ID>LibraryEntitiesShouldNotBePublic:CustomButton.kt$CustomButton : FrameLayout</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DefaultScaffold.kt$@Composable fun DefaultScaffold( modifier: Modifier = Modifier, topAppBar: (@Composable () -&gt; Unit)? = null, content: @Composable () -&gt; Unit )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DialogConfigBuilder.kt$@Composable fun DialogStateManager.showDialog(block: DialogBuilder.() -&gt; Unit)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DialogConfigBuilder.kt$@Composable fun DialogStateManager.showSuccessDialog( message: String, title: String = "", // if empty, default title is used onPositive: () -&gt; Unit = {} )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DialogConfigBuilder.kt$ButtonBuilder</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DialogConfigBuilder.kt$ButtonData</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DialogConfigBuilder.kt$DefaultResourceProvider : ResourceProvider</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DialogConfigBuilder.kt$DialogBuilder</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DialogConfigBuilder.kt$DialogConfig</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DialogConfigBuilder.kt$DialogDsl</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DialogConfigBuilder.kt$DialogType</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DialogConfigBuilder.kt$ResourceProvider</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DialogConfigBuilder.kt$fun DialogStateManager.showDestructiveDialog( title: UiText?, message: UiText, icon: UiImage? = null, positiveButtonText: UiText? = null, onDone: () -&gt; Unit = {}, onCancel: () -&gt; Unit = {} )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DialogConfigBuilder.kt$fun DialogStateManager.showDialog( resourceProvider: ResourceProvider = this.requireResourceProvider(), block: DialogBuilder.() -&gt; Unit )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DialogConfigBuilder.kt$fun DialogStateManager.showErrorDialog( message: String, title: String = "", onRetry: () -&gt; Unit = {}, onCancel: () -&gt; Unit = {} )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DialogConfigBuilder.kt$fun DialogStateManager.showInfoDialog( message: UiText, title: UiText?, icon: UiImage? = null, onDone: () -&gt; Unit = {}, )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DialogConfigBuilder.kt$fun DialogStateManager.showSuccessDialog( @StringRes title: Int?, @StringRes message: Int, @StringRes positiveButtonText: Int? = null, icon: UiImage? = null, onDone: () -&gt; Unit = {}, )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DialogConfigBuilder.kt$fun DialogStateManager.showWarningDialog( title: UiText?, message: UiText, icon: UiImage? = null, positiveButtonText: UiText? = null, onDone: () -&gt; Unit = {}, onCancel: () -&gt; Unit = {} )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Dimensions.kt$DimensionsTheme</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Dimensions.kt$Elevations</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Dimensions.kt$Icons</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Dimensions.kt$Spacing</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Dimensions.kt$fun getThemeDimensions(isDarkTheme: Boolean)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Dispatcher.kt$Dispatcher&lt;Action&gt;</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Dispatcher.kt$typealias Dispatch&lt;A&gt; = (A) -&gt; Unit</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Drawable.kt$fun Drawable.clone(): Drawable?</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Drawable.kt$fun Drawable.scaled(biggerSideDipLength: Int, context: Context): Drawable</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Drawable.kt$fun Drawable.scaled(factor: Double, context: Context): Drawable</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Drawable.kt$fun Drawable.scaled(width: Int, height: Int, context: Context): Drawable</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Drawable.kt$fun Drawable.tint(color: Int): Drawable</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DrawableExtensions.kt$fun Drawable.clone(): Drawable?</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DrawableExtensions.kt$fun Drawable.scaled(biggerSideDipLength: Int, context: Context): Drawable</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DrawableExtensions.kt$fun Drawable.scaled(factor: Double, context: Context): Drawable</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DrawableExtensions.kt$fun Drawable.scaled(width: Int, height: Int, context: Context): Drawable</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DrawableExtensions.kt$fun Drawable.tint(color: Int): Drawable</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DurationExtensions.kt$fun Duration.formatToDecimalPlaces(decimals: Int = 1): String</ID>
    <ID>LibraryEntitiesShouldNotBePublic:EditFolderActivity.kt$EditFolderActivity : BaseActivity</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Effects.kt$typealias Effects&lt;T, A&gt; = suspend (T, A) -&gt; Unit</ID>
    <ID>LibraryEntitiesShouldNotBePublic:EmptyableRecyclerView.kt$EmptyableRecyclerView : RecyclerView</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ExpandableSpaceList.kt$@Composable fun DrawerSpaceListItem( space: Space, )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ExpandableSpaceList.kt$@Composable fun ExpandableSpaceList( serverAccordionState: AccordionState, selectedSpace: Space? = null, spaceList: List&lt;Space&gt; )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ExpandableSpaceList.kt$@Composable fun SpaceIcon( type: Space.Type, modifier: Modifier = Modifier, tint: Color? = null )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:FileUploadResult.kt$FileUploadResult : SerializableMarker</ID>
    <ID>LibraryEntitiesShouldNotBePublic:FolderAdapter.kt$FolderAdapter : ListAdapterFolderAdapterListener</ID>
    <ID>LibraryEntitiesShouldNotBePublic:FolderAdapter.kt$FolderAdapterListener</ID>
    <ID>LibraryEntitiesShouldNotBePublic:FolderDrawerAdapter.kt$FolderDrawerAdapter : ListAdapter</ID>
    <ID>LibraryEntitiesShouldNotBePublic:FolderDrawerAdapter.kt$FolderDrawerAdapterListener</ID>
    <ID>LibraryEntitiesShouldNotBePublic:FolderOptionsPopup.kt$@Composable fun FolderOptionsPopup( expanded: Boolean = false, onDismissRequest: () -&gt; Unit, onRenameFolder: () -&gt; Unit, onSelectMedia: () -&gt; Unit, onRemoveFolder: () -&gt; Unit )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:FoldersActivity.kt$FoldersActivity : BaseActivityFolderAdapterListener</ID>
    <ID>LibraryEntitiesShouldNotBePublic:FullscreenDimmingOverlay.kt$FullScreenCreateGroupDimmingOverlay : FrameLayout</ID>
    <ID>LibraryEntitiesShouldNotBePublic:FullscreenDimmingOverlay.kt$FullScreenDimmingOverlay : FrameLayout</ID>
    <ID>LibraryEntitiesShouldNotBePublic:GDriveActivity.kt$GDriveActivity : BaseActivity</ID>
    <ID>LibraryEntitiesShouldNotBePublic:GDriveConduit.kt$GDriveConduit : Conduit</ID>
    <ID>LibraryEntitiesShouldNotBePublic:GDriveFragment.kt$GDriveFragment : BaseFragment</ID>
    <ID>LibraryEntitiesShouldNotBePublic:GeneralSettingsActivity.kt$GeneralSettingsActivity : BaseActivity</ID>
    <ID>LibraryEntitiesShouldNotBePublic:HapticManager.kt$AppHapticFeedbackType</ID>
    <ID>LibraryEntitiesShouldNotBePublic:HapticManager.kt$HapticManager</ID>
    <ID>LibraryEntitiesShouldNotBePublic:HashingStrategy.kt$HashingStrategy</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Hbks.kt$Hbks$Availability</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Hbks.kt$Hbks$BiometryType</ID>
    <ID>LibraryEntitiesShouldNotBePublic:HomeActivity.kt$HomeActivity : FragmentActivity</ID>
    <ID>LibraryEntitiesShouldNotBePublic:HomeAppBar.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun HomeAppBar( openDrawer: () -&gt; Unit, onExit: () -&gt; Unit )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:HomeScreen.kt$@Composable fun HomeScreen( viewModel: HomeViewModel = koinViewModel(), onExit: () -&gt; Unit, onNewFolder: () -&gt; Unit, onFolderSelected: (Long) -&gt; Unit, onAddMedia: (AddMediaType) -&gt; Unit, onNavigateToCache: () -&gt; Unit )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:HomeScreen.kt$@Composable fun HomeScreenContent( onExit: () -&gt; Unit, state: HomeScreenState, onAction: (HomeScreenAction) -&gt; Unit, onNavigateToCache: () -&gt; Unit = {} )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:HomeScreen.kt$@Composable fun SaveNavGraph( context: Context, viewModel: HomeViewModel = koinViewModel(), onExit: () -&gt; Unit, onNewFolder: () -&gt; Unit, onFolderSelected: (Long) -&gt; Unit, onAddMedia: (AddMediaType) -&gt; Unit )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:HomeScreen.kt$HomeScreenAction</ID>
    <ID>LibraryEntitiesShouldNotBePublic:HomeScreen.kt$HomeScreenState</ID>
    <ID>LibraryEntitiesShouldNotBePublic:HomeScreen.kt$HomeViewModel : ViewModel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:HttpLikeException.kt$HttpLikeException : Exception</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ISnowbirdAPI.kt$ISnowbirdAPI</ID>
    <ID>LibraryEntitiesShouldNotBePublic:IaConduit.kt$IaConduit : Conduit</ID>
    <ID>LibraryEntitiesShouldNotBePublic:InternetArchive.kt$InternetArchive</ID>
    <ID>LibraryEntitiesShouldNotBePublic:InternetArchiveActivity.kt$InternetArchiveActivity : AppCompatActivity</ID>
    <ID>LibraryEntitiesShouldNotBePublic:InternetArchiveDetailsScreen.kt$@Composable fun InternetArchiveDetailsScreen(space: Space, onResult: (IAResult) -&gt; Unit)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:InternetArchiveDetailsState.kt$InternetArchiveDetailsState</ID>
    <ID>LibraryEntitiesShouldNotBePublic:InternetArchiveDetailsViewModel.kt$InternetArchiveDetailsViewModel : StatefulViewModel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:InternetArchiveFragment.kt$InternetArchiveFragment : BaseFragmentToolbarConfigurable</ID>
    <ID>LibraryEntitiesShouldNotBePublic:InternetArchiveHeader.kt$@Composable fun InternetArchiveHeader(modifier: Modifier = Modifier, titleSize: TextUnit = 18.sp)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:InternetArchiveLocalSource.kt$InternetArchiveLocalSource</ID>
    <ID>LibraryEntitiesShouldNotBePublic:InternetArchiveLoginRequest.kt$InternetArchiveLoginRequest</ID>
    <ID>LibraryEntitiesShouldNotBePublic:InternetArchiveLoginResponse.kt$InternetArchiveLoginResponse</ID>
    <ID>LibraryEntitiesShouldNotBePublic:InternetArchiveLoginScreen.kt$@Composable fun CustomSecureField( modifier: Modifier = Modifier, value: String, onValueChange: (String) -&gt; Unit, label: String, placeholder: String, isError: Boolean = false, isLoading: Boolean = false, keyboardType: KeyboardType, imeAction: ImeAction, )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:InternetArchiveLoginScreen.kt$@Composable fun CustomTextField( modifier: Modifier = Modifier, value: String, onValueChange: (String) -&gt; Unit, label: String, enabled: Boolean = true, placeholder: String? = null, isError: Boolean = false, isLoading: Boolean = false, keyboardType: KeyboardType = KeyboardType.Text, imeAction: ImeAction = ImeAction.Next, )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:InternetArchiveLoginScreen.kt$@Composable fun InternetArchiveLoginScreen(space: Space, onResult: (IAResult) -&gt; Unit)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:InternetArchiveLoginScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun ComposeAppBar( title: String = "Save App", onNavigationAction: () -&gt; Unit = {} )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:InternetArchiveLoginState.kt$InternetArchiveLoginAction</ID>
    <ID>LibraryEntitiesShouldNotBePublic:InternetArchiveLoginState.kt$InternetArchiveLoginState</ID>
    <ID>LibraryEntitiesShouldNotBePublic:InternetArchiveLoginUseCase.kt$InternetArchiveLoginUseCase</ID>
    <ID>LibraryEntitiesShouldNotBePublic:InternetArchiveLoginViewModel.kt$InternetArchiveLoginViewModel : StatefulViewModelKoinComponent</ID>
    <ID>LibraryEntitiesShouldNotBePublic:InternetArchiveMapper.kt$InternetArchiveMapper</ID>
    <ID>LibraryEntitiesShouldNotBePublic:InternetArchiveRemoteSource.kt$InternetArchiveRemoteSource</ID>
    <ID>LibraryEntitiesShouldNotBePublic:InternetArchiveRepository.kt$InternetArchiveRepository</ID>
    <ID>LibraryEntitiesShouldNotBePublic:InternetArchiveScreen.kt$@Composable fun InternetArchiveScreen(space: Space, isNewSpace: Boolean, onFinish: (IAResult) -&gt; Unit)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:JoinGroupResponse.kt$JoinGroupResponse : SerializableMarker</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Listener.kt$Listener&lt;Action&gt;</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MainActivity.kt$MainActivity : BaseActivitySpaceDrawerAdapterListenerFolderDrawerAdapterListener</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MainBottomBar.kt$@Composable fun MainBottomBar( isSettings: Boolean, onMyMediaClick: () -&gt; Unit, onSettingsClick: () -&gt; Unit, onAddMediaClick: () -&gt; Unit )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MainBottomBar.kt$@Composable fun RowScope.BottomNavMenuItem( selectedIcon: ImageVector, unSelectedIcon: ImageVector, isSelected: Boolean, text: String, onClick: () -&gt; Unit )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MainDrawerContent.kt$@Composable fun MainDrawerContent( selectedSpace: Space? = null, spaceList: List&lt;Space&gt; = emptyList() )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MainDrawerContent.kt$@Composable fun MainDrawerFolderListItem( project: Project, isSelected: Boolean = false, onSelected: () -&gt; Unit )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MainMediaAdapter.kt$MainMediaAdapter : Adapter</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MainMediaAdapterTest.kt$MainMediaAdapterTest</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MainMediaAdapterTest.kt$fun createTestMedia( id: Long, uri: String, status: Media.Status, progress: Int? = 0, selected: Boolean = false, title: String = "Test Media" ): Media</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MainMediaFragment.kt$MainMediaFragment : Fragment</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MainMediaScreen.kt$@Composable fun CollectionHeaderView(section: CollectionSection)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MainMediaScreen.kt$@Composable fun CollectionSectionView( section: CollectionSection, onMediaClick: (Media) -&gt; Unit, onMediaLongPress: (Media) -&gt; Unit )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MainMediaScreen.kt$@Composable fun ErrorIndicator()</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MainMediaScreen.kt$@Composable fun MainMediaScreen( projectId: Long, )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MainMediaScreen.kt$@Composable fun MediaItemView( media: Media, isSelected: Boolean, onClick: () -&gt; Unit, onLongClick: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MainMediaScreen.kt$@Composable fun UploadProgress(progress: Int)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MainMediaScreen.kt$@Composable fun WelcomeMessage()</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MainMediaScreen.kt$CollectionSection</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MainMediaViewHolder.kt$MainMediaViewHolder : ViewHolder</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MainMediaViewModel.kt$MainMediaViewModel : ViewModel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MainViewModel.kt$MainUiState</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MainViewModel.kt$MainViewModel : ViewModel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Media.kt$Media : SugarRecord</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MediaAdapter.kt$MediaAdapter : Adapter</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MediaAdapter.kt$MediaDiffCallback : Callback</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MediaCacheScreen.kt$@Composable fun CacheFileItem(file: MediaFile)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MediaCacheScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun MediaCacheScreen(context: Context, onNavigateBack: () -&gt; Unit)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MediaCacheScreen.kt$FileType</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MediaCacheScreen.kt$MediaFile</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MediaCacheScreen.kt$fun File.toMediaFile(): MediaFile</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MediaLaunchers.kt$MediaLaunchers</ID>
    <ID>LibraryEntitiesShouldNotBePublic:MediaViewHolder.kt$MediaViewHolder : ViewHolder</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Module.kt$typealias InternetArchiveGson = Gson</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Notifier.kt$Notifier&lt;Action&gt;</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Notifier.kt$typealias Notify&lt;A&gt; = suspend (A) -&gt; Unit</ID>
    <ID>LibraryEntitiesShouldNotBePublic:NumericKeypad.kt$@Composable fun NumericKeypad( isEnabled: Boolean = true, onNumberClick: (String) -&gt; Unit, onDeleteClick: () -&gt; Unit, onSubmitClick: () -&gt; Unit )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Onboarding23Activity.kt$Onboarding23Activity : BaseActivity</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Onboarding23FragmentStateAdapter.kt$Onboarding23FragmentStateAdapter : FragmentStateAdapter</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Onboarding23InstructionsActivity.kt$Onboarding23InstructionsActivity : BaseActivity</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Onboarding23SlideFragment.kt$Onboarding23SlideFragment : Fragment</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PBKDF2HashingStrategy.kt$PBKDF2HashingStrategy : HashingStrategy</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PackageManager.kt$fun PackageManager.getVersionName(packageName: String): String</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasscodeDots.kt$@Composable fun PasscodeDots( passcodeLength: Int, currentPasscodeLength: Int, shouldShake: Boolean = false )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasscodeEntryActivity.kt$PasscodeEntryActivity : BaseActivity</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasscodeEntryScreen.kt$@Composable fun PasscodeEntryScreen( onPasscodeSuccess: () -&gt; Unit, onExit: () -&gt; Unit, viewModel: PasscodeEntryViewModel = koinViewModel(), hapticManager: HapticManager = koinInject() )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasscodeEntryScreen.kt$@Composable fun PasscodeEntryScreenContent( state: PasscodeEntryScreenState, onAction: (PasscodeEntryScreenAction) -&gt; Unit, onExit: () -&gt; Unit, )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasscodeEntryViewModel.kt$PasscodeEntryScreenAction</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasscodeEntryViewModel.kt$PasscodeEntryScreenState</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasscodeEntryViewModel.kt$PasscodeEntryUiEvent</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasscodeEntryViewModel.kt$PasscodeEntryViewModel : ViewModel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasscodeManager.kt$PasscodeManager : ActivityLifecycleCallbacks</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasscodeRepository.kt$PasscodeRepository</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasscodeSetupActivity.kt$PasscodeSetupActivity : BaseActivity</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasscodeSetupScreen.kt$@Composable fun PasscodeSetupScreen( onPasscodeSet: () -&gt; Unit, onCancel: () -&gt; Unit, viewModel: PasscodeSetupViewModel = koinViewModel(), hapticManager: HapticManager = koinInject() )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasscodeSetupViewModel.kt$PasscodeSetupUiAction</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasscodeSetupViewModel.kt$PasscodeSetupUiEvent</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasscodeSetupViewModel.kt$PasscodeSetupUiState</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PasscodeSetupViewModel.kt$PasscodeSetupViewModel : ViewModel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Preview.kt$@Composable fun DefaultBoxPreview( content: @Composable () -&gt; Unit )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Preview.kt$@Composable fun DefaultEmptyScaffoldPreview( content: @Composable () -&gt; Unit )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Preview.kt$@Composable fun DefaultScaffoldPreview( content: @Composable () -&gt; Unit )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PreviewActivity.kt$PreviewActivity : BaseActivityOnClickListenerListener</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PreviewAdapter.kt$PreviewAdapter : ListAdapter</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PreviewViewHolder.kt$PreviewViewHolder : ViewHolder</ID>
    <ID>LibraryEntitiesShouldNotBePublic:PrimaryButton.kt$@Composable fun PrimaryButton( modifier: Modifier = Modifier, icon: ImageVector? = null, text: String, onClick: () -&gt; Unit )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ProcessingTracker.kt$ProcessingTracker</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ProcessingTracker.kt$suspend fun &lt;T&gt; ProcessingTracker.trackProcessing( taskName: String = "Unnamed task", block: suspend () -&gt; T ): T</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ProcessingTracker.kt$suspend fun &lt;T&gt; ProcessingTracker.trackProcessingWithTimeout( timeoutMs: Long, taskName: String = "Unnamed task", block: suspend () -&gt; T ): T</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Project.kt$Project : SugarRecord</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ProjectAdapter.kt$ProjectAdapter : FragmentStateAdapter</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ProofModeScreen.kt$@Composable fun ProofModeScreen( onNavigateBack: () -&gt; Unit )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ProofModeScreen.kt$@Composable fun ProofModeScreenContent()</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ProofModeSettingsActivity.kt$ProofModeSettingsActivity : BaseActivity</ID>
    <ID>LibraryEntitiesShouldNotBePublic:QRScannerActivity.kt$QRScannerActivity : CaptureActivity</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Reducer.kt$fun &lt;T, A&gt; MutableStateFlow&lt;T&gt;.apply(action: A, reducer: Reducer&lt;T, A&gt;)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Reducer.kt$typealias Reducer&lt;T, A&gt; = (T, A) -&gt; T</ID>
    <ID>LibraryEntitiesShouldNotBePublic:RequestBodyUtil.kt$fun createListener( cancellable: () -&gt; Boolean, onProgress: (Long) -&gt; Unit = { }, onComplete: () -&gt; Unit = {} )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:RequestListener.kt$RequestListener</ID>
    <ID>LibraryEntitiesShouldNotBePublic:RequestNameDTO.kt$MembershipRequest : SerializableMarker</ID>
    <ID>LibraryEntitiesShouldNotBePublic:RequestNameDTO.kt$RequestName : SerializableMarker</ID>
    <ID>LibraryEntitiesShouldNotBePublic:RestEndpointTask.kt$RestEndpointTask : Runnable</ID>
    <ID>LibraryEntitiesShouldNotBePublic:RetrofitAPI.kt$RetrofitAPI : ISnowbirdAPI</ID>
    <ID>LibraryEntitiesShouldNotBePublic:RetrofitClient.kt$RetrofitClient</ID>
    <ID>LibraryEntitiesShouldNotBePublic:RetryConfig.kt$RetryConfig</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ReviewActivity.kt$ReviewActivity : BaseActivityOnClickListener</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SaveApp.kt$SaveApp : SugarAppFactory</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SaveClient.kt$SaveClient : StrongBuilderBase</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ScryptHashingStrategy.kt$ScryptHashingStrategy : HashingStrategy</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SectionViewHolder.kt$SectionViewHolder</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SerializableMarker.kt$SerializableMarker</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ServerOptionItem.kt$@Composable fun ServerOptionItem( @DrawableRes iconRes: Int, title: String, subtitle: String, onClick: () -&gt; Unit )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SettingsFragment.kt$SettingsFragment : PreferenceFragmentCompat</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SettingsScreen.kt$@Composable fun SettingsScreen( onNavigateToCache: () -&gt; Unit = {} )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SmartFragmentStatePagerAdapter.kt$SmartFragmentStatePagerAdapter : FragmentStatePagerAdapter</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdBridge.kt$SnowbirdBridge</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdConduit.kt$SnowbirdConduit : Conduit</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdCreateGroupFragment.kt$SnowbirdCreateGroupFragment : BaseFragment</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdError.kt$SnowbirdError : SerializableMarker</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdFileItem.kt$SnowbirdFileItem : SugarRecordSerializableMarker</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdFileItem.kt$SnowbirdFileList : SerializableMarker</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdFileListAdapter.kt$SnowbirdFileDiffCallback : ItemCallback</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdFileListAdapter.kt$SnowbirdFileListAdapter : ListAdapter</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdFileListAdapter.kt$SnowbirdFileViewHolder : ViewHolder</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdFileListFragment.kt$SnowbirdFileListFragment : BaseFragment</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdFileRepository.kt$ISnowbirdFileRepository</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdFileRepository.kt$SnowbirdFileRepository : ISnowbirdFileRepository</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdFileViewModel.kt$SnowbirdFileViewModel : BaseViewModel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdFragment.kt$SnowbirdFragment : BaseFragment</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdGroup.kt$SnowbirdGroup : SugarRecordSerializableMarker</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdGroup.kt$SnowbirdGroupList : SerializableMarker</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdGroup.kt$fun SnowbirdGroup.shortHash(): String</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdGroupListAdapter.kt$SnowbirdGroupsAdapter : ListAdapter</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdGroupListFragment.kt$SnowbirdGroupListFragment : BaseFragment</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdGroupOverviewFragment.kt$SnowbirdGroupOverviewFragment : BaseFragment</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdGroupRepository.kt$ISnowbirdGroupRepository</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdGroupRepository.kt$SnowbirdGroupRepository : ISnowbirdGroupRepository</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdGroupViewModel.kt$SnowbirdGroupViewModel : BaseViewModel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdJoinGroupFragment.kt$SnowbirdJoinGroupFragment : BaseFragment</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdRepo.kt$SnowbirdRepo : SugarRecordSerializableMarker</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdRepo.kt$SnowbirdRepoList : SerializableMarker</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdRepo.kt$fun SnowbirdRepo.shortHash(): String</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdRepoListAdapter.kt$SnowbirdRepoListAdapter : ListAdapter</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdRepoListFragment.kt$SnowbirdRepoListFragment : BaseFragment</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdRepoRepository.kt$ISnowbirdRepoRepository</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdRepoRepository.kt$SnowbirdRepoRepository : ISnowbirdRepoRepository</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdRepoViewModel.kt$SnowbirdRepoViewModel : BaseViewModel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdResult.kt$SnowbirdResult&lt;out T&gt;</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdService.kt$ServiceStatus</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdService.kt$SnowbirdService : Service</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdServiceStatus.kt$SnowbirdServiceStatus</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SnowbirdShareFragment.kt$SnowbirdShareFragment : BaseFragment</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Space.kt$Space : SugarRecord</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SpaceAdapter.kt$SpaceAdapter : ListAdapterSpaceAdapterListener</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SpaceAdapter.kt$SpaceAdapterListener</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SpaceAdapter.kt$SpaceItemDecoration : ItemDecoration</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SpaceDrawerAdapter.kt$SpaceDrawerAdapter : ListAdapter</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SpaceDrawerAdapter.kt$SpaceDrawerAdapterListener</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SpaceListFragment.kt$SpaceListFragment : BaseFragment</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SpaceListScreen.kt$@Composable fun SpaceListItem( space: Space, onClick: () -&gt; Unit )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SpaceListScreen.kt$@Composable fun SpaceListScreen( onSpaceClicked: (Space) -&gt; Unit, )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SpaceListScreen.kt$@Composable fun SpaceListScreenContent( onSpaceClicked: (Space) -&gt; Unit, spaceList: List&lt;Space&gt; = emptyList() )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SpaceSetupActivity.kt$SpaceSetupActivity : BaseActivity</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SpaceSetupActivity.kt$StartDestination</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SpaceSetupFragment.kt$SpaceSetupFragment : BaseFragment</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SpaceSetupScreen.kt$@Composable fun SpaceSetupScreen( onWebDavClick: () -&gt; Unit, isInternetArchiveAllowed: Boolean, onInternetArchiveClick: () -&gt; Unit, isDwebEnabled: Boolean, onDwebClicked: () -&gt; Unit )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SpaceSetupSuccessFragment.kt$SpaceSetupSuccessFragment : BaseFragment</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SpacingItemDecoration.kt$SpacingItemDecoration : ItemDecoration</ID>
    <ID>LibraryEntitiesShouldNotBePublic:StateDispatcher.kt$StateDispatcher&lt;T, A&gt; : DispatcherStateful</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Stateful.kt$Stateful&lt;T&gt;</ID>
    <ID>LibraryEntitiesShouldNotBePublic:StatefulViewModel.kt$StatefulViewModel&lt;State, Action&gt; : ViewModelStoreStateful</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Store.kt$Store&lt;Action&gt; : DispatcherListenerNotifier</ID>
    <ID>LibraryEntitiesShouldNotBePublic:StoreObserver.kt$StoreObserver&lt;T&gt; : NotifierListener</ID>
    <ID>LibraryEntitiesShouldNotBePublic:StringExtensions.kt$fun String.asQRCode(size: Int = 512, quietZone: Int = 4): Bitmap</ID>
    <ID>LibraryEntitiesShouldNotBePublic:StringExtensions.kt$fun String.createInputStream(): InputStream?</ID>
    <ID>LibraryEntitiesShouldNotBePublic:StringExtensions.kt$fun String.getQueryParameter(paramName: String): String?</ID>
    <ID>LibraryEntitiesShouldNotBePublic:StringExtensions.kt$fun String.isValidUrl()</ID>
    <ID>LibraryEntitiesShouldNotBePublic:StringExtensions.kt$fun String.uriToPath(): String</ID>
    <ID>LibraryEntitiesShouldNotBePublic:StringExtensions.kt$fun String.urlEncode(): String</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SuspendableExtensions.kt$RetryAttempt&lt;out T&gt;</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SuspendableExtensions.kt$RetryResult&lt;out T&gt;</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SuspendableExtensions.kt$fun &lt;T&gt; (suspend () -&gt; T).retryWithScope( scope: CoroutineScope, config: RetryConfig, shouldRetry: (Throwable) -&gt; Boolean = { true }, onEach: (RetryAttempt&lt;T&gt;) -&gt; Unit ): Job</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SuspendableExtensions.kt$fun &lt;T&gt; (suspend () -&gt; T).withRetry( config: RetryConfig, shouldRetry: (Throwable) -&gt; Boolean = { true } ): Flow&lt;RetryAttempt&lt;T&gt;&gt;</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SuspendableExtensions.kt$fun &lt;T&gt; suspendToRetry(block: suspend () -&gt; T): suspend () -&gt; T</ID>
    <ID>LibraryEntitiesShouldNotBePublic:SwipeToDeleteCallback.kt$SwipeToDeleteCallback : Callback</ID>
    <ID>LibraryEntitiesShouldNotBePublic:TextView.kt$Position</ID>
    <ID>LibraryEntitiesShouldNotBePublic:TextView.kt$fun TextView.scaleAndTintDrawable(position: Position, scale: Double = 1.0, tint: Boolean = true)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:TextView.kt$fun TextView.setCompoundDrawablesRelativeWithIntrinsicBounds(drawables: List&lt;Drawable?&gt;)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:TextView.kt$fun TextView.setDrawable(drawable: Drawable?, position: Position, scale: Double = 1.0, tint: Boolean = true)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:TextView.kt$fun TextView.setDrawable(id: Int, position: Position, scale: Double = 1.0, tint: Boolean = true)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:TextView.kt$fun TextView.styleAsLink()</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Theme.kt$@Composable fun SaveAppTheme( content: @Composable () -&gt; Unit )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Theme.kt$Theme</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ThrowableExceptions.kt$fun Throwable.toSnowbirdError(): SnowbirdError</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ToolbarConfigurable.kt$ToolbarConfigurable</ID>
    <ID>LibraryEntitiesShouldNotBePublic:TorStatusContentProvider.kt$TorStatusContentProvider : ContentProvider</ID>
    <ID>LibraryEntitiesShouldNotBePublic:TorStatusDatabase.kt$TorStatusDatabase : SQLiteOpenHelper</ID>
    <ID>LibraryEntitiesShouldNotBePublic:TwoLetterDrawable.kt$TwoLetterDrawable : Drawable</ID>
    <ID>LibraryEntitiesShouldNotBePublic:UiImage.kt$UiImage</ID>
    <ID>LibraryEntitiesShouldNotBePublic:UiImage.kt$fun @receiver:DrawableRes Int.asUiImage(): UiImage.DrawableResource</ID>
    <ID>LibraryEntitiesShouldNotBePublic:UiImage.kt$fun ImageVector.asUiImage(): UiImage</ID>
    <ID>LibraryEntitiesShouldNotBePublic:UiText.kt$UiText</ID>
    <ID>LibraryEntitiesShouldNotBePublic:UiText.kt$fun @receiver:StringRes Int.asUiText(): UiText</ID>
    <ID>LibraryEntitiesShouldNotBePublic:UiText.kt$fun String.asUiText(): UiText</ID>
    <ID>LibraryEntitiesShouldNotBePublic:UnauthenticatedException.kt$UnauthenticatedException : RuntimeException</ID>
    <ID>LibraryEntitiesShouldNotBePublic:UnitTests.kt$UnitTests</ID>
    <ID>LibraryEntitiesShouldNotBePublic:UnixSocketAPI.kt$UnixSocketAPI : ISnowbirdAPI</ID>
    <ID>LibraryEntitiesShouldNotBePublic:UnixSocketClient.kt$HttpMethod</ID>
    <ID>LibraryEntitiesShouldNotBePublic:UnixSocketClient.kt$UnixSocketClient</ID>
    <ID>LibraryEntitiesShouldNotBePublic:UnixSocketClientFileExtensions.kt$suspend fun UnixSocketClient.downloadFile(endpoint: String): ByteArray</ID>
    <ID>LibraryEntitiesShouldNotBePublic:UnixSocketClientFileExtensions.kt$suspend inline fun &lt;reified RESPONSE : SerializableMarker&gt; UnixSocketClient.uploadFile( endpoint: String, imageData: ByteArray ): RESPONSE</ID>
    <ID>LibraryEntitiesShouldNotBePublic:UnixSocketClientFileExtensions.kt$suspend inline fun &lt;reified RESPONSE : SerializableMarker&gt; UnixSocketClient.uploadFile( endpoint: String, inputStream: InputStream, ): RESPONSE</ID>
    <ID>LibraryEntitiesShouldNotBePublic:UnixSocketClientUtilityExtensions.kt$suspend fun UnixSocketClient.readBinaryResponseWithCancellation( inputStream: InputStream, onProgress: ((Long) -&gt; Unit)? = null ): Triple&lt;Int, Map&lt;String, String&gt;, ByteArray&gt;</ID>
    <ID>LibraryEntitiesShouldNotBePublic:UploadManagerActivity.kt$UploadManagerActivity : BaseActivity</ID>
    <ID>LibraryEntitiesShouldNotBePublic:UploadManagerFragment.kt$UploadManagerFragment : BottomSheetDialogFragment</ID>
    <ID>LibraryEntitiesShouldNotBePublic:UploadService.kt$UploadService : JobService</ID>
    <ID>LibraryEntitiesShouldNotBePublic:UriExtensions.kt$fun Uri.createInputStream(applicationContext: Context): InputStream?</ID>
    <ID>LibraryEntitiesShouldNotBePublic:UriExtensions.kt$fun Uri.getFilename(applicationContext: Context): String?</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Util.kt$Util$RandomString</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ValidateLoginCredentialsUseCase.kt$ValidateLoginCredentialsUseCase</ID>
    <ID>LibraryEntitiesShouldNotBePublic:VideoRequestHandler.kt$VideoRequestHandler : RequestHandler</ID>
    <ID>LibraryEntitiesShouldNotBePublic:View.kt$fun View.cloak(animate: Boolean = false)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:View.kt$fun View.disableAnimation(around: () -&gt; Unit)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:View.kt$fun View.hide(animate: Boolean = false)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:View.kt$fun View.makeSnackBar(message: CharSequence, duration: Int = Snackbar.LENGTH_INDEFINITE): Snackbar</ID>
    <ID>LibraryEntitiesShouldNotBePublic:View.kt$fun View.show(animate: Boolean = false)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:View.kt$fun View.toggle(state: Boolean? = null, animate: Boolean = false)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ViewExtension.kt$fun View.cloak(animate: Boolean = false)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ViewExtension.kt$fun View.disableAnimation(around: () -&gt; Unit)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ViewExtension.kt$fun View.getMeasurments(): Pair&lt;Int, Int&gt;</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ViewExtension.kt$fun View.hide(animate: Boolean = false)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ViewExtension.kt$fun View.makeSnackBar(message: CharSequence, duration: Int = Snackbar.LENGTH_INDEFINITE): Snackbar</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ViewExtension.kt$fun View.propagateClickToParent()</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ViewExtension.kt$fun View.show(animate: Boolean = false)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ViewExtension.kt$fun View.showKeyboard()</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ViewExtension.kt$fun View.toggle(state: Boolean? = null, animate: Boolean = false)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:WebDAVModel.kt$BackendCapabilities</ID>
    <ID>LibraryEntitiesShouldNotBePublic:WebDAVModel.kt$Data</ID>
    <ID>LibraryEntitiesShouldNotBePublic:WebDAVModel.kt$Meta</ID>
    <ID>LibraryEntitiesShouldNotBePublic:WebDAVModel.kt$Ocs</ID>
    <ID>LibraryEntitiesShouldNotBePublic:WebDAVModel.kt$Quota</ID>
    <ID>LibraryEntitiesShouldNotBePublic:WebDAVModel.kt$WebDAVModel</ID>
    <ID>LibraryEntitiesShouldNotBePublic:WebDavActivity.kt$WebDavActivity : BaseActivity</ID>
    <ID>LibraryEntitiesShouldNotBePublic:WebDavConduit.kt$WebDavConduit : Conduit</ID>
    <ID>LibraryEntitiesShouldNotBePublic:WebDavFragment.kt$WebDavFragment : BaseFragment</ID>
    <ID>LibraryEntitiesShouldNotBePublic:WebDavSetupLicenseFragment.kt$WebDavSetupLicenseFragment : BaseFragment</ID>
    <ID>LongMethod:BaseDialog.kt$@Composable fun BaseDialog( onDismiss: () -&gt; Unit, icon: UiImage? = null, iconColor: Color? = null, title: String, message: String, hasCheckbox: Boolean = false, onCheckBoxStateChanged: (Boolean) -&gt; Unit = {}, checkBoxHint: String = "Do not show me this again", positiveButton: ButtonData? = null, neutralButton: ButtonData? = null, destructiveButton: ButtonData? = null, backgroundColor: Color = MaterialTheme.colorScheme.surface )</ID>
    <ID>LongMethod:FileUtils.kt$FileUtils$@SuppressLint("NewAPI", "LogNotTimber") fun getPath(context: Context, uri: Uri): String?</ID>
    <ID>LongMethod:HomeScreen.kt$@Composable fun HomeScreenContent( onExit: () -&gt; Unit, state: HomeScreenState, onAction: (HomeScreenAction) -&gt; Unit, onNavigateToCache: () -&gt; Unit = {} )</ID>
    <ID>LongMethod:InternetArchiveDetailsScreen.kt$@Composable private fun InternetArchiveDetailsContent( state: InternetArchiveDetailsState, dispatch: Dispatch&lt;Action&gt;, dialogManager: DialogStateManager = koinViewModel() )</ID>
    <ID>LongMethod:InternetArchiveLoginScreen.kt$@Composable private fun InternetArchiveLoginContent( state: InternetArchiveLoginState, dispatch: Dispatch&lt;Action&gt; )</ID>
    <ID>LongMethod:MainDrawerContent.kt$@Composable fun MainDrawerContent( selectedSpace: Space? = null, spaceList: List&lt;Space&gt; = emptyList() )</ID>
    <ID>LongMethod:MainMediaViewHolder.kt$MainMediaViewHolder$fun bind(media: Media? = null, isInSelectionMode: Boolean = false, doImageFade: Boolean = true)</ID>
    <ID>LongMethod:MediaAdapter.kt$MediaAdapter$override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MediaViewHolder</ID>
    <ID>LongMethod:MediaViewHolder.kt$MediaViewHolder$@SuppressLint("SetTextI18n") fun bind(media: Media? = null, batchMode: Boolean = false, doImageFade: Boolean = true)</ID>
    <ID>LongMethod:NumericKeypad.kt$@Composable private fun NumberButton( label: String, enabled: Boolean = true, onClick: () -&gt; Unit, hapticManager: HapticManager = koinInject() )</ID>
    <ID>LongMethod:PasscodeSetupScreen.kt$@Composable private fun PasscodeSetupScreenContent( state: PasscodeSetupUiState, onAction: (PasscodeSetupUiAction) -&gt; Unit )</ID>
    <ID>LongMethod:PreviewViewHolder.kt$PreviewViewHolder$@SuppressLint("SetTextI18n") fun bind(media: Media? = null, batchMode: Boolean = false, doImageFade: Boolean = true)</ID>
    <ID>LongMethod:ProofModeScreen.kt$@Composable fun ProofModeScreenContent()</ID>
    <ID>LongMethod:ProofModeSettingsActivity.kt$ProofModeSettingsActivity.Fragment$override fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?)</ID>
    <ID>LongMethod:SettingsFragment.kt$SettingsFragment$override fun onCreatePreferences( savedInstanceState: Bundle?, rootKey: String? )</ID>
    <ID>LongMethod:SettingsScreen.kt$@Composable fun SettingsScreen( onNavigateToCache: () -&gt; Unit = {} )</ID>
    <ID>LongMethod:UnixSocketClientUtilityExtensions.kt$suspend fun UnixSocketClient.readBinaryResponseWithCancellation( inputStream: InputStream, onProgress: ((Long) -&gt; Unit)? = null ): Triple&lt;Int, Map&lt;String, String&gt;, ByteArray&gt;</ID>
    <ID>LongMethod:WebDavConduit.kt$WebDavConduit$@Throws(IOException::class) private suspend fun uploadChunked(base: HttpUrl, path: List&lt;String&gt;, fileName: String): Boolean</ID>
    <ID>LongMethod:WebDavFragment.kt$WebDavFragment$override fun onCreateView( inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle? ): View</ID>
    <ID>LongParameterList:Accordion.kt$( modifier: Modifier = Modifier, headerModifier: Modifier = Modifier, state: AccordionState = rememberAccordionState(), animate: Boolean = true, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, headerContent: @Composable () -&gt; Unit, bodyContent: @Composable () -&gt; Unit, )</ID>
    <ID>LongParameterList:BaseButton.kt$( text: String, onClick: () -&gt; Unit, modifier: Modifier = Modifier, backgroundColor: Color = MaterialTheme.colorScheme.primary, textColor: Color = MaterialTheme.colorScheme.onPrimary, cornerRadius: Dp = 12.dp, )</ID>
    <ID>LongParameterList:BaseButton.kt$( text: String, onClick: () -&gt; Unit, modifier: Modifier = Modifier, borderColor: Color = MaterialTheme.colorScheme.error, textColor: Color = MaterialTheme.colorScheme.error, cornerRadius: Dp = 12.dp, )</ID>
    <ID>LongParameterList:BaseDialog.kt$( onDismiss: () -&gt; Unit, icon: UiImage? = null, iconColor: Color? = null, title: String, message: String, hasCheckbox: Boolean = false, onCheckBoxStateChanged: (Boolean) -&gt; Unit = {}, checkBoxHint: String = "Do not show me this again", positiveButton: ButtonData? = null, neutralButton: ButtonData? = null, destructiveButton: ButtonData? = null, backgroundColor: Color = MaterialTheme.colorScheme.surface )</ID>
    <ID>LongParameterList:DialogConfigBuilder.kt$( title: UiText?, message: UiText, icon: UiImage? = null, positiveButtonText: UiText? = null, onDone: () -&gt; Unit = {}, onCancel: () -&gt; Unit = {} )</ID>
    <ID>LongParameterList:HomeScreen.kt$( context: Context, viewModel: HomeViewModel = koinViewModel(), onExit: () -&gt; Unit, onNewFolder: () -&gt; Unit, onFolderSelected: (Long) -&gt; Unit, onAddMedia: (AddMediaType) -&gt; Unit )</ID>
    <ID>LongParameterList:HomeScreen.kt$( viewModel: HomeViewModel = koinViewModel(), onExit: () -&gt; Unit, onNewFolder: () -&gt; Unit, onFolderSelected: (Long) -&gt; Unit, onAddMedia: (AddMediaType) -&gt; Unit, onNavigateToCache: () -&gt; Unit )</ID>
    <ID>LongParameterList:InternetArchiveLoginScreen.kt$( modifier: Modifier = Modifier, value: String, onValueChange: (String) -&gt; Unit, label: String, enabled: Boolean = true, placeholder: String? = null, isError: Boolean = false, isLoading: Boolean = false, keyboardType: KeyboardType = KeyboardType.Text, imeAction: ImeAction = ImeAction.Next, )</ID>
    <ID>LongParameterList:InternetArchiveLoginScreen.kt$( modifier: Modifier = Modifier, value: String, onValueChange: (String) -&gt; Unit, label: String, placeholder: String, isError: Boolean = false, isLoading: Boolean = false, keyboardType: KeyboardType, imeAction: ImeAction, )</ID>
    <ID>LongParameterList:MainMediaAdapterTest.kt$( id: Long, uri: String, status: Media.Status, progress: Int? = 0, selected: Boolean = false, title: String = "Test Media" )</ID>
    <ID>LongParameterList:Utility.kt$Utility$( context: Context, title: String, message: String? = null, positiveButtonText: String, negativeButtonText: String, completion: (Boolean) -&gt; Unit )</ID>
    <ID>LoopWithTooManyJumpStatements:SuspendableExtensions.kt$while</ID>
    <ID>LoopWithTooManyJumpStatements:UnixSocketClientUtilityExtensions.kt$while</ID>
    <ID>MagicNumber:BadgeDrawable.kt$BadgeDrawable$4</ID>
    <ID>MagicNumber:BadgeDrawable.kt$BadgeDrawable$5f</ID>
    <ID>MagicNumber:Colors.kt$0xff000A0A</ID>
    <ID>MagicNumber:Colors.kt$0xff001b19</ID>
    <ID>MagicNumber:Colors.kt$0xff003530</ID>
    <ID>MagicNumber:Colors.kt$0xff004e48</ID>
    <ID>MagicNumber:Colors.kt$0xff00685f</ID>
    <ID>MagicNumber:Colors.kt$0xff008177</ID>
    <ID>MagicNumber:Colors.kt$0xff009b8f</ID>
    <ID>MagicNumber:Colors.kt$0xff00b4a6</ID>
    <ID>MagicNumber:Colors.kt$0xff00cebe</ID>
    <ID>MagicNumber:Colors.kt$0xff00e7d5</ID>
    <ID>MagicNumber:Colors.kt$0xff00ffeb</ID>
    <ID>MagicNumber:Colors.kt$0xff101010</ID>
    <ID>MagicNumber:Colors.kt$0xff212021</ID>
    <ID>MagicNumber:Colors.kt$0xff333333</ID>
    <ID>MagicNumber:Colors.kt$0xff434343</ID>
    <ID>MagicNumber:Colors.kt$0xff696666</ID>
    <ID>MagicNumber:Colors.kt$0xff777979</ID>
    <ID>MagicNumber:Colors.kt$0xff9f9f9f</ID>
    <ID>MagicNumber:Colors.kt$0xffaae6e1</ID>
    <ID>MagicNumber:Colors.kt$0xffe3e3e4</ID>
    <ID>MagicNumber:Colors.kt$0xfffffbf0</ID>
    <ID>MagicNumber:Conduit.kt$Conduit$100</ID>
    <ID>MagicNumber:DrawableUtil.kt$DrawableUtil$100</ID>
    <ID>MagicNumber:DrawableUtil.kt$DrawableUtil$40f</ID>
    <ID>MagicNumber:DurationExtensions.kt$1e9</ID>
    <ID>MagicNumber:EditFolderActivity.kt$EditFolderActivity$0.5</ID>
    <ID>MagicNumber:ExpandableSpaceList.kt$180</ID>
    <ID>MagicNumber:FullscreenDimmingOverlay.kt$FullScreenCreateGroupDimmingOverlay$200</ID>
    <ID>MagicNumber:FullscreenDimmingOverlay.kt$FullScreenDimmingOverlay$200</ID>
    <ID>MagicNumber:GDriveConduit.kt$GDriveConduit$262144</ID>
    <ID>MagicNumber:GDriveConduit.kt$GDriveConduit.Companion$1000</ID>
    <ID>MagicNumber:GDriveConduit.kt$GDriveConduit.Companion$20</ID>
    <ID>MagicNumber:GDriveConduit.kt$GDriveConduit.Companion$200</ID>
    <ID>MagicNumber:GDriveConduit.kt$GDriveConduit.Companion$443</ID>
    <ID>MagicNumber:GDriveConduit.kt$GDriveConduit.Companion$80</ID>
    <ID>MagicNumber:GDriveConduit.kt$GDriveConduit.Companion$8192</ID>
    <ID>MagicNumber:Hbks.kt$Hbks$12</ID>
    <ID>MagicNumber:Hbks.kt$Hbks$128</ID>
    <ID>MagicNumber:Hbks.kt$Hbks$60</ID>
    <ID>MagicNumber:IaConduit.kt$IaConduit$4</ID>
    <ID>MagicNumber:InternetArchiveLoginScreen.kt$3000</ID>
    <ID>MagicNumber:MainActivity.kt$MainActivity$0.3f</ID>
    <ID>MagicNumber:MainActivity.kt$MainActivity$0.75</ID>
    <ID>MagicNumber:MainActivity.kt$MainActivity$200</ID>
    <ID>MagicNumber:MainActivity.kt$MainActivity$60</ID>
    <ID>MagicNumber:MainActivity.kt$MainActivity$8f</ID>
    <ID>MagicNumber:MainDrawerContent.kt$0.65f</ID>
    <ID>MagicNumber:MainDrawerContent.kt$0.7f</ID>
    <ID>MagicNumber:MainDrawerContent.kt$8f</ID>
    <ID>MagicNumber:MainMediaScreen.kt$4</ID>
    <ID>MagicNumber:MainMediaViewHolder.kt$MainMediaViewHolder$0.5f</ID>
    <ID>MagicNumber:MainMediaViewHolder.kt$MainMediaViewHolder$1000</ID>
    <ID>MagicNumber:MainMediaViewHolder.kt$MainMediaViewHolder$300</ID>
    <ID>MagicNumber:MainMediaViewHolder.kt$MainMediaViewHolder$30f</ID>
    <ID>MagicNumber:MainMediaViewHolder.kt$MainMediaViewHolder$5f</ID>
    <ID>MagicNumber:Media.kt$Media.Status.DeleteRemote$7</ID>
    <ID>MagicNumber:Media.kt$Media.Status.Error$9</ID>
    <ID>MagicNumber:Media.kt$Media.Status.Published$3</ID>
    <ID>MagicNumber:Media.kt$Media.Status.Uploaded$5</ID>
    <ID>MagicNumber:Media.kt$Media.Status.Uploading$4</ID>
    <ID>MagicNumber:MediaViewHolder.kt$MediaViewHolder$0.5f</ID>
    <ID>MagicNumber:MediaViewHolder.kt$MediaViewHolder$30f</ID>
    <ID>MagicNumber:MediaViewHolder.kt$MediaViewHolder$5f</ID>
    <ID>MagicNumber:NumericKeypad.kt$3</ID>
    <ID>MagicNumber:Onboarding23Activity.kt$Onboarding23Activity$0xffffff</ID>
    <ID>MagicNumber:Onboarding23Activity.kt$Onboarding23Activity$2000</ID>
    <ID>MagicNumber:Onboarding23Activity.kt$Onboarding23Activity$25F</ID>
    <ID>MagicNumber:Onboarding23Activity.kt$Onboarding23Activity$3000</ID>
    <ID>MagicNumber:Onboarding23Activity.kt$Onboarding23Activity$999999</ID>
    <ID>MagicNumber:Onboarding23FragmentStateAdapter.kt$Onboarding23FragmentStateAdapter$3</ID>
    <ID>MagicNumber:Onboarding23InstructionsActivity.kt$Onboarding23InstructionsActivity$200L</ID>
    <ID>MagicNumber:Onboarding23InstructionsActivity.kt$Onboarding23InstructionsActivity$3</ID>
    <ID>MagicNumber:PasscodeDots.kt$10f</ID>
    <ID>MagicNumber:PasscodeDots.kt$15f</ID>
    <ID>MagicNumber:PasscodeDots.kt$25f</ID>
    <ID>MagicNumber:PasscodeEntryViewModel.kt$PasscodeEntryViewModel$200</ID>
    <ID>MagicNumber:PasscodeEntryViewModel.kt$PasscodeEntryViewModel$500</ID>
    <ID>MagicNumber:PasscodeSetupViewModel.kt$PasscodeSetupViewModel$100</ID>
    <ID>MagicNumber:PasscodeSetupViewModel.kt$PasscodeSetupViewModel$500</ID>
    <ID>MagicNumber:Picker.kt$Picker$99</ID>
    <ID>MagicNumber:PreviewViewHolder.kt$PreviewViewHolder$0.5f</ID>
    <ID>MagicNumber:PreviewViewHolder.kt$PreviewViewHolder$30f</ID>
    <ID>MagicNumber:PreviewViewHolder.kt$PreviewViewHolder$5f</ID>
    <ID>MagicNumber:PrimaryButton.kt$8f</ID>
    <ID>MagicNumber:ProcessingTracker.kt$ProcessingTracker$3</ID>
    <ID>MagicNumber:RestEndpointTask.kt$RestEndpointTask$9050</ID>
    <ID>MagicNumber:RetrofitModule.kt$60</ID>
    <ID>MagicNumber:SaveClient.kt$SaveClient$40L</ID>
    <ID>MagicNumber:SnowbirdFileListAdapter.kt$SnowbirdFileListAdapter$40</ID>
    <ID>MagicNumber:SnowbirdFileViewModel.kt$SnowbirdFileViewModel$30_000</ID>
    <ID>MagicNumber:SnowbirdFileViewModel.kt$SnowbirdFileViewModel$60_000</ID>
    <ID>MagicNumber:SnowbirdGroup.kt$10</ID>
    <ID>MagicNumber:SnowbirdGroupListAdapter.kt$SnowbirdGroupsAdapter.ViewHolder$40</ID>
    <ID>MagicNumber:SnowbirdGroupRepository.kt$SnowbirdGroupRepository$1000</ID>
    <ID>MagicNumber:SnowbirdGroupRepository.kt$SnowbirdGroupRepository$5</ID>
    <ID>MagicNumber:SnowbirdGroupRepository.kt$SnowbirdGroupRepository$60</ID>
    <ID>MagicNumber:SnowbirdGroupViewModel.kt$SnowbirdGroupViewModel$30_000</ID>
    <ID>MagicNumber:SnowbirdGroupViewModel.kt$SnowbirdGroupViewModel$60_000</ID>
    <ID>MagicNumber:SnowbirdRepo.kt$10</ID>
    <ID>MagicNumber:SnowbirdRepoListAdapter.kt$SnowbirdRepoListAdapter.SnowbirdRepoListViewHolder$40</ID>
    <ID>MagicNumber:SnowbirdRepoViewModel.kt$SnowbirdRepoViewModel$30_000</ID>
    <ID>MagicNumber:SnowbirdRepoViewModel.kt$SnowbirdRepoViewModel$60_000</ID>
    <ID>MagicNumber:SnowbirdServiceStatus.kt$SnowbirdServiceStatus$3</ID>
    <ID>MagicNumber:SnowbirdServiceStatus.kt$SnowbirdServiceStatus$4</ID>
    <ID>MagicNumber:SnowbirdServiceStatus.kt$SnowbirdServiceStatus$5</ID>
    <ID>MagicNumber:SnowbirdServiceStatus.kt$SnowbirdServiceStatus$6</ID>
    <ID>MagicNumber:SnowbirdServiceStatus.kt$SnowbirdServiceStatus.Companion$3</ID>
    <ID>MagicNumber:SnowbirdServiceStatus.kt$SnowbirdServiceStatus.Companion$4</ID>
    <ID>MagicNumber:SnowbirdServiceStatus.kt$SnowbirdServiceStatus.Companion$5</ID>
    <ID>MagicNumber:SnowbirdServiceStatus.kt$SnowbirdServiceStatus.Companion$6</ID>
    <ID>MagicNumber:Space.kt$Space.Type.GDRIVE$4</ID>
    <ID>MagicNumber:Space.kt$Space.Type.RAVEN$5</ID>
    <ID>MagicNumber:SpaceAdapter.kt$SpaceAdapter.ViewHolder$32</ID>
    <ID>MagicNumber:SpaceDrawerAdapter.kt$SpaceDrawerAdapter.SpaceViewHolder$21</ID>
    <ID>MagicNumber:SwipeToDeleteCallback.kt$SwipeToDeleteCallback$0.75</ID>
    <ID>MagicNumber:TwoLetterDrawable.kt$TwoLetterDrawable$0.5f</ID>
    <ID>MagicNumber:TwoLetterDrawable.kt$TwoLetterDrawable$0.8f</ID>
    <ID>MagicNumber:UnixSocketClient.kt$UnixSocketClient$200</ID>
    <ID>MagicNumber:UnixSocketClient.kt$UnixSocketClient$299</ID>
    <ID>MagicNumber:UnixSocketClientFileExtensions.kt$200</ID>
    <ID>MagicNumber:UnixSocketClientFileExtensions.kt$299</ID>
    <ID>MagicNumber:UnixSocketClientUtilityExtensions.kt$16</ID>
    <ID>MagicNumber:UnixSocketClientUtilityExtensions.kt$8192</ID>
    <ID>MagicNumber:UploadService.kt$UploadService$7918</ID>
    <ID>MagicNumber:Utility.kt$Utility$1024</ID>
    <ID>MagicNumber:Utility.kt$Utility$4</ID>
    <ID>MagicNumber:VideoRequestHandler.kt$VideoRequestHandler$6</ID>
    <ID>MagicNumber:WebDavFragment.kt$WebDavFragment.&lt;no name provided&gt;$200</ID>
    <ID>MagicNumber:WebDavFragment.kt$WebDavFragment.&lt;no name provided&gt;$204</ID>
    <ID>MatchingDeclarationName:DefaultScaffold.kt$MessageManager</ID>
    <ID>MatchingDeclarationName:MainMediaScreen.kt$CollectionSection</ID>
    <ID>MatchingDeclarationName:SnowbirdGroupListAdapter.kt$SnowbirdGroupsAdapter : ListAdapter</ID>
    <ID>MatchingDeclarationName:TextView.kt$Position</ID>
    <ID>MaxLineLength:BiometricAuthenticator.kt$BiometricAuthenticator$return config.biometricAuthEnabled &amp;&amp; biometricManager.canAuthenticate(BiometricManager.Authenticators.BIOMETRIC_STRONG) == BiometricManager.BIOMETRIC_SUCCESS</ID>
    <ID>MaxLineLength:BottomSheetExtensions.kt$val bottomSheet: FrameLayout = dialog.findViewById(com.google.android.material.R.id.design_bottom_sheet) ?: return@setOnShowListener</ID>
    <ID>MaxLineLength:BrowseFoldersAdapter.kt$BrowseFoldersAdapter.FolderViewHolder$inner</ID>
    <ID>MaxLineLength:ConsentActivity.kt$ConsentActivity$R.string.by_allowing_health_checks_you_give_permission_for_the_app_to_securely_send_health_check_data_to_the_s_team</ID>
    <ID>MaxLineLength:CreativeCommonsLicenseManager.kt$CreativeCommonsLicenseManager$swRequireShareAlike.isChecked = isActive &amp;&amp; binding.swAllowRemix.isChecked &amp;&amp; currentLicense?.contains("-sa", true) ?: false</ID>
    <ID>MaxLineLength:DriveServiceHelper.kt$DriveServiceHelper$suspend</ID>
    <ID>MaxLineLength:DurationExtensions.kt$*</ID>
    <ID>MaxLineLength:GDriveConduit.kt$GDriveConduit.Companion$"mimeType='application/vnd.google-apps.folder' and 'root' in parents and trashed = false"</ID>
    <ID>MaxLineLength:GDriveConduit.kt$GDriveConduit.Companion$"mimeType='application/vnd.google-apps.folder' and name = '$folderName' and trashed = false and '$parentId' in parents"</ID>
    <ID>MaxLineLength:Hbks.kt$Hbks$}</ID>
    <ID>MaxLineLength:IaConduit.kt$IaConduit$// TODO this should make sure we aren't accidentally using one of archive.org's metadata fields by accident</ID>
    <ID>MaxLineLength:InternetArchiveDetailsScreen.kt$message = UiText.StringResource(R.string.are_you_sure_you_want_to_remove_this_server_from_the_app)</ID>
    <ID>MaxLineLength:InternetArchiveFragment.kt$InternetArchiveFragment$val</ID>
    <ID>MaxLineLength:MediaAdapter.kt$MediaAdapter$// CleanInsightsManager.measureEvent("backend", "upload-error", media[pos].space?.friendlyName)</ID>
    <ID>MaxLineLength:PasscodeSetupScreen.kt$text = "Make sure you remember this pin. If you forget it, you will need to reset the app, and all data will be erased."</ID>
    <ID>MaxLineLength:Prefs.kt$Prefs$get() = prefs?.getString(ProofModeConstants.PREFS_KEY_PASSPHRASE, null) ?: ProofModeConstants.PREFS_KEY_PASSPHRASE_DEFAULT</ID>
    <ID>MaxLineLength:ProofModeSettingsActivity.kt$ProofModeSettingsActivity.Fragment$if</ID>
    <ID>MaxLineLength:ReviewActivity.kt$ReviewActivity.Companion$fun</ID>
    <ID>MaxLineLength:SnowbirdCreateGroupFragment.kt$SnowbirdCreateGroupFragment$SnowbirdCreateGroupFragmentDirections</ID>
    <ID>MaxLineLength:SnowbirdFileListFragment.kt$SnowbirdFileListFragment$// viewBinding.snowbirdMediaRecyclerView.layoutManager = StaggeredGridLayoutManager(2, StaggeredGridLayoutManager.VERTICAL)</ID>
    <ID>MaxLineLength:SnowbirdFileRepository.kt$SnowbirdFileRepository$private suspend</ID>
    <ID>MaxLineLength:SnowbirdFragment.kt$SnowbirdFragment$"save+dweb::?dht=82fd345d484393a96b6e0c5d5e17a85a61c9184cc5a3311ab069d6efa0bf1410&amp;enc=6fa27396fe298f92c91013ac54d8f316c2d45dc3bed0edec73078040aa10feed&amp;pk=f4b404d294817cf11ea7f8ef7231626e03b74f6fafe3271b53918608afa82d12&amp;sk=5482a8f490081be684fbadb8bde7f0a99bab8acdcf1ec094826f0f18e327e399"</ID>
    <ID>MaxLineLength:SnowbirdGroupListFragment.kt$SnowbirdGroupListFragment$// findNavController().navigate(SnowbirdGroupListFragmentDirections.navigateToSnowbirdShareScreen(groupKey))</ID>
    <ID>MaxLineLength:SnowbirdGroupListFragment.kt$SnowbirdGroupListFragment$val</ID>
    <ID>MaxLineLength:SnowbirdGroupListFragment.kt$SnowbirdGroupListFragment.&lt;no name provided&gt;$SnowbirdGroupListFragmentDirections.actionFragmentSnowbirdGroupListToFragmentSnowbirdCreateGroup()</ID>
    <ID>MaxLineLength:SnowbirdRepoListFragment.kt$SnowbirdRepoListFragment$// findNavController().navigate(SnowbirdRepoListFragmentDirections.navigateToSnowbirdListFilesScreen(groupKey, repoKey))</ID>
    <ID>MaxLineLength:SpaceAdapter.kt$SpaceAdapter$class</ID>
    <ID>MaxLineLength:SpaceDrawerAdapter.kt$SpaceDrawerAdapter$class</ID>
    <ID>MaxLineLength:SpaceDrawerAdapter.kt$SpaceDrawerAdapter$val previousIndex = currentList.indexOfFirst { it is SpaceItem.SpaceItemData &amp;&amp; it.space.id == selectedSpace?.id }</ID>
    <ID>MaxLineLength:SpaceDrawerAdapter.kt$SpaceDrawerAdapter.Companion.&lt;no name provided&gt;$oldItem is SpaceItem.SpaceItemData &amp;&amp; newItem is SpaceItem.SpaceItemData -&gt; oldItem.space.friendlyName == newItem.space.friendlyName</ID>
    <ID>MaxLineLength:SpaceDrawerAdapter.kt$SpaceDrawerAdapter.Companion.&lt;no name provided&gt;$oldItem is SpaceItem.SpaceItemData &amp;&amp; newItem is SpaceItem.SpaceItemData -&gt; oldItem.space.id == newItem.space.id</ID>
    <ID>MaxLineLength:SpaceDrawerAdapter.kt$SpaceDrawerAdapter.SpaceViewHolder$val previousIndex = currentList.indexOfFirst { it is SpaceItem.SpaceItemData &amp;&amp; it.space.id == selectedSpace?.id }</ID>
    <ID>MaxLineLength:Utility.kt$Utility$fun</ID>
    <ID>MaxLineLength:WebDavSetupLicenseFragment.kt$WebDavSetupLicenseFragment$val</ID>
    <ID>MaximumLineLength:BiometricAuthenticator.kt$BiometricAuthenticator$ </ID>
    <ID>MaximumLineLength:BottomSheetExtensions.kt$ </ID>
    <ID>MaximumLineLength:BrowseFoldersAdapter.kt$BrowseFoldersAdapter$ </ID>
    <ID>MaximumLineLength:ConsentActivity.kt$ConsentActivity$ </ID>
    <ID>MaximumLineLength:CreativeCommonsLicenseManager.kt$CreativeCommonsLicenseManager$ </ID>
    <ID>MaximumLineLength:DriveServiceHelper.kt$DriveServiceHelper$ </ID>
    <ID>MaximumLineLength:GDriveConduit.kt$GDriveConduit.Companion$ </ID>
    <ID>MaximumLineLength:Hbks.kt$Hbks$ </ID>
    <ID>MaximumLineLength:InternetArchiveDetailsScreen.kt$ </ID>
    <ID>MaximumLineLength:InternetArchiveFragment.kt$InternetArchiveFragment$ </ID>
    <ID>MaximumLineLength:PasscodeSetupScreen.kt$ </ID>
    <ID>MaximumLineLength:Prefs.kt$Prefs$ </ID>
    <ID>MaximumLineLength:ProofModeSettingsActivity.kt$ProofModeSettingsActivity.Fragment$ </ID>
    <ID>MaximumLineLength:ReviewActivity.kt$ReviewActivity.Companion$ </ID>
    <ID>MaximumLineLength:SnowbirdCreateGroupFragment.kt$SnowbirdCreateGroupFragment$ </ID>
    <ID>MaximumLineLength:SnowbirdFileRepository.kt$SnowbirdFileRepository$ </ID>
    <ID>MaximumLineLength:SnowbirdFragment.kt$SnowbirdFragment$ </ID>
    <ID>MaximumLineLength:SnowbirdGroupListFragment.kt$SnowbirdGroupListFragment$ </ID>
    <ID>MaximumLineLength:SnowbirdGroupListFragment.kt$SnowbirdGroupListFragment.&lt;no name provided&gt;$ </ID>
    <ID>MaximumLineLength:SpaceAdapter.kt$SpaceAdapter$class</ID>
    <ID>MaximumLineLength:SpaceDrawerAdapter.kt$SpaceDrawerAdapter$ </ID>
    <ID>MaximumLineLength:SpaceDrawerAdapter.kt$SpaceDrawerAdapter$class</ID>
    <ID>MaximumLineLength:SpaceDrawerAdapter.kt$SpaceDrawerAdapter.Companion.&lt;no name provided&gt;$ </ID>
    <ID>MaximumLineLength:SpaceDrawerAdapter.kt$SpaceDrawerAdapter.SpaceViewHolder$ </ID>
    <ID>MaximumLineLength:Utility.kt$Utility$ </ID>
    <ID>MaximumLineLength:WebDavSetupLicenseFragment.kt$WebDavSetupLicenseFragment$ </ID>
    <ID>MemberNameEqualsClassName:Prefs.kt$Prefs$private var prefs: SharedPreferences? = null</ID>
    <ID>ModifierClickableOrder:NumericKeypad.kt$clickable( interactionSource = interactionSource, indication = null, enabled = enabled, onClick = { hapticManager.performHapticFeedback(AppHapticFeedbackType.KeyPress) onClick() } )</ID>
    <ID>ModifierMissing:AddFolderScreen.kt$AddFolderScreenContent</ID>
    <ID>ModifierMissing:AddFolderScreen.kt$FolderOption</ID>
    <ID>ModifierMissing:BrowseFolderScreen.kt$BrowseFolderItem</ID>
    <ID>ModifierMissing:BrowseFolderScreen.kt$BrowseFolderScreenContent</ID>
    <ID>ModifierMissing:ExpandableSpaceList.kt$DrawerSpaceListItem</ID>
    <ID>ModifierMissing:ExpandableSpaceList.kt$ExpandableSpaceList</ID>
    <ID>ModifierMissing:FolderOptionsPopup.kt$FolderOptionsPopup</ID>
    <ID>ModifierMissing:HomeAppBar.kt$HomeAppBar</ID>
    <ID>ModifierMissing:HomeScreen.kt$HomeScreenContent</ID>
    <ID>ModifierMissing:InternetArchiveLoginScreen.kt$ComposeAppBar</ID>
    <ID>ModifierMissing:MainBottomBar.kt$BottomNavMenuItem</ID>
    <ID>ModifierMissing:MainBottomBar.kt$MainBottomBar</ID>
    <ID>ModifierMissing:MainDrawerContent.kt$MainDrawerContent</ID>
    <ID>ModifierMissing:MainDrawerContent.kt$MainDrawerFolderListItem</ID>
    <ID>ModifierMissing:MainMediaScreen.kt$CollectionHeaderView</ID>
    <ID>ModifierMissing:MainMediaScreen.kt$CollectionSectionView</ID>
    <ID>ModifierMissing:MainMediaScreen.kt$ErrorIndicator</ID>
    <ID>ModifierMissing:MainMediaScreen.kt$MainMediaScreen</ID>
    <ID>ModifierMissing:MainMediaScreen.kt$UploadProgress</ID>
    <ID>ModifierMissing:MainMediaScreen.kt$WelcomeMessage</ID>
    <ID>ModifierMissing:MediaCacheScreen.kt$CacheFileItem</ID>
    <ID>ModifierMissing:MediaCacheScreen.kt$MediaCacheScreen</ID>
    <ID>ModifierMissing:NumericKeypad.kt$NumericKeypad</ID>
    <ID>ModifierMissing:PasscodeDots.kt$PasscodeDots</ID>
    <ID>ModifierMissing:PasscodeEntryScreen.kt$PasscodeEntryScreenContent</ID>
    <ID>ModifierMissing:Preview.kt$DefaultBoxPreview</ID>
    <ID>ModifierMissing:Preview.kt$DefaultEmptyScaffoldPreview</ID>
    <ID>ModifierMissing:Preview.kt$DefaultScaffoldPreview</ID>
    <ID>ModifierMissing:ProofModeScreen.kt$ProofModeScreenContent</ID>
    <ID>ModifierMissing:ServerOptionItem.kt$ServerOptionItem</ID>
    <ID>ModifierMissing:SettingsScreen.kt$SettingsScreen</ID>
    <ID>ModifierMissing:SpaceListScreen.kt$SpaceListItem</ID>
    <ID>ModifierMissing:SpaceListScreen.kt$SpaceListScreen</ID>
    <ID>ModifierMissing:SpaceListScreen.kt$SpaceListScreenContent</ID>
    <ID>ModifierMissing:SpaceSetupScreen.kt$SpaceSetupScreen</ID>
    <ID>MultiLineIfElse:EditFolderActivity.kt$EditFolderActivity$R.string.action_archive_project</ID>
    <ID>MultiLineIfElse:EditFolderActivity.kt$EditFolderActivity$R.string.action_unarchive_project</ID>
    <ID>MultiLineIfElse:FileUtils.kt$FileUtils$Log.d( "$TAG File -", "Authority: " + uri.authority + ", Fragment: " + uri.fragment + ", Port: " + uri.port + ", Query: " + uri.query + ", Scheme: " + uri.scheme + ", Host: " + uri.host + ", Segments: " + uri.pathSegments.toString() )</ID>
    <ID>MultiLineIfElse:MainActivity.kt$MainActivity$false</ID>
    <ID>MultiLineIfElse:MediaViewHolder.kt$MediaViewHolder$R.drawable.ic_edit_selected</ID>
    <ID>MultiLineIfElse:MediaViewHolder.kt$MediaViewHolder$R.drawable.ic_edit_unselected</ID>
    <ID>MultiLineIfElse:MediaViewHolder.kt$MediaViewHolder$R.drawable.ic_flag_selected</ID>
    <ID>MultiLineIfElse:MediaViewHolder.kt$MediaViewHolder$R.drawable.ic_flag_unselected</ID>
    <ID>MultiLineIfElse:MediaViewHolder.kt$MediaViewHolder$R.drawable.ic_location_selected</ID>
    <ID>MultiLineIfElse:MediaViewHolder.kt$MediaViewHolder$R.drawable.ic_location_unselected</ID>
    <ID>MultiLineIfElse:MediaViewHolder.kt$MediaViewHolder$R.drawable.ic_tag_selected</ID>
    <ID>MultiLineIfElse:MediaViewHolder.kt$MediaViewHolder$R.drawable.ic_tag_unselected</ID>
    <ID>MultiLineIfElse:PasscodeDots.kt$MaterialTheme.colorScheme.onBackground</ID>
    <ID>MultiLineIfElse:PasscodeDots.kt$MaterialTheme.colorScheme.onSurface.copy(alpha = 0.3f)</ID>
    <ID>MultiLineIfElse:PasscodeEntryViewModel.kt$PasscodeEntryViewModel$null</ID>
    <ID>MultiLineIfElse:PasscodeEntryViewModel.kt$PasscodeEntryViewModel$state</ID>
    <ID>MultiLineIfElse:PasscodeEntryViewModel.kt$PasscodeEntryViewModel$state.copy(passcode = state.passcode + number)</ID>
    <ID>MultiLineIfElse:PasscodeEntryViewModel.kt$PasscodeEntryViewModel$state.copy(passcode = state.passcode.dropLast(1))</ID>
    <ID>MultiLineIfElse:PasscodeSetupViewModel.kt$PasscodeSetupViewModel$state</ID>
    <ID>MultiLineIfElse:PasscodeSetupViewModel.kt$PasscodeSetupViewModel$state.copy(passcode = state.passcode + number)</ID>
    <ID>MultiLineIfElse:PasscodeSetupViewModel.kt$PasscodeSetupViewModel$state.copy(passcode = state.passcode.dropLast(1))</ID>
    <ID>MultiLineIfElse:RequestBodyUtil.kt$RequestBodyUtil.&lt;no name provided&gt;$FileInputStream( uri.path?.let { File(it) } )</ID>
    <ID>MultiLineIfElse:RequestBodyUtil.kt$RequestBodyUtil.&lt;no name provided&gt;$cr.openInputStream(uri)</ID>
    <ID>MultiLineIfElse:SwipeToDeleteCallback.kt$SwipeToDeleteCallback$0</ID>
    <ID>MultiLineIfElse:SwipeToDeleteCallback.kt$SwipeToDeleteCallback$ColorDrawable(ContextCompat.getColor(context, R.color.colorDanger))</ID>
    <ID>MultiLineIfElse:SwipeToDeleteCallback.kt$SwipeToDeleteCallback$ContextCompat.getColor(context, R.color.colorOnBackground)</ID>
    <ID>MultiLineIfElse:SwipeToDeleteCallback.kt$SwipeToDeleteCallback$ContextCompat.getDrawable(context, R.drawable.ic_delete)</ID>
    <ID>MultiLineIfElse:SwipeToDeleteCallback.kt$SwipeToDeleteCallback$null</ID>
    <ID>NestedBlockDepth:MediaViewHolder.kt$MediaViewHolder$@SuppressLint("SetTextI18n") fun bind(media: Media? = null, batchMode: Boolean = false, doImageFade: Boolean = true)</ID>
    <ID>NestedBlockDepth:UriExtensions.kt$fun Uri.getFilename(applicationContext: Context): String?</ID>
    <ID>NestedBlockDepth:WebDavConduit.kt$WebDavConduit$@Throws(IOException::class) private suspend fun uploadChunked(base: HttpUrl, path: List&lt;String&gt;, fileName: String): Boolean</ID>
    <ID>NoBlankLineBeforeRbrace:AddFolderScreen.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:BaseDialog.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:BrowseFolderScreen.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:CreateNewFolderFragment.kt$CreateNewFolderFragment$ </ID>
    <ID>NoBlankLineBeforeRbrace:ExpandableSpaceList.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:FileUtils.kt$FileUtils$ </ID>
    <ID>NoBlankLineBeforeRbrace:FolderAdapter.kt$FolderAdapter.ViewHolder$ </ID>
    <ID>NoBlankLineBeforeRbrace:FolderOptionsPopup.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:HomeActivity.kt$HomeActivity$ </ID>
    <ID>NoBlankLineBeforeRbrace:HomeAppBar.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:HomeScreen.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:HomeScreen.kt$HomeViewModel$ </ID>
    <ID>NoBlankLineBeforeRbrace:IaConduit.kt$IaConduit.&lt;no name provided&gt;$ </ID>
    <ID>NoBlankLineBeforeRbrace:InternetArchiveActivity.kt$InternetArchiveActivity$ </ID>
    <ID>NoBlankLineBeforeRbrace:InternetArchiveDetailsScreen.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:InternetArchiveLoginUseCase.kt$InternetArchiveLoginUseCase$ </ID>
    <ID>NoBlankLineBeforeRbrace:InternetArchiveLoginViewModel.kt$InternetArchiveLoginViewModel$ </ID>
    <ID>NoBlankLineBeforeRbrace:MainActivity.kt$MainActivity$ </ID>
    <ID>NoBlankLineBeforeRbrace:MainBottomBar.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:MainDrawerContent.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:MainMediaViewHolder.kt$MainMediaViewHolder$ </ID>
    <ID>NoBlankLineBeforeRbrace:MainMediaViewModel.kt$MainMediaViewModel$ </ID>
    <ID>NoBlankLineBeforeRbrace:MediaCacheScreen.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:NumericKeypad.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:Onboarding23InstructionsActivity.kt$Onboarding23InstructionsActivity.&lt;no name provided&gt;$ </ID>
    <ID>NoBlankLineBeforeRbrace:PackageManager.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:PasscodeEntryScreen.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:PasscodeEntryViewModel.kt$PasscodeEntryViewModel$ </ID>
    <ID>NoBlankLineBeforeRbrace:Preview.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:PreviewActivity.kt$PreviewActivity$ </ID>
    <ID>NoBlankLineBeforeRbrace:PreviewViewHolder.kt$PreviewViewHolder$ </ID>
    <ID>NoBlankLineBeforeRbrace:Project.kt$Project$ </ID>
    <ID>NoBlankLineBeforeRbrace:ProofModeSettingsActivity.kt$ProofModeSettingsActivity$ </ID>
    <ID>NoBlankLineBeforeRbrace:RetrofitAPI.kt$RetrofitAPI$ </ID>
    <ID>NoBlankLineBeforeRbrace:SectionViewHolder.kt$SectionViewHolder.Companion$ </ID>
    <ID>NoBlankLineBeforeRbrace:ServerOptionItem.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:SmartFragmentStatePagerAdapter.kt$SmartFragmentStatePagerAdapter$ </ID>
    <ID>NoBlankLineBeforeRbrace:SnowbirdCreateGroupFragment.kt$SnowbirdCreateGroupFragment$ </ID>
    <ID>NoBlankLineBeforeRbrace:SnowbirdFileRepository.kt$SnowbirdFileRepository$ </ID>
    <ID>NoBlankLineBeforeRbrace:Space.kt$Space$ </ID>
    <ID>NoBlankLineBeforeRbrace:SpaceAdapter.kt$SpaceAdapter.Companion$ </ID>
    <ID>NoBlankLineBeforeRbrace:SpaceListFragment.kt$SpaceListFragment$ </ID>
    <ID>NoBlankLineBeforeRbrace:SpaceListScreen.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:SpaceSetupActivity.kt$SpaceSetupActivity$ </ID>
    <ID>NoBlankLineBeforeRbrace:SpaceSetupFragment.kt$SpaceSetupFragment$ </ID>
    <ID>NoBlankLineBeforeRbrace:TorStatusContentProvider.kt$TorStatusContentProvider$ </ID>
    <ID>NoBlankLineBeforeRbrace:UiImage.kt$UiImage$ </ID>
    <ID>NoBlankLineBeforeRbrace:WebDavFragment.kt$WebDavFragment$ </ID>
    <ID>NoConsecutiveBlankLines:AddFolderActivity.kt$AddFolderActivity$ </ID>
    <ID>NoConsecutiveBlankLines:AddFolderScreen.kt$ </ID>
    <ID>NoConsecutiveBlankLines:AppLogger.kt$ </ID>
    <ID>NoConsecutiveBlankLines:BadgeDrawable.kt$BadgeDrawable$ </ID>
    <ID>NoConsecutiveBlankLines:BaseButton.kt$ </ID>
    <ID>NoConsecutiveBlankLines:BaseComposeActivity.kt$BaseComposeActivity$ </ID>
    <ID>NoConsecutiveBlankLines:BaseDialog.kt$ </ID>
    <ID>NoConsecutiveBlankLines:BrowseFolderScreen.kt$ </ID>
    <ID>NoConsecutiveBlankLines:BrowseFoldersAdapter.kt$BrowseFoldersAdapter.FolderViewHolder$ </ID>
    <ID>NoConsecutiveBlankLines:BrowseFoldersFragment.kt$ </ID>
    <ID>NoConsecutiveBlankLines:BrowseFoldersFragment.kt$BrowseFoldersFragment$ </ID>
    <ID>NoConsecutiveBlankLines:BrowseFoldersViewModel.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Collection.kt$Collection$ </ID>
    <ID>NoConsecutiveBlankLines:ContentPickerFragment.kt$ContentPickerFragment$ </ID>
    <ID>NoConsecutiveBlankLines:CoreModule.kt$ </ID>
    <ID>NoConsecutiveBlankLines:CustomBottomNavBar.kt$CustomBottomNavBar$ </ID>
    <ID>NoConsecutiveBlankLines:DialogConfigBuilder.kt$ </ID>
    <ID>NoConsecutiveBlankLines:EditFolderActivity.kt$EditFolderActivity$ </ID>
    <ID>NoConsecutiveBlankLines:Effects.kt$ </ID>
    <ID>NoConsecutiveBlankLines:FeaturesModule.kt$ </ID>
    <ID>NoConsecutiveBlankLines:FileUtils.kt$FileUtils$ </ID>
    <ID>NoConsecutiveBlankLines:FolderAdapter.kt$FolderAdapter.ViewHolder$ </ID>
    <ID>NoConsecutiveBlankLines:FolderDrawerAdapter.kt$ </ID>
    <ID>NoConsecutiveBlankLines:FolderDrawerAdapter.kt$FolderDrawerAdapter$ </ID>
    <ID>NoConsecutiveBlankLines:FoldersActivity.kt$FoldersActivity$ </ID>
    <ID>NoConsecutiveBlankLines:GeneralSettingsActivity.kt$ </ID>
    <ID>NoConsecutiveBlankLines:GeneralSettingsActivity.kt$GeneralSettingsActivity$ </ID>
    <ID>NoConsecutiveBlankLines:GeneralSettingsActivity.kt$GeneralSettingsActivity.Fragment$ </ID>
    <ID>NoConsecutiveBlankLines:Hbks.kt$Hbks$ </ID>
    <ID>NoConsecutiveBlankLines:HomeScreen.kt$ </ID>
    <ID>NoConsecutiveBlankLines:IaConduit.kt$IaConduit$ </ID>
    <ID>NoConsecutiveBlankLines:InternetArchive.kt$InternetArchive$ </ID>
    <ID>NoConsecutiveBlankLines:InternetArchiveActivity.kt$InternetArchiveActivity$ </ID>
    <ID>NoConsecutiveBlankLines:InternetArchiveDetailsScreen.kt$ </ID>
    <ID>NoConsecutiveBlankLines:InternetArchiveDetailsState.kt$ </ID>
    <ID>NoConsecutiveBlankLines:MainActivity.kt$ </ID>
    <ID>NoConsecutiveBlankLines:MainActivity.kt$MainActivity$ </ID>
    <ID>NoConsecutiveBlankLines:MainDrawerContent.kt$ </ID>
    <ID>NoConsecutiveBlankLines:MainMediaAdapter.kt$MainMediaAdapter$ </ID>
    <ID>NoConsecutiveBlankLines:MainMediaAdapterTest.kt$ </ID>
    <ID>NoConsecutiveBlankLines:MainMediaAdapterTest.kt$MainMediaAdapterTest$ </ID>
    <ID>NoConsecutiveBlankLines:MainMediaFragment.kt$MainMediaFragment$ </ID>
    <ID>NoConsecutiveBlankLines:MainMediaScreen.kt$ </ID>
    <ID>NoConsecutiveBlankLines:MainMediaViewHolder.kt$MainMediaViewHolder$ </ID>
    <ID>NoConsecutiveBlankLines:MainMediaViewModel.kt$ </ID>
    <ID>NoConsecutiveBlankLines:MainViewModel.kt$MainViewModel$ </ID>
    <ID>NoConsecutiveBlankLines:Media.kt$Media$ </ID>
    <ID>NoConsecutiveBlankLines:Media.kt$Media.Companion$ </ID>
    <ID>NoConsecutiveBlankLines:MediaAdapter.kt$MediaAdapter$ </ID>
    <ID>NoConsecutiveBlankLines:MediaCacheScreen.kt$ </ID>
    <ID>NoConsecutiveBlankLines:MediaViewHolder.kt$MediaViewHolder$ </ID>
    <ID>NoConsecutiveBlankLines:Notifier.kt$ </ID>
    <ID>NoConsecutiveBlankLines:NumericKeypad.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Onboarding23SlideFragment.kt$Onboarding23SlideFragment$ </ID>
    <ID>NoConsecutiveBlankLines:PasscodeEntryActivity.kt$PasscodeEntryActivity$ </ID>
    <ID>NoConsecutiveBlankLines:PasscodeEntryScreen.kt$ </ID>
    <ID>NoConsecutiveBlankLines:PasscodeSetupActivity.kt$PasscodeSetupActivity$ </ID>
    <ID>NoConsecutiveBlankLines:PasscodeSetupScreen.kt$ </ID>
    <ID>NoConsecutiveBlankLines:PreviewActivity.kt$PreviewActivity$ </ID>
    <ID>NoConsecutiveBlankLines:PreviewViewHolder.kt$PreviewViewHolder$ </ID>
    <ID>NoConsecutiveBlankLines:ProofModeScreen.kt$ </ID>
    <ID>NoConsecutiveBlankLines:ProofModeSettingsActivity.kt$ </ID>
    <ID>NoConsecutiveBlankLines:ProofModeSettingsActivity.kt$ProofModeSettingsActivity$ </ID>
    <ID>NoConsecutiveBlankLines:ProofModeSettingsActivity.kt$ProofModeSettingsActivity.Fragment$ </ID>
    <ID>NoConsecutiveBlankLines:ReviewActivity.kt$ReviewActivity$ </ID>
    <ID>NoConsecutiveBlankLines:SettingsFragment.kt$SettingsFragment$ </ID>
    <ID>NoConsecutiveBlankLines:SettingsScreen.kt$ </ID>
    <ID>NoConsecutiveBlankLines:SnowbirdCreateGroupFragment.kt$SnowbirdCreateGroupFragment$ </ID>
    <ID>NoConsecutiveBlankLines:SnowbirdFileItem.kt$ </ID>
    <ID>NoConsecutiveBlankLines:SnowbirdJoinGroupFragment.kt$SnowbirdJoinGroupFragment.Companion$ </ID>
    <ID>NoConsecutiveBlankLines:SnowbirdRepoListFragment.kt$SnowbirdRepoListFragment$ </ID>
    <ID>NoConsecutiveBlankLines:SpaceAdapter.kt$SpaceAdapter.ViewHolder$ </ID>
    <ID>NoConsecutiveBlankLines:SpaceDrawerAdapter.kt$SpaceDrawerAdapter$ </ID>
    <ID>NoConsecutiveBlankLines:SpaceListFragment.kt$SpaceListFragment$ </ID>
    <ID>NoConsecutiveBlankLines:SpaceListScreen.kt$ </ID>
    <ID>NoConsecutiveBlankLines:SpaceSetupActivity.kt$SpaceSetupActivity$ </ID>
    <ID>NoConsecutiveBlankLines:SpaceSetupScreen.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Theme.kt$ </ID>
    <ID>NoConsecutiveBlankLines:UiImage.kt$ </ID>
    <ID>NoConsecutiveBlankLines:UiImage.kt$UiImage$ </ID>
    <ID>NoConsecutiveBlankLines:View.kt$ </ID>
    <ID>NoConsecutiveBlankLines:ViewExtension.kt$ </ID>
    <ID>NoConsecutiveBlankLines:WebDavConduit.kt$ </ID>
    <ID>NoConsecutiveBlankLines:WebDavFragment.kt$WebDavFragment$ </ID>
    <ID>NoConsecutiveBlankLines:WebDavSetupLicenseFragment.kt$WebDavSetupLicenseFragment$ </ID>
    <ID>NoEmptyClassBody:MainMediaViewModel.kt$MainMediaViewModel${ }</ID>
    <ID>NoEmptyFirstLineInMethodBlock:AddFolderActivity.kt$AddFolderActivity$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:AddFolderScreen.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:AppLogger.kt$AppLogger$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:BaseButton.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:BaseDialog.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:BrowseFolderScreen.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:BrowseFoldersAdapter.kt$BrowseFoldersAdapter.FolderViewHolder$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:CreateNewFolderFragment.kt$CreateNewFolderFragment$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:DefaultScaffold.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:DialogConfigBuilder.kt$DialogBuilder$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:ExpandableSpaceList.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:FileUtils.kt$FileUtils$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:FolderAdapter.kt$FolderAdapter.ViewHolder$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:FolderDrawerAdapter.kt$FolderDrawerAdapter.FolderViewHolder$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:FolderOptionsPopup.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:FoldersActivity.kt$FoldersActivity$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:HomeAppBar.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:HomeScreen.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:InternetArchiveActivity.kt$InternetArchiveActivity$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:InternetArchiveDetailsScreen.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:InternetArchiveFragment.kt$InternetArchiveFragment$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:InternetArchiveLoginScreen.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:MainActivity.kt$MainActivity$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:MainBottomBar.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:MainDrawerContent.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:MainMediaViewHolder.kt$MainMediaViewHolder$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:NumericKeypad.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:PasscodeDots.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:PasscodeEntryScreen.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:PasscodeEntryViewModel.kt$PasscodeEntryViewModel$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:PasscodeSetupScreen.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:PasscodeSetupViewModel.kt$PasscodeSetupViewModel$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:Picker.kt$Picker$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:Preview.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:PreviewActivity.kt$PreviewActivity$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:PreviewViewHolder.kt$PreviewViewHolder$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:PrimaryButton.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:ProofModeScreen.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:ProofModeSettingsActivity.kt$ProofModeSettingsActivity.Fragment$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:SaveClient.kt$SaveClient.Companion$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:ServerOptionItem.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:SettingsScreen.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:SnowbirdFragment.kt$SnowbirdFragment$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:SnowbirdGroupListAdapter.kt$SnowbirdGroupsAdapter.ViewHolder$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:SnowbirdRepoListFragment.kt$SnowbirdRepoListFragment$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:Space.kt$Space$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:SpaceAdapter.kt$SpaceAdapter.ViewHolder$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:SpaceDrawerAdapter.kt$SpaceDrawerAdapter.SpaceViewHolder$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:SpaceListFragment.kt$SpaceListFragment$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:SpaceListScreen.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:SpaceSetupFragment.kt$SpaceSetupFragment$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:UploadService.kt$UploadService$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:WebDavFragment.kt$WebDavFragment$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:WebDavSetupLicenseFragment.kt$WebDavSetupLicenseFragment$ </ID>
    <ID>NoMultipleSpaces:CleanInsightsManager.kt$CleanInsightsManager$ </ID>
    <ID>NoMultipleSpaces:DialogConfigBuilder.kt$ </ID>
    <ID>NoMultipleSpaces:GDriveConduit.kt$GDriveConduit$ </ID>
    <ID>NoMultipleSpaces:Media.kt$Media$ </ID>
    <ID>NoMultipleSpaces:NumericKeypad.kt$ </ID>
    <ID>NoMultipleSpaces:PreviewAdapter.kt$PreviewAdapter$ </ID>
    <ID>NoMultipleSpaces:RequestBodyUtil.kt$&lt;no name provided&gt;$ </ID>
    <ID>NoMultipleSpaces:ScryptHashingStrategy.kt$ScryptHashingStrategy.Companion$ </ID>
    <ID>NoMultipleSpaces:SnowbirdFragment.kt$SnowbirdFragment$ </ID>
    <ID>NoMultipleSpaces:SwipeToDeleteCallback.kt$SwipeToDeleteCallback$ </ID>
    <ID>NoUnusedImports:AddFolderScreen.kt$net.opendasharchive.openarchive.features.folders.AddFolderScreen.kt</ID>
    <ID>NoUnusedImports:AppLogger.kt$net.opendasharchive.openarchive.core.logger.AppLogger.kt</ID>
    <ID>NoUnusedImports:BaseComposeActivity.kt$net.opendasharchive.openarchive.features.core.BaseComposeActivity.kt</ID>
    <ID>NoUnusedImports:BaseDialog.kt$net.opendasharchive.openarchive.features.core.dialog.BaseDialog.kt</ID>
    <ID>NoUnusedImports:BottomSheetExtensions.kt$net.opendasharchive.openarchive.extensions.BottomSheetExtensions.kt</ID>
    <ID>NoUnusedImports:BrowseFolderScreen.kt$net.opendasharchive.openarchive.features.folders.BrowseFolderScreen.kt</ID>
    <ID>NoUnusedImports:BrowseFoldersFragment.kt$net.opendasharchive.openarchive.features.folders.BrowseFoldersFragment.kt</ID>
    <ID>NoUnusedImports:CoreModule.kt$net.opendasharchive.openarchive.core.di.CoreModule.kt</ID>
    <ID>NoUnusedImports:CreateNewFolderFragment.kt$net.opendasharchive.openarchive.features.folders.CreateNewFolderFragment.kt</ID>
    <ID>NoUnusedImports:CustomButton.kt$net.opendasharchive.openarchive.features.main.ui.CustomButton.kt</ID>
    <ID>NoUnusedImports:DialogConfigBuilder.kt$net.opendasharchive.openarchive.features.core.dialog.DialogConfigBuilder.kt</ID>
    <ID>NoUnusedImports:ExpandableSpaceList.kt$net.opendasharchive.openarchive.features.main.ui.components.ExpandableSpaceList.kt</ID>
    <ID>NoUnusedImports:FeaturesModule.kt$net.opendasharchive.openarchive.core.di.FeaturesModule.kt</ID>
    <ID>NoUnusedImports:FullscreenDimmingOverlay.kt$net.opendasharchive.openarchive.util.FullscreenDimmingOverlay.kt</ID>
    <ID>NoUnusedImports:HomeActivity.kt$net.opendasharchive.openarchive.features.main.HomeActivity.kt</ID>
    <ID>NoUnusedImports:InternetArchiveDetailsScreen.kt$net.opendasharchive.openarchive.features.internetarchive.presentation.details.InternetArchiveDetailsScreen.kt</ID>
    <ID>NoUnusedImports:InternetArchiveLocalSource.kt$net.opendasharchive.openarchive.features.internetarchive.infrastructure.datasource.InternetArchiveLocalSource.kt</ID>
    <ID>NoUnusedImports:InternetArchiveLoginScreen.kt$net.opendasharchive.openarchive.features.internetarchive.presentation.login.InternetArchiveLoginScreen.kt</ID>
    <ID>NoUnusedImports:MainActivity.kt$net.opendasharchive.openarchive.features.main.MainActivity.kt</ID>
    <ID>NoUnusedImports:MainMediaScreen.kt$net.opendasharchive.openarchive.features.main.ui.MainMediaScreen.kt</ID>
    <ID>NoUnusedImports:MainMediaViewHolder.kt$net.opendasharchive.openarchive.features.main.adapters.MainMediaViewHolder.kt</ID>
    <ID>NoUnusedImports:MediaCacheScreen.kt$net.opendasharchive.openarchive.features.main.ui.MediaCacheScreen.kt</ID>
    <ID>NoUnusedImports:MediaViewHolder.kt$net.opendasharchive.openarchive.db.MediaViewHolder.kt</ID>
    <ID>NoUnusedImports:NumericKeypad.kt$net.opendasharchive.openarchive.features.settings.passcode.components.NumericKeypad.kt</ID>
    <ID>NoUnusedImports:PasscodeEntryScreen.kt$net.opendasharchive.openarchive.features.settings.passcode.passcode_entry.PasscodeEntryScreen.kt</ID>
    <ID>NoUnusedImports:PasscodeSetupActivity.kt$net.opendasharchive.openarchive.features.settings.passcode.passcode_setup.PasscodeSetupActivity.kt</ID>
    <ID>NoUnusedImports:PasscodeSetupScreen.kt$net.opendasharchive.openarchive.features.settings.passcode.passcode_setup.PasscodeSetupScreen.kt</ID>
    <ID>NoUnusedImports:ProofModeSettingsActivity.kt$net.opendasharchive.openarchive.features.settings.ProofModeSettingsActivity.kt</ID>
    <ID>NoUnusedImports:RequestBodyUtil.kt$net.opendasharchive.openarchive.services.internetarchive.RequestBodyUtil.kt</ID>
    <ID>NoUnusedImports:RestEndpointTask.kt$net.opendasharchive.openarchive.features.main.RestEndpointTask.kt</ID>
    <ID>NoUnusedImports:ReviewActivity.kt$net.opendasharchive.openarchive.features.media.ReviewActivity.kt</ID>
    <ID>NoUnusedImports:SaveApp.kt$net.opendasharchive.openarchive.SaveApp.kt</ID>
    <ID>NoUnusedImports:ServerOptionItem.kt$net.opendasharchive.openarchive.features.spaces.ServerOptionItem.kt</ID>
    <ID>NoUnusedImports:SettingsFragment.kt$net.opendasharchive.openarchive.features.settings.SettingsFragment.kt</ID>
    <ID>NoUnusedImports:SettingsScreen.kt$net.opendasharchive.openarchive.features.settings.SettingsScreen.kt</ID>
    <ID>NoUnusedImports:SpaceListFragment.kt$net.opendasharchive.openarchive.features.spaces.SpaceListFragment.kt</ID>
    <ID>NoUnusedImports:SpaceListScreen.kt$net.opendasharchive.openarchive.features.spaces.SpaceListScreen.kt</ID>
    <ID>NoUnusedImports:SpaceSetupActivity.kt$net.opendasharchive.openarchive.features.onboarding.SpaceSetupActivity.kt</ID>
    <ID>NoUnusedImports:SpaceSetupFragment.kt$net.opendasharchive.openarchive.features.settings.SpaceSetupFragment.kt</ID>
    <ID>NoUnusedImports:UnixSocketClient.kt$net.opendasharchive.openarchive.features.main.UnixSocketClient.kt</ID>
    <ID>NoUnusedImports:UploadManagerActivity.kt$net.opendasharchive.openarchive.upload.UploadManagerActivity.kt</ID>
    <ID>NoUnusedImports:UploadManagerFragment.kt$net.opendasharchive.openarchive.upload.UploadManagerFragment.kt</ID>
    <ID>NoWildcardImports:BadgeDrawable.kt$import android.graphics.*</ID>
    <ID>NoWildcardImports:CleanInsightsManager.kt$import org.cleaninsights.sdk.*</ID>
    <ID>NoWildcardImports:Hbks.kt$import java.security.*</ID>
    <ID>NoWildcardImports:Hbks.kt$import javax.crypto.*</ID>
    <ID>NoWildcardImports:IaConduit.kt$import okhttp3.*</ID>
    <ID>NoWildcardImports:MediaCacheScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:RequestBodyUtil.kt$import java.io.*</ID>
    <ID>NoWildcardImports:UploadService.kt$import android.app.*</ID>
    <ID>PackageName:PasscodeEntryActivity.kt$package net.opendasharchive.openarchive.features.settings.passcode.passcode_entry</ID>
    <ID>PackageName:PasscodeEntryScreen.kt$package net.opendasharchive.openarchive.features.settings.passcode.passcode_entry</ID>
    <ID>PackageName:PasscodeEntryViewModel.kt$package net.opendasharchive.openarchive.features.settings.passcode.passcode_entry</ID>
    <ID>PackageName:PasscodeSetupActivity.kt$package net.opendasharchive.openarchive.features.settings.passcode.passcode_setup</ID>
    <ID>PackageName:PasscodeSetupScreen.kt$package net.opendasharchive.openarchive.features.settings.passcode.passcode_setup</ID>
    <ID>PackageName:PasscodeSetupViewModel.kt$package net.opendasharchive.openarchive.features.settings.passcode.passcode_setup</ID>
    <ID>PackageNaming:PasscodeEntryActivity.kt$package net.opendasharchive.openarchive.features.settings.passcode.passcode_entry</ID>
    <ID>PackageNaming:PasscodeEntryScreen.kt$package net.opendasharchive.openarchive.features.settings.passcode.passcode_entry</ID>
    <ID>PackageNaming:PasscodeEntryViewModel.kt$package net.opendasharchive.openarchive.features.settings.passcode.passcode_entry</ID>
    <ID>PackageNaming:PasscodeSetupActivity.kt$package net.opendasharchive.openarchive.features.settings.passcode.passcode_setup</ID>
    <ID>PackageNaming:PasscodeSetupScreen.kt$package net.opendasharchive.openarchive.features.settings.passcode.passcode_setup</ID>
    <ID>PackageNaming:PasscodeSetupViewModel.kt$package net.opendasharchive.openarchive.features.settings.passcode.passcode_setup</ID>
    <ID>ParameterListWrapping:AddMediaDialogFragment.kt$AddMediaDialogFragment$( inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle? )</ID>
    <ID>ParameterListWrapping:AlertHelper.kt$AlertHelper.Companion$( context: Context, message: Int?, title: Int? = R.string.error, icon: Int? = null, buttons: List&lt;Button&gt;? = listOf(Button()) )</ID>
    <ID>ParameterListWrapping:AlertHelper.kt$AlertHelper.Companion$( context: Context, message: String? = null, title: Int? = R.string.error, icon: Int? = null, buttons: List&lt;Button&gt;? = listOf(Button()) )</ID>
    <ID>ParameterListWrapping:BiometricAuthenticator.kt$BiometricAuthenticator$( private val activity: BaseActivity, private val config: AppConfig )</ID>
    <ID>ParameterListWrapping:DialogConfigBuilder.kt$( resourceProvider: ResourceProvider = this.requireResourceProvider(), block: DialogBuilder.() -&gt; Unit)</ID>
    <ID>ParameterListWrapping:DialogConfigBuilder.kt$(resourceProvider: ResourceProvider = this.requireResourceProvider(), block: DialogBuilder.() -&gt; Unit)</ID>
    <ID>ParameterListWrapping:FileUtils.kt$FileUtils$( context: Context, uri: Uri, selection: String?, selectionArgs: Array&lt;String&gt;?)</ID>
    <ID>ParameterListWrapping:FileUtils.kt$FileUtils$(context: Context, uri: Uri, selection: String?, selectionArgs: Array&lt;String&gt;?)</ID>
    <ID>ParameterListWrapping:GDriveFragment.kt$GDriveFragment$( inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle? )</ID>
    <ID>ParameterListWrapping:Hbks.kt$Hbks$( ciphertext: ByteArray?, key: SecretKey?, activity: FragmentActivity? = null, completed: (plaintext: String?, exception: Exception?) -&gt; Unit)</ID>
    <ID>ParameterListWrapping:Hbks.kt$Hbks$( plaintext: String?, key: SecretKey?, activity: FragmentActivity? = null, completed: (ciphertext: ByteArray?, exception: Exception?) -&gt; Unit)</ID>
    <ID>ParameterListWrapping:Hbks.kt$Hbks$(ciphertext: ByteArray?, key: SecretKey?, activity: FragmentActivity? = null, completed: (plaintext: String?, exception: Exception?) -&gt; Unit)</ID>
    <ID>ParameterListWrapping:Hbks.kt$Hbks$(plaintext: String?, key: SecretKey?, activity: FragmentActivity? = null, completed: (ciphertext: ByteArray?, exception: Exception?) -&gt; Unit)</ID>
    <ID>ParameterListWrapping:InternetArchiveLoginScreen.kt$( state: InternetArchiveLoginState, dispatch: Dispatch&lt;Action&gt; )</ID>
    <ID>ParameterListWrapping:Onboarding23SlideFragment.kt$Onboarding23SlideFragment$( inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle? )</ID>
    <ID>ParameterListWrapping:RequestBodyUtil.kt$( cancellable: () -&gt; Boolean, onProgress: (Long) -&gt; Unit = { }, onComplete: () -&gt; Unit = {})</ID>
    <ID>ParameterListWrapping:RequestBodyUtil.kt$(cancellable: () -&gt; Boolean, onProgress: (Long) -&gt; Unit = { }, onComplete: () -&gt; Unit = {})</ID>
    <ID>ParameterListWrapping:RequestBodyUtil.kt$RequestBodyUtil$( mediaType: MediaType?, inputStream: InputStream, contentLength: Long? = null, listener: RequestListener? )</ID>
    <ID>ParameterListWrapping:SnowbirdFileRepository.kt$ISnowbirdFileRepository$( groupKey: String, repoKey: String, forceRefresh: Boolean = false)</ID>
    <ID>ParameterListWrapping:SnowbirdFileRepository.kt$ISnowbirdFileRepository$(groupKey: String, repoKey: String, forceRefresh: Boolean = false)</ID>
    <ID>ParameterListWrapping:SnowbirdFileRepository.kt$SnowbirdFileRepository$( groupKey: String, repoKey: String, forceRefresh: Boolean)</ID>
    <ID>ParameterListWrapping:SnowbirdFileRepository.kt$SnowbirdFileRepository$(groupKey: String, repoKey: String, forceRefresh: Boolean)</ID>
    <ID>ParameterListWrapping:SpaceSetupSuccessFragment.kt$SpaceSetupSuccessFragment$( inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle? )</ID>
    <ID>ParameterListWrapping:WebDavFragment.kt$WebDavFragment$( inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle? )</ID>
    <ID>ParameterNaming:BaseDialog.kt$onCheckBoxStateChanged</ID>
    <ID>ParameterNaming:HomeScreen.kt$onFolderSelected</ID>
    <ID>ParameterNaming:MainDrawerContent.kt$onSelected</ID>
    <ID>ParameterNaming:SpaceListScreen.kt$onSpaceClicked</ID>
    <ID>ParameterNaming:SpaceSetupScreen.kt$onDwebClicked</ID>
    <ID>PrintStackTrace:SnowbirdFileRepository.kt$SnowbirdFileRepository$e</ID>
    <ID>PrintStackTrace:SnowbirdGroupRepository.kt$SnowbirdGroupRepository$e</ID>
    <ID>PrintStackTrace:SnowbirdService.kt$SnowbirdService$e</ID>
    <ID>PrintStackTrace:UnixSocketClient.kt$UnixSocketClient$e</ID>
    <ID>PrintStackTrace:VideoRequestHandler.kt$VideoRequestHandler$throwable</ID>
    <ID>RethrowCaughtException:UnixSocketClientUtilityExtensions.kt$throw e</ID>
    <ID>ReturnCount:BrowseFoldersFragment.kt$BrowseFoldersFragment$private fun addFolder(folder: Folder?)</ID>
    <ID>ReturnCount:Conduit.kt$Conduit$fun getProof(): Array&lt;out File&gt;</ID>
    <ID>ReturnCount:CreateNewFolderFragment.kt$CreateNewFolderFragment$private fun store()</ID>
    <ID>ReturnCount:EmptyableRecyclerView.kt$EmptyableRecyclerView$private fun findSuitableParent(): ViewGroup?</ID>
    <ID>ReturnCount:FileUtils.kt$FileUtils$@SuppressLint("NewAPI", "LogNotTimber") fun getPath(context: Context, uri: Uri): String?</ID>
    <ID>ReturnCount:FolderAdapter.kt$FolderAdapter.Companion$fun getColorOld(context: Context, highlight: Boolean): Int</ID>
    <ID>ReturnCount:GDriveConduit.kt$GDriveConduit$override suspend fun upload(): Boolean</ID>
    <ID>ReturnCount:Hbks.kt$Hbks$@RequiresApi(Build.VERSION_CODES.M) fun decrypt( ciphertext: ByteArray?, key: SecretKey?, activity: FragmentActivity? = null, completed: (plaintext: String?, exception: Exception?) -&gt; Unit )</ID>
    <ID>ReturnCount:Hbks.kt$Hbks$@RequiresApi(Build.VERSION_CODES.M) fun encrypt( plaintext: String?, key: SecretKey?, activity: FragmentActivity? = null, completed: (ciphertext: ByteArray?, exception: Exception?) -&gt; Unit )</ID>
    <ID>ReturnCount:Hbks.kt$Hbks$fun biometryType(context: Context): BiometryType</ID>
    <ID>ReturnCount:Hbks.kt$Hbks$fun deviceAvailablity(context: Context): Availability</ID>
    <ID>ReturnCount:MainActivity.kt$MainActivity$private fun importSharedMedia(imageIntent: Intent?)</ID>
    <ID>ReturnCount:Onboarding23FragmentStateAdapter.kt$Onboarding23FragmentStateAdapter$override fun createFragment(position: Int): Fragment</ID>
    <ID>ReturnCount:PasscodeRepository.kt$PasscodeRepository$fun isLockedOut(): Boolean</ID>
    <ID>ReturnCount:Picker.kt$Picker$fun import(context: Context, project: Project?, uri: Uri): Media?</ID>
    <ID>ReturnCount:UploadManagerActivity.kt$UploadManagerActivity$override fun onOptionsItemSelected(item: MenuItem): Boolean</ID>
    <ID>ReturnCount:UploadService.kt$UploadService$private fun isNetworkAvailable(requireUnmetered: Boolean): Boolean</ID>
    <ID>ReturnCount:Utility.kt$Utility$fun writeStreamToFile(input: InputStream?, file: File?): Boolean</ID>
    <ID>ReturnCount:WebDavConduit.kt$WebDavConduit$@Throws(IOException::class) private suspend fun uploadChunked(base: HttpUrl, path: List&lt;String&gt;, fileName: String): Boolean</ID>
    <ID>ReturnCount:WebDavConduit.kt$WebDavConduit$override suspend fun upload(): Boolean</ID>
    <ID>SpacingAroundColon:ApiError.kt$ApiError$:</ID>
    <ID>SpacingAroundColon:ConsentActivity.kt$ConsentActivity$:</ID>
    <ID>SpacingAroundColon:ContentPickerFragment.kt$ContentPickerFragment$:</ID>
    <ID>SpacingAroundColon:GeneralSettingsActivity.kt$GeneralSettingsActivity$:</ID>
    <ID>SpacingAroundColon:GeneralSettingsActivity.kt$GeneralSettingsActivity.Fragment$:</ID>
    <ID>SpacingAroundColon:Hbks.kt$Hbks.Availability.Enroll$:</ID>
    <ID>SpacingAroundColon:HomeActivity.kt$HomeActivity$:</ID>
    <ID>SpacingAroundColon:HomeScreen.kt$HomeScreenAction.AddMediaClicked$:</ID>
    <ID>SpacingAroundColon:JoinGroupResponse.kt$JoinGroupResponse$:</ID>
    <ID>SpacingAroundColon:PasscodeEntryViewModel.kt$PasscodeEntryScreenAction.OnSubmit$:</ID>
    <ID>SpacingAroundColon:PasscodeManager.kt$PasscodeManager$:</ID>
    <ID>SpacingAroundColon:PasscodeSetupViewModel.kt$PasscodeSetupUiAction.OnSubmit$:</ID>
    <ID>SpacingAroundColon:PreviewAdapter.kt$PreviewAdapter$:</ID>
    <ID>SpacingAroundColon:ProofModeSettingsActivity.kt$ProofModeSettingsActivity.Fragment$:</ID>
    <ID>SpacingAroundColon:RequestNameDTO.kt$MembershipRequest$:</ID>
    <ID>SpacingAroundColon:RequestNameDTO.kt$RequestName$:</ID>
    <ID>SpacingAroundColon:SaveClient.kt$SaveClient.OrbotException$:</ID>
    <ID>SpacingAroundColon:SettingsFragment.kt$SettingsFragment$:</ID>
    <ID>SpacingAroundColon:SnowbirdCreateGroupFragment.kt$SnowbirdCreateGroupFragment$:</ID>
    <ID>SpacingAroundColon:SnowbirdError.kt$SnowbirdError$:</ID>
    <ID>SpacingAroundColon:SnowbirdFileItem.kt$SnowbirdFileItem$:</ID>
    <ID>SpacingAroundColon:SnowbirdGroupOverviewFragment.kt$SnowbirdGroupOverviewFragment$:</ID>
    <ID>SpacingAroundColon:SnowbirdJoinGroupFragment.kt$SnowbirdJoinGroupFragment$:</ID>
    <ID>SpacingAroundColon:SnowbirdRepoListAdapter.kt$SnowbirdRepoListAdapter$:</ID>
    <ID>SpacingAroundColon:SnowbirdRepoListFragment.kt$SnowbirdRepoListFragment$:</ID>
    <ID>SpacingAroundColon:SnowbirdShareFragment.kt$SnowbirdShareFragment$:</ID>
    <ID>SpacingAroundColon:SwipeToDeleteCallback.kt$SwipeToDeleteCallback$:</ID>
    <ID>SpacingAroundColon:UnixSocketAPI.kt$UnixSocketAPI$:</ID>
    <ID>SpacingAroundColon:WebDavSetupLicenseFragment.kt$WebDavSetupLicenseFragment$:</ID>
    <ID>SpacingAroundKeyword:BrowseFoldersViewModel.kt$BrowseFoldersViewModel$else</ID>
    <ID>SpacingAroundKeyword:Context.kt$catch</ID>
    <ID>SpacingAroundKeyword:Drawable.kt$else</ID>
    <ID>SpacingAroundKeyword:DrawableExtensions.kt$else</ID>
    <ID>SpacingAroundKeyword:GDriveFragment.kt$GDriveFragment$if</ID>
    <ID>SpacingAroundKeyword:Hbks.kt$Hbks$catch</ID>
    <ID>SpacingAroundKeyword:Hbks.kt$Hbks$else</ID>
    <ID>SpacingAroundKeyword:InternetArchiveDetailsViewModel.kt$InternetArchiveDetailsViewModel$when</ID>
    <ID>SpacingAroundKeyword:PackageManager.kt$else</ID>
    <ID>SpacingAroundKeyword:Picker.kt$Picker$else</ID>
    <ID>SpacingAroundKeyword:ProofModeHelper.kt$ProofModeHelper$catch</ID>
    <ID>SpacingAroundKeyword:ProofModeHelper.kt$ProofModeHelper$else</ID>
    <ID>SpacingAroundKeyword:ReviewActivity.kt$ReviewActivity$else</ID>
    <ID>SpacingAroundKeyword:ReviewActivity.kt$ReviewActivity.&lt;no name provided&gt;$else</ID>
    <ID>SpacingAroundKeyword:SaveClient.kt$SaveClient.Companion$else</ID>
    <ID>SpacingAroundKeyword:SaveClient.kt$SaveClient.Companion.&lt;no name provided&gt;$else</ID>
    <ID>SpacingAroundKeyword:SpaceAdapter.kt$SpaceAdapter$else</ID>
    <ID>SpacingAroundKeyword:SpaceDrawerAdapter.kt$SpaceDrawerAdapter.SpaceViewHolder$if</ID>
    <ID>SpacingAroundKeyword:UploadManagerActivity.kt$UploadManagerActivity$else</ID>
    <ID>SpacingAroundKeyword:UploadManagerActivity.kt$UploadManagerActivity.&lt;no name provided&gt;$else</ID>
    <ID>SpacingAroundKeyword:Util.kt$Util$else</ID>
    <ID>SpacingAroundKeyword:Utility.kt$Utility$catch</ID>
    <ID>SpacingAroundKeyword:Utility.kt$Utility$finally</ID>
    <ID>SpacingAroundKeyword:View.kt$ViewHelper$else</ID>
    <ID>SpacingAroundKeyword:View.kt$else</ID>
    <ID>SpacingAroundKeyword:ViewExtension.kt$ViewHelper$else</ID>
    <ID>SpacingAroundKeyword:ViewExtension.kt$else</ID>
    <ID>SpacingAroundKeyword:WebDavConduit.kt$WebDavConduit$catch</ID>
    <ID>SpacingAroundKeyword:WebDavFragment.kt$WebDavFragment.&lt;no name provided&gt;$if</ID>
    <ID>SpacingAroundKeyword:WebDavSetupLicenseFragment.kt$WebDavSetupLicenseFragment$if</ID>
    <ID>SpacingAroundOperators:MediaCacheScreen.kt$=</ID>
    <ID>SpacingAroundOperators:PasscodeSetupViewModel.kt$PasscodeSetupViewModel$-&gt;</ID>
    <ID>SpacingAroundParens:FileUploadResult.kt$FileUploadResult$(</ID>
    <ID>SpacingAroundParens:Picker.kt$Picker$(</ID>
    <ID>SpacingAroundParens:ReviewActivity.kt$ReviewActivity$(</ID>
    <ID>SpacingAroundParens:SnowbirdConduit.kt$SnowbirdConduit$(</ID>
    <ID>SpacingAroundParens:SnowbirdFileListAdapter.kt$SnowbirdFileListAdapter$(</ID>
    <ID>SpacingAroundParens:WebDAVModel.kt$BackendCapabilities$(</ID>
    <ID>SpacingAroundParens:WebDAVModel.kt$Data$(</ID>
    <ID>SpacingAroundParens:WebDAVModel.kt$Meta$(</ID>
    <ID>SpacingAroundParens:WebDAVModel.kt$Ocs$(</ID>
    <ID>SpacingAroundParens:WebDAVModel.kt$Quota$(</ID>
    <ID>SpacingAroundParens:WebDAVModel.kt$WebDAVModel$(</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:BasicAuthInterceptor.kt$BasicAuthInterceptor$@Throws(IOException::class) override fun intercept(chain: Interceptor.Chain): Response</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:Hbks.kt$Hbks.Availability$Enroll : Availability</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:Media.kt$Media.Status$DeleteRemote : Status</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:Media.kt$Media.Status$Published : Status</ID>
    <ID>SpacingBetweenDeclarationsWithAnnotations:VideoRequestHandler.kt$VideoRequestHandler.Companion$@Throws(Throwable::class) fun retrieveVideoFrameFromVideo(context: Context?, videoPath: Uri?): Bitmap?</ID>
    <ID>SpacingBetweenDeclarationsWithComments:Prefs.kt$Prefs$// private const val USE_NEXTCLOUD_CHUNKING = "upload_nextcloud_chunks"</ID>
    <ID>SpacingBetweenDeclarationsWithComments:UnixSocketClient.kt$UnixSocketClient$// val socketPath: String = File(context.filesDir, "rust_server.sock").absolutePath</ID>
    <ID>SpreadOperator:GDriveConduit.kt$GDriveConduit.Companion$( GoogleSignIn.getLastSignedInAccount(context), *SCOPES )</ID>
    <ID>SpreadOperator:GDriveFragment.kt$GDriveFragment$( requireActivity(), REQUEST_CODE_GOOGLE_AUTH, GoogleSignIn.getLastSignedInAccount(requireActivity()), *GDriveConduit.SCOPES )</ID>
    <ID>StringTemplate:Hbks.kt$Hbks$${algorithm}</ID>
    <ID>StringTemplate:Hbks.kt$Hbks$${blockMode}</ID>
    <ID>StringTemplate:Hbks.kt$Hbks$${padding}</ID>
    <ID>StringTemplate:MainMediaViewHolder.kt$MainMediaViewHolder$${progressValue}</ID>
    <ID>StringTemplate:MediaViewHolder.kt$MediaViewHolder$${progressValue}</ID>
    <ID>StringTemplate:PreviewViewHolder.kt$PreviewViewHolder$${progressValue}</ID>
    <ID>StringTemplate:Utility.kt$Utility$${appId}</ID>
    <ID>SwallowedException:Context.kt$e: ActivityNotFoundException</ID>
    <ID>SwallowedException:PackageManager.kt$e: PackageManager.NameNotFoundException</ID>
    <ID>SwallowedException:ProofModeSettingsActivity.kt$ProofModeSettingsActivity.Companion$ioe: IOException</ID>
    <ID>SwallowedException:RestEndpointTask.kt$RestEndpointTask$e: Exception</ID>
    <ID>SwallowedException:SnowbirdFileItem.kt$SnowbirdFileItem.Companion$e: SQLiteException</ID>
    <ID>SwallowedException:SnowbirdFileViewModel.kt$SnowbirdFileViewModel$e: TimeoutCancellationException</ID>
    <ID>SwallowedException:SnowbirdGroup.kt$SnowbirdGroup.Companion$e: SQLiteException</ID>
    <ID>SwallowedException:SnowbirdGroupViewModel.kt$SnowbirdGroupViewModel$e: TimeoutCancellationException</ID>
    <ID>SwallowedException:SnowbirdRepoViewModel.kt$SnowbirdRepoViewModel$e: TimeoutCancellationException</ID>
    <ID>SwallowedException:UnixSocketClient.kt$UnixSocketClient$e: Exception</ID>
    <ID>SwallowedException:UnixSocketClientFileExtensions.kt$e: Exception</ID>
    <ID>SwallowedException:VideoRequestHandler.kt$VideoRequestHandler.Companion$e: Exception</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:Hbks.kt$Hbks$NullPointerException()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:Onboarding23FragmentStateAdapter.kt$Onboarding23FragmentStateAdapter$IndexOutOfBoundsException()</ID>
    <ID>ThrowsCount:UnixSocketClient.kt$UnixSocketClient$fun &lt;REQUEST : SerializableMarker, RESPONSE : Any&gt; sendRequestInternal( endpoint: String, method: HttpMethod, body: REQUEST?, serialize: (REQUEST) -&gt; String, deserialize: (String) -&gt; RESPONSE ): RESPONSE</ID>
    <ID>TooGenericExceptionCaught:BrowseFoldersViewModel.kt$BrowseFoldersViewModel$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:GDriveConduit.kt$GDriveConduit$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Hbks.kt$Hbks$e: Exception</ID>
    <ID>TooGenericExceptionCaught:IaConduit.kt$IaConduit$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:MainMediaViewHolder.kt$MainMediaViewHolder$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:MediaViewHolder.kt$MediaViewHolder$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:Picker.kt$Picker$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PreviewViewHolder.kt$PreviewViewHolder$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:ProofModeHelper.kt$ProofModeHelper$e: Exception</ID>
    <ID>TooGenericExceptionCaught:RestEndpointTask.kt$RestEndpointTask$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SnowbirdFileRepository.kt$SnowbirdFileRepository$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SnowbirdGroupRepository.kt$SnowbirdGroupRepository$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SnowbirdRepoRepository.kt$SnowbirdRepoRepository$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SnowbirdService.kt$SnowbirdService$e: Exception</ID>
    <ID>TooGenericExceptionCaught:StringExtensions.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SuspendableExtensions.kt$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:UnixSocketClient.kt$UnixSocketClient$e: Exception</ID>
    <ID>TooGenericExceptionCaught:UnixSocketClientFileExtensions.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:VideoRequestHandler.kt$VideoRequestHandler$throwable: Throwable</ID>
    <ID>TooGenericExceptionCaught:VideoRequestHandler.kt$VideoRequestHandler.Companion$e: Exception</ID>
    <ID>TooGenericExceptionCaught:WebDavConduit.kt$WebDavConduit$e: Throwable</ID>
    <ID>TooGenericExceptionThrown:Conduit.kt$Conduit$throw Exception("Cancelled")</ID>
    <ID>TooGenericExceptionThrown:GDriveConduit.kt$GDriveConduit$throw Exception("Cancelled")</ID>
    <ID>TooGenericExceptionThrown:GDriveConduit.kt$GDriveConduit.Companion$throw Exception("could not create folders $destinationPath")</ID>
    <ID>TooGenericExceptionThrown:IaConduit.kt$IaConduit$throw RuntimeException("${result.code}: ${result.message}")</ID>
    <ID>TooGenericExceptionThrown:VideoRequestHandler.kt$VideoRequestHandler.Companion$throw Throwable("Exception in retrieveVideoFrameFromVideo(String videoPath)" + e.message)</ID>
    <ID>TooGenericExceptionThrown:WebDavConduit.kt$WebDavConduit$throw Exception("Cancelled")</ID>
    <ID>TooManyFunctions:AppLogger.kt$AppLogger</ID>
    <ID>TooManyFunctions:Conduit.kt$Conduit</ID>
    <ID>TooManyFunctions:FoldersActivity.kt$FoldersActivity : BaseActivityFolderAdapterListener</ID>
    <ID>TooManyFunctions:HomeActivity.kt$HomeActivity : FragmentActivity</ID>
    <ID>TooManyFunctions:MainActivity.kt$MainActivity : BaseActivitySpaceDrawerAdapterListenerFolderDrawerAdapterListener</ID>
    <ID>TooManyFunctions:MainMediaAdapter.kt$MainMediaAdapter : Adapter</ID>
    <ID>TooManyFunctions:MainMediaFragment.kt$MainMediaFragment : Fragment</ID>
    <ID>TooManyFunctions:MainMediaScreen.kt$net.opendasharchive.openarchive.features.main.ui.MainMediaScreen.kt</ID>
    <ID>TooManyFunctions:MediaAdapter.kt$MediaAdapter : Adapter</ID>
    <ID>TooManyFunctions:PasscodeRepository.kt$PasscodeRepository</ID>
    <ID>TooManyFunctions:PreviewActivity.kt$PreviewActivity : BaseActivityOnClickListenerListener</ID>
    <ID>TooManyFunctions:SnowbirdCreateGroupFragment.kt$SnowbirdCreateGroupFragment : BaseFragment</ID>
    <ID>TooManyFunctions:SnowbirdFileListFragment.kt$SnowbirdFileListFragment : BaseFragment</ID>
    <ID>TooManyFunctions:SnowbirdGroupListFragment.kt$SnowbirdGroupListFragment : BaseFragment</ID>
    <ID>TooManyFunctions:SnowbirdJoinGroupFragment.kt$SnowbirdJoinGroupFragment : BaseFragment</ID>
    <ID>TooManyFunctions:SnowbirdRepoListFragment.kt$SnowbirdRepoListFragment : BaseFragment</ID>
    <ID>TooManyFunctions:SnowbirdService.kt$SnowbirdService : Service</ID>
    <ID>TooManyFunctions:WebDavFragment.kt$WebDavFragment : BaseFragment</ID>
    <ID>UnusedParameter:AppLogger.kt$AppLogger$context: Context</ID>
    <ID>UnusedParameter:AppLogger.kt$AppLogger$initDebugger: Boolean</ID>
    <ID>UnusedParameter:BrowseFolderScreen.kt$onClick: () -&gt; Unit</ID>
    <ID>UnusedParameter:BrowseFoldersViewModel.kt$BrowseFoldersViewModel$space: Space</ID>
    <ID>UnusedParameter:HomeActivity.kt$HomeActivity$folderId: Long</ID>
    <ID>UnusedParameter:HomeScreen.kt$onAddMedia: (AddMediaType) -&gt; Unit</ID>
    <ID>UnusedParameter:HomeScreen.kt$onFolderSelected: (Long) -&gt; Unit</ID>
    <ID>UnusedParameter:HomeScreen.kt$onNewFolder: () -&gt; Unit</ID>
    <ID>UnusedParameter:InternetArchiveHeader.kt$titleSize: TextUnit = 18.sp</ID>
    <ID>UnusedParameter:InternetArchiveLoginScreen.kt$enabled: Boolean = true</ID>
    <ID>UnusedParameter:MainActivity.kt$MainActivity$count: Int</ID>
    <ID>UnusedParameter:MainDrawerContent.kt$isSelected: Boolean = false</ID>
    <ID>UnusedParameter:MainDrawerContent.kt$onSelected: () -&gt; Unit</ID>
    <ID>UnusedParameter:MainDrawerContent.kt$project: Project</ID>
    <ID>UnusedParameter:MainMediaAdapterTest.kt$progress: Int? = 0</ID>
    <ID>UnusedParameter:PasscodeEntryScreen.kt$onExit: () -&gt; Unit</ID>
    <ID>UnusedParameter:SnowbirdBridge.kt$SnowbirdBridge.Companion$message: String</ID>
    <ID>UnusedParameter:Space.kt$Space$style: IconStyle = IconStyle.SOLID</ID>
    <ID>UnusedParameter:Utility.kt$Utility$appId: String</ID>
    <ID>UnusedPrivateMember:AddFolderScreen.kt$@Preview @Preview(uiMode = UI_MODE_NIGHT_YES) @Composable private fun AddFolderScreenPreview()</ID>
    <ID>UnusedPrivateMember:BaseButton.kt$@Preview @Preview(uiMode = UI_MODE_NIGHT_YES) @Composable private fun CustomButtonPreview()</ID>
    <ID>UnusedPrivateMember:BaseButton.kt$@Preview @Preview(uiMode = UI_MODE_NIGHT_YES) @Composable private fun CustomDestructiveButtonPreview()</ID>
    <ID>UnusedPrivateMember:BaseButton.kt$@Preview @Preview(uiMode = UI_MODE_NIGHT_YES) @Composable private fun CustomNeutralButtonPreview()</ID>
    <ID>UnusedPrivateMember:BaseDialog.kt$@Preview @Preview(uiMode = UI_MODE_NIGHT_YES) @Composable private fun BaseDialogPreview()</ID>
    <ID>UnusedPrivateMember:BaseDialog.kt$@Preview @Preview(uiMode = UI_MODE_NIGHT_YES) @Composable private fun ErrorDialogPreview()</ID>
    <ID>UnusedPrivateMember:BaseDialog.kt$@Preview @Preview(uiMode = UI_MODE_NIGHT_YES) @Composable private fun WarningDialogPreview()</ID>
    <ID>UnusedPrivateMember:BrowseFolderScreen.kt$@Preview @Composable private fun BrowseFolderScreenPreview()</ID>
    <ID>UnusedPrivateMember:ExpandableSpaceList.kt$@Preview(uiMode = UI_MODE_NIGHT_YES) @Composable private fun ExpandableSpaceListPreview()</ID>
    <ID>UnusedPrivateMember:FolderOptionsPopup.kt$@Preview @Composable private fun FolderOptionsPopupPreview()</ID>
    <ID>UnusedPrivateMember:HomeScreen.kt$@Preview @Composable private fun MainContentPreview()</ID>
    <ID>UnusedPrivateMember:IaConduit.kt$IaConduit$@Throws(IOException::class) private fun OkHttpClient.uploadProofFiles(uploadFile: File)</ID>
    <ID>UnusedPrivateMember:InternetArchiveDetailsScreen.kt$@Composable @Preview(showBackground = true) @Preview(showBackground = true, uiMode = android.content.res.Configuration.UI_MODE_NIGHT_YES) private fun InternetArchiveScreenPreview()</ID>
    <ID>UnusedPrivateMember:InternetArchiveHeader.kt$@Composable @Preview(showBackground = true) @Preview(showBackground = true, uiMode = android.content.res.Configuration.UI_MODE_NIGHT_YES) private fun InternetArchiveHeaderPreview()</ID>
    <ID>UnusedPrivateMember:InternetArchiveLoginScreen.kt$@Composable @Preview @Preview(showBackground = true, uiMode = android.content.res.Configuration.UI_MODE_NIGHT_YES) private fun InternetArchiveLoginPreview()</ID>
    <ID>UnusedPrivateMember:MainDrawerContent.kt$@Preview @Composable private fun MainDrawerContentPreview()</ID>
    <ID>UnusedPrivateMember:MainMediaAdapter.kt$MainMediaAdapter$private fun selectView(view: View)</ID>
    <ID>UnusedPrivateMember:MainMediaScreen.kt$private fun deleteMediaItem(sections: MutableList&lt;CollectionSection&gt;, media: Media)</ID>
    <ID>UnusedPrivateMember:MainMediaScreen.kt$private fun deleteSelected(sections: MutableList&lt;CollectionSection&gt;, context: Context)</ID>
    <ID>UnusedPrivateMember:NumericKeypad.kt$@Preview @Composable private fun NumericKeypadPreview()</ID>
    <ID>UnusedPrivateMember:PasscodeDots.kt$@Preview(uiMode = Configuration.UI_MODE_NIGHT_YES) @Preview @Composable private fun PasswordDotsPreview()</ID>
    <ID>UnusedPrivateMember:PasscodeEntryScreen.kt$@Preview(uiMode = Configuration.UI_MODE_NIGHT_YES) @Preview @Composable private fun PasscodeEntryScreenPreview()</ID>
    <ID>UnusedPrivateMember:PasscodeSetupScreen.kt$@Preview(uiMode = UI_MODE_NIGHT_YES) @Preview @Composable private fun PasscodeSetupScreenPreview()</ID>
    <ID>UnusedPrivateMember:PrimaryButton.kt$@Preview @Composable private fun PrimaryButtonPreview()</ID>
    <ID>UnusedPrivateMember:ProofModeScreen.kt$@Preview @Composable private fun ProofModeScreenPreview()</ID>
    <ID>UnusedPrivateMember:ProofModeSettingsActivity.kt$ProofModeSettingsActivity.Companion$private fun shareKey(activity: Activity)</ID>
    <ID>UnusedPrivateMember:ServerOptionItem.kt$@Preview @Composable private fun ServerOptionItemPreview()</ID>
    <ID>UnusedPrivateMember:SettingsScreen.kt$@Preview @Composable private fun SettingsScreenPreview()</ID>
    <ID>UnusedPrivateMember:SpaceListScreen.kt$@Preview(uiMode = UI_MODE_NIGHT_YES) @Composable private fun SpaceListScreenPreview()</ID>
    <ID>UnusedPrivateMember:SpaceSetupScreen.kt$@Preview @Composable private fun SpaceSetupScreenPreview()</ID>
    <ID>UnusedPrivateProperty:BrowseFolderScreen.kt$val navController = LocalView.current.findNavController()</ID>
    <ID>UnusedPrivateProperty:Colors.kt$private val c23_grey_50 = Color(0xff777979)</ID>
    <ID>UnusedPrivateProperty:Colors.kt$private val c23_nav_drawer_night = Color(0xff101010)</ID>
    <ID>UnusedPrivateProperty:Colors.kt$private val c23_teal_10 = Color(0xff001b19) // v=10.6 --&gt;</ID>
    <ID>UnusedPrivateProperty:Colors.kt$private val c23_teal_100 = Color(0xff00ffeb) // h=175,3 s=100 v=100 --&gt;</ID>
    <ID>UnusedPrivateProperty:Colors.kt$private val c23_teal_30 = Color(0xff004e48) // v=30.6 --&gt;</ID>
    <ID>UnusedPrivateProperty:Colors.kt$private val c23_teal_50 = Color(0xff008177) // v=50.6 --&gt;</ID>
    <ID>UnusedPrivateProperty:Colors.kt$private val c23_teal_60 = Color(0xff009b8f) // v=60.6 --&gt;</ID>
    <ID>UnusedPrivateProperty:Colors.kt$private val c23_teal_80 = Color(0xff00cebe) // v=80.6 --&gt;</ID>
    <ID>UnusedPrivateProperty:Colors.kt$private val c23_teal_90 = Color(0xff00e7d5) // v=90.6 --&gt;</ID>
    <ID>UnusedPrivateProperty:Colors.kt$private val darkPrimary = Color(0xff000A0A)</ID>
    <ID>UnusedPrivateProperty:GDriveConduit.kt$GDriveConduit$val response = request.execute()</ID>
    <ID>UnusedPrivateProperty:HomeActivity.kt$HomeActivity$private val folderResultLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result -&gt; if (result.resultCode == RESULT_OK) { val selectedFolderId: Long? = result.data?.getLongExtra("SELECTED_FOLDER_ID", -1) if (selectedFolderId != null &amp;&amp; selectedFolderId &gt; -1) { navigateToFolder(selectedFolderId) } } }</ID>
    <ID>UnusedPrivateProperty:HomeActivity.kt$HomeActivity$private val mNewFolderResultLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { if (it.resultCode == RESULT_OK) { // TODO: Refresh projects in MainViewModel } }</ID>
    <ID>UnusedPrivateProperty:IaConduit.kt$IaConduit.Companion$private const val ARCHIVE_DETAILS_ENDPOINT = "https://archive.org/details/"</ID>
    <ID>UnusedPrivateProperty:MainActivity.kt$MainActivity$private var currentSelectionCount = 0</ID>
    <ID>UnusedPrivateProperty:MainMediaAdapter.kt$MainMediaAdapter.Companion$private const val PAYLOAD_PROGRESS = "progress"</ID>
    <ID>UnusedPrivateProperty:MainMediaAdapter.kt$MainMediaAdapter.Companion$private const val PAYLOAD_SELECTION = "selection"</ID>
    <ID>UnusedPrivateProperty:MainMediaScreen.kt$var isSelecting by remember { mutableStateOf(false) }</ID>
    <ID>UnusedPrivateProperty:MainMediaScreen.kt$var showDeleteDialog by remember { mutableStateOf(false) }</ID>
    <ID>UnusedPrivateProperty:NumericKeypad.kt$val borderColor by animateColorAsState( targetValue = when { isPressed -&gt; when (label) { "delete" -&gt; colorResource(R.color.red_bg).copy(alpha = 0.7f) "submit" -&gt; MaterialTheme.colorScheme.tertiary.copy(alpha = 0.7f) else -&gt; MaterialTheme.colorScheme.primary.copy(alpha = 0.5f) } else -&gt; when (label) { "delete" -&gt; colorResource(R.color.red_bg).copy(alpha = 0.5f) "submit" -&gt; MaterialTheme.colorScheme.tertiary.copy(alpha = 0.5f) else -&gt; Color.Transparent } }, animationSpec = spring(), label = "" )</ID>
    <ID>UnusedPrivateProperty:ProofModeScreen.kt$val permissionLauncher = rememberLauncherForActivityResult( contract = ActivityResultContracts.RequestPermission() ) { isGranted -&gt; if (!isGranted) { Toast.makeText(context, "Please allow all permissions", Toast.LENGTH_LONG).show() val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS) val uri = Uri.fromParts("package", context.packageName, null) intent.data = uri context.startActivity(intent) } }</ID>
    <ID>UnusedPrivateProperty:ProofModeScreen.kt$val uriHandler = LocalUriHandler.current</ID>
    <ID>UnusedPrivateProperty:SectionViewHolder.kt$SectionViewHolder.Companion$private val mDf = DateFormat.getDateTimeInstance()</ID>
    <ID>UnusedPrivateProperty:SnowbirdFragment.kt$SnowbirdFragment$private val CANNED_URI = "save+dweb::?dht=82fd345d484393a96b6e0c5d5e17a85a61c9184cc5a3311ab069d6efa0bf1410&amp;enc=6fa27396fe298f92c91013ac54d8f316c2d45dc3bed0edec73078040aa10feed&amp;pk=f4b404d294817cf11ea7f8ef7231626e03b74f6fafe3271b53918608afa82d12&amp;sk=5482a8f490081be684fbadb8bde7f0a99bab8acdcf1ec094826f0f18e327e399"</ID>
    <ID>UnusedPrivateProperty:SnowbirdFragment.kt$SnowbirdFragment$private var canNavigate = false</ID>
    <ID>UnusedPrivateProperty:SnowbirdGroupRepository.kt$SnowbirdGroupRepository$val shouldFetchFromNetwork = forceRefresh || currentTime - lastFetchTime &gt; cacheValidityPeriod</ID>
    <ID>UnusedPrivateProperty:UnixSocketClient.kt$UnixSocketClient$context: Context</ID>
    <ID>VariableNaming:SnowbirdFragment.kt$SnowbirdFragment$private val CANNED_URI = "save+dweb::?dht=82fd345d484393a96b6e0c5d5e17a85a61c9184cc5a3311ab069d6efa0bf1410&amp;enc=6fa27396fe298f92c91013ac54d8f316c2d45dc3bed0edec73078040aa10feed&amp;pk=f4b404d294817cf11ea7f8ef7231626e03b74f6fafe3271b53918608afa82d12&amp;sk=5482a8f490081be684fbadb8bde7f0a99bab8acdcf1ec094826f0f18e327e399"</ID>
    <ID>ViewModelForwarding:HomeScreen.kt$HomeScreen( viewModel = viewModel, onExit = onExit, onNewFolder = onNewFolder, onFolderSelected = onFolderSelected, onAddMedia = onAddMedia, onNavigateToCache = { navController.navigate(MediaCacheRoute) } )</ID>
    <ID>WildcardImport:BadgeDrawable.kt$import android.graphics.*</ID>
    <ID>WildcardImport:CleanInsightsManager.kt$import org.cleaninsights.sdk.*</ID>
    <ID>WildcardImport:Hbks.kt$import java.security.*</ID>
    <ID>WildcardImport:Hbks.kt$import javax.crypto.*</ID>
    <ID>WildcardImport:IaConduit.kt$import okhttp3.*</ID>
    <ID>WildcardImport:MediaCacheScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:RequestBodyUtil.kt$import java.io.*</ID>
    <ID>WildcardImport:UploadService.kt$import android.app.*</ID>
    <ID>Wrapping:BaseDialog.kt$(</ID>
    <ID>Wrapping:BrowseFoldersFragment.kt$BrowseFoldersFragment$(</ID>
    <ID>Wrapping:BrowseFoldersFragment.kt$BrowseFoldersFragment$(RESULT_OK, Intent().apply { putExtra(AddFolderActivity.EXTRA_FOLDER_ID, project.id) })</ID>
    <ID>Wrapping:CleanInsightsManager.kt$CleanInsightsManager$(</ID>
    <ID>Wrapping:CleanInsightsManager.kt$CleanInsightsManager$(CI_CAMPAIGN, object : ConsentRequestUi { override fun show( campaignId: String, campaign: Campaign, complete: ConsentRequestUiComplete ) { mCompleted = completed context.startActivity(Intent(context, ConsentActivity::class.java)) } override fun show(feature: Feature, complete: ConsentRequestUiComplete) { complete(true) } }, completed)</ID>
    <ID>Wrapping:ConsentActivity.kt$ConsentActivity$(</ID>
    <ID>Wrapping:Drawable.kt$(</ID>
    <ID>Wrapping:EditFolderActivity.kt$EditFolderActivity$(</ID>
    <ID>Wrapping:EditFolderActivity.kt$EditFolderActivity$(this, R.string.action_remove_project, R.string.remove_from_app, buttons = listOf( AlertHelper.positiveButton(R.string.remove) { _, _ -&gt; mProject.delete() finish() }, AlertHelper.negativeButton()))</ID>
    <ID>Wrapping:FileUtils.kt$FileUtils$(</ID>
    <ID>Wrapping:GDriveActivity.kt$GDriveActivity$(</ID>
    <ID>Wrapping:GDriveActivity.kt$GDriveActivity$(this, R.string.are_you_sure_you_want_to_remove_this_server_from_the_app, R.string.remove_from_app, buttons = listOf( AlertHelper.positiveButton(R.string.remove) { _, _ -&gt; // delete sign-in from database space.delete() // google logout val googleSignInClient = GoogleSignIn.getClient(applicationContext, GoogleSignInOptions.DEFAULT_SIGN_IN) googleSignInClient.revokeAccess().addOnCompleteListener { googleSignInClient.signOut() } // leave activity Space.navigate(this) }, AlertHelper.negativeButton() ))</ID>
    <ID>Wrapping:GDriveFragment.kt$GDriveFragment$( getString( R.string.gdrive_disclaimer_1, getString(R.string.app_name), getString(R.string.google_name), getString(R.string.gdrive_sudp_name), ), HtmlCompat.FROM_HTML_MODE_COMPACT )</ID>
    <ID>Wrapping:Hbks.kt$Hbks$(</ID>
    <ID>Wrapping:Hbks.kt$Hbks$(activity, object : BiometricPrompt.AuthenticationCallback() { override fun onAuthenticationError( errorCode: Int, errString: CharSequence ) { super.onAuthenticationError(errorCode, errString) completed(false) } override fun onAuthenticationSucceeded(result: BiometricPrompt.AuthenticationResult) { super.onAuthenticationSucceeded(result) completed(true) } override fun onAuthenticationFailed() { super.onAuthenticationFailed() completed(false) } })</ID>
    <ID>Wrapping:InternetArchiveActivity.kt$InternetArchiveActivity$(</ID>
    <ID>Wrapping:MainMediaScreen.kt${ /* no op */ }</ID>
    <ID>Wrapping:Media.kt$Media.Companion$(</ID>
    <ID>Wrapping:MediaAdapter.kt$MediaAdapter$( it, it.getString(R.string.upload_unsuccessful_description), R.string.upload_unsuccessful, R.drawable.ic_error, listOf( AlertHelper.positiveButton(R.string.retry) { _, _ -&gt; media[pos].apply { sStatus = Media.Status.Queued statusMessage = "" save() BroadcastManager.postChange(it, collectionId, id) } UploadService.startUploadService(it) }, AlertHelper.negativeButton(R.string.remove) { _, _ -&gt; deleteItem(pos) }, AlertHelper.neutralButton() ) )</ID>
    <ID>Wrapping:MediaCacheScreen.kt$(</ID>
    <ID>Wrapping:Onboarding23InstructionsActivity.kt$Onboarding23InstructionsActivity$(</ID>
    <ID>Wrapping:Onboarding23InstructionsActivity.kt$Onboarding23InstructionsActivity$(this, object : OnBackPressedCallback(true) { override fun handleOnBackPressed() { if (isFirstPage()) { finish() } else { mBinding.viewPager.currentItem-- } } })</ID>
    <ID>Wrapping:PasscodeSetupActivity.kt$PasscodeSetupActivity$(</ID>
    <ID>Wrapping:PasscodeSetupActivity.kt$PasscodeSetupActivity$(RESULT_OK, Intent().apply { putExtra(EXTRA_PASSCODE_ENABLED, true) })</ID>
    <ID>Wrapping:Picker.kt$Picker$(</ID>
    <ID>Wrapping:Picker.kt$Picker$(activity, arrayOf( Manifest.permission.READ_MEDIA_IMAGES, Manifest.permission.READ_MEDIA_VIDEO ))</ID>
    <ID>Wrapping:ProofModeHelper.kt$ProofModeHelper$(</ID>
    <ID>Wrapping:RequestBodyUtil.kt$</ID>
    <ID>Wrapping:RequestBodyUtil.kt$RequestBodyUtil$(</ID>
    <ID>Wrapping:SnowbirdFileItem.kt$SnowbirdFileItem.Companion$(</ID>
    <ID>Wrapping:SnowbirdFileListFragment.kt$SnowbirdFileListFragment$(</ID>
    <ID>Wrapping:SnowbirdFileListFragment.kt$SnowbirdFileListFragment$(object : MenuProvider { override fun onCreateMenu(menu: Menu, menuInflater: MenuInflater) { menuInflater.inflate(R.menu.menu_snowbird, menu) } override fun onMenuItemSelected(menuItem: MenuItem): Boolean { return when (menuItem.itemId) { R.id.action_add -&gt; { Timber.d("Adde!") openFilePicker() true } else -&gt; false } } }, viewLifecycleOwner, Lifecycle.State.RESUMED)</ID>
    <ID>Wrapping:SnowbirdGroupListFragment.kt$SnowbirdGroupListFragment$(</ID>
    <ID>Wrapping:SnowbirdGroupListFragment.kt$SnowbirdGroupListFragment$(object : MenuProvider { override fun onCreateMenu(menu: Menu, menuInflater: MenuInflater) { menuInflater.inflate(R.menu.menu_snowbird, menu) } override fun onMenuItemSelected(menuItem: MenuItem): Boolean { return when (menuItem.itemId) { R.id.action_add -&gt; { if (isJetpackNavigation) { val action = SnowbirdGroupListFragmentDirections.actionFragmentSnowbirdGroupListToFragmentSnowbirdCreateGroup() findNavController().navigate(action) } else { setFragmentResult( RESULT_REQUEST_KEY, bundleOf(RESULT_BUNDLE_NAVIGATION_KEY to RESULT_VAL_RAVEN_CREATE_GROUP_SCREEN) ) } true } else -&gt; false } } }, viewLifecycleOwner, Lifecycle.State.RESUMED)</ID>
    <ID>Wrapping:SnowbirdGroupRepository.kt$SnowbirdGroupRepository$(</ID>
    <ID>Wrapping:SnowbirdRepo.kt$SnowbirdRepo.Companion$(</ID>
    <ID>Wrapping:SnowbirdRepoListFragment.kt$SnowbirdRepoListFragment$(</ID>
    <ID>Wrapping:SnowbirdRepoListFragment.kt$SnowbirdRepoListFragment$(object : MenuProvider { override fun onCreateMenu(menu: Menu, menuInflater: MenuInflater) { menuInflater.inflate(R.menu.menu_snowbird, menu) } override fun onMenuItemSelected(menuItem: MenuItem): Boolean { return when (menuItem.itemId) { R.id.action_add -&gt; { Utility.showMaterialWarning( context = requireContext(), message = "Feature not implemented yet.", positiveButtonText = "OK" ) true } else -&gt; false } } }, viewLifecycleOwner, Lifecycle.State.RESUMED)</ID>
    <ID>Wrapping:SpaceAdapter.kt$SpaceAdapter$(</ID>
    <ID>Wrapping:TextView.kt$(</ID>
    <ID>Wrapping:TextView.kt$(SpannableString(text).apply { setSpan(URLSpan(""), 0, length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE) }, TextView.BufferType.SPANNABLE)</ID>
    <ID>Wrapping:TwoLetterDrawable.kt$TwoLetterDrawable$(</ID>
    <ID>Wrapping:UnixSocketAPI.kt$UnixSocketAPI$(</ID>
    <ID>Wrapping:Utility.kt$Utility$(</ID>
    <ID>Wrapping:WebDavFragment.kt$WebDavFragment$(</ID>
  </CurrentIssues>
</SmellBaseline>
